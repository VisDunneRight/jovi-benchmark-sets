[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Benchmark Datasets for Graph Layout Algorithms",
    "section": "",
    "text": "Abstract\n\n\n\n\n\n\n\n\n\nComputational evaluations are crucial for standardized and objective evaluation of graph layout algorithms. Standard benchmark datasets facilitate comparison with prior work, and reliable access to datasets is fundamental for replicability. However, there is no comprehensive repository of benchmark datasets for Graph Drawing, and many datasets have been lost.\n\n\n\nWe collected 196 papers from Graph Drawing, IEEE venues, and Eurographics venues that include computational evaluations of graph layout algorithms. We searched for the datasets used.\n\n\n\nWe archived datasets we found and re-created ones that were lost but had sufficient replication instructions. We classified graphs by their features and statistics. We also found text and images from papers using those graphs.\n\n\n\nWe implemented graph creation, data analysis, and website code.\n\n\n\nWe provide a Graph Benchmark Datasets website; a repository with code for the website and metadata on the benchmark datasets; a long-term archive of this repository and the benchmark datasets.\n\n\n\nWe provide a resource for the Graph Drawing and visualization communities to use to find datasets for computational evaluations of graph layout algorithms. Our organization by features and statistics supports rapid identification of relevant graphs. We have re-created and archived graphs used in research for their long-term preservation."
  },
  {
    "objectID": "index.html#classification-of-the-datasets",
    "href": "index.html#classification-of-the-datasets",
    "title": "Benchmark Datasets for Graph Layout Algorithms",
    "section": "3.1 Classification of the Datasets",
    "text": "3.1 Classification of the Datasets\nWe classified the datasets in different categories, based on their origins or amount of graphs contained in them:\n\n{ \n  let d = []\n  \n  let collection_type = benchmark_datasets.map(a =&gt; a[\"Type of Collection\"]);\n\n  for (let c of [... new Set(collection_type)]){\n    if (c == \"Skip\" || c == \"Missed it\") continue;\n    let count = collection_type.filter(a =&gt; a == c).length;\n    if (c.includes(\"No report\")) c = \"Established Network Repository\";\n    d.push({\"collection_type\": c, \"count\": count})\n  }\n  \n  return Plot.plot({\n    color: {\n      // legend: true,\n      // type: \"categorical\",\n      // domain: d3.range(10).map((d, i) =&gt; `Category ${i + 1}`),\n      scheme: \"Tableau10\" // use the \"accent\" scheme\n    },\n    y: {\n      // tickFormat: \"s\"\n    },\n    marks: [\n      Plot.barX(d, {x: \"count\", y: \"collection_type\", fill: \"collection_type\", inset: 2, sort: {y: \"x\", reverse: true}}),\n      Plot.axisY({label: null, lineWidth: 12, marginLeft: 150}),\n    ]\n  })\n}\n\n\n\n\n\n\n\nUniform Benchmark datasets\nUniform Benchmark datasets are standalone widely used collections of graphs featuring uniform characteristics - usually simple, generic graphs, often used in evaluations that run over thousands of graphs to report average completion times, or other experiments where the reported metrics are usually aggregated.\nThe first of these collapsible sections is shown already expanded, to give an example of the content that can be found in each of them. The content is generated dynamically based on the data we collected.\n\n\n\n\n\n\n\n\n\nRome-Lib\n\n\n\n\n\nRome-Lib is, as previously discussed, the most common benchmark dataset, due to its already established popularity, its ease of use and access, and the many properties that are already known about it. It was first introduced in (Battista et al. 1997) and presented in their paper ”An experimental comparison of four graph drawing algorithms”. Mostly “real” networks such as software companies, government, software engineering books, database design, and journal articles on visualization. Originally sent as an extended abstract to Computational Geometry in 1995 (Di Battista, Garg, and Liotta 1995). It contains exclusively generic graphs (e.g., undirected, non-layered, without pre-established clusters…), although some of the research that uses it enhances with additional attributes (such as performing a rank assignment step). Information about optimal crossings can be found as part of WebCompute.\n\n\nOriginally found at: http://www.graphdrawing.org/data.html\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 11534 graphs, 10 to 100 nodes, 9 to 158 edges\n\n\n\nOrigin paper: \n\n\n\n(Battista et al. 1997)\n\n\nAn experimental comparison of four graph drawing algorithms\n\n\n\n\n(Di Battista, Garg, and Liotta 1995)\n\n\nAn experimental comparison of three graph drawing algorithms (extended abstract)\n\n\n\n\nUsage examples: \n\n\n\n(Buchheim et al. 2008)\n\n\nA branch-and-cut approach to the crossing number problem\n\n\n\ngeneric\n\n\n\n\n\n(Chimani et al. 2010)\n\n\nLayer-Free Upward Crossing Minimization\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n(Chimani, Gutwenger, and Mutzel 2006)\n\n\nExperiments on Exact Crossing Minimization Using Column Generation\n\n\n\ngeneric\n\n\n\n\n\n(Di Bartolomeo et al. 2022)\n\n\nStratisfimal Layout: A modular optimization model for laying out layered node-link network visualizations\n\n\n\nclusters (pre-existing)\n\n\ncompound graphs\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n(Klammler, Mchedlidze, and Pak 2018)\n\n\nAesthetic Discrimination of Graph Layouts\n\n\n\ngeneric\n\n\n\n\n\n(Chimani, Mutzel, and Bomze 2008)\n\n\nA New Approach to Exact Crossing Minimization\n\n\n\ngeneric\n\n\n\n\n\n(Emden R. Gansner and Koren 2006)\n\n\nImproved circular layouts\n\n\n\ncircular\n\n\n\n\n\n\n\n\nDeep Neural Network for DrawiNg Networks\n\n\n\n\n\n\n\n(Gutwenger and Mutzel 2004)\n\n\nAn Experimental Study of Crossing Minimization Heuristics\n\n\n\ngeneric\n\n\n\n\n\n(Battista et al. 1997)\n\n\nAn experimental comparison of four graph drawing algorithms\n\n\n\ngeneric\n\n\n\n\n\n(Chimani, Klein, and Wiedera 2016)\n\n\nA Note on the Practicality of Maximal Planar Subgraph Algorithms\n\n\n\nplanar\n\n\n\n\n\n(Kindermann, Meulemans, and Schulz 2018)\n\n\nExperimental Analysis of the Accessibility of Drawings with Few Segments\n\n\n\nsparse\n\n\ntrees\n\n\n\n\n\n(Heinsohn and Kaufmann 2018)\n\n\nAn Interactive Tool to Explore and Improve the Ply Number of Drawings\n\n\n\ngeneric\n\n\n\n\n\n(Demel et al. 2018)\n\n\nA Greedy Heuristic for Crossing-Angle Maximization\n\n\n\ngeneric\n\n\n\n\n\n(Bekos et al. 2018)\n\n\nA Heuristic Approach Towards Drawings of Graphs with High Crossing Resolution\n\n\n\ngeneric\n\n\n\n\n\n(Niedermann and Rutter 2020)\n\n\nAn Integer-Linear Program for Bend-Minimization in Ortho-Radial Drawings\n\n\n\northo\n\n\northo-radial\n\n\n\n\n\n(Chimani, Ilsen, and Wiedera 2021)\n\n\nStar-Struck by Fixed Embeddings: Modern Crossing Number Heuristics\n\n\n\ngeneric\n\n\n\n\n\n(Clancy, Haythorpe, and Newcombe 2019b)\n\n\nAn effective crossing minimisation heuristic based on star insertion\n\n\n\ngeneric\n\n\n\n\n\n(Chimani and Gutwenger 2012)\n\n\nAdvances in the Planarization Method: Effective Multiple Edge Insertions\n\n\n\ngeneric\n\n\n\n\n\n(Chimani and Wiedera 2016)\n\n\nAn ILP-based Proof System for the Crossing Number Problem\n\n\n\ngeneric\n\n\n\n\n\nStatistics\n\n\n\n\n\nDescriptions from Literature\nFrom “A branch-and-cut approach to the crossing number problem”:\n\nTo test the performance of our new algorithm, we used a benchmark set of graphs of the University of Rome III, introduced in [11]. The set contains 11 389 graphs that consist of 10 to 100 nodes and 9 to 158 edges. These graphs were generated from a core set of 112 “real life” graphs used in database design and software engineering applications. Most of the graphs are sparse, which is a common property in most application areas of automatic graph drawing. The average ratio between the number of edges and the number of nodes of the graphs from the benchmark set is about 1.35.\n\nFrom “Layer-free upward crossing minimization”:\n\nThe Rome graphs [Di Battista et al. 1997] are a widely used benchmark set in graph drawing, obtained from a basic set of 112 real-world graphs. It contains 11,528 instances with 10 through 100 nodes and 9 through 158 edges. Although the graphs are originally undirected, they have been used as directed graphs—by artificially directing the edges according to the node order given in the input files—for showing the performance of the mixed-upward planarization approach [Eiglsperger et al. 2003]. In this case, all edges are directed and the graphs are acyclic; hence, the mixed-upward planarization approach turns into an upward planarization method.\n\nFrom “A New Approach to Exact Crossing Minimization”:\n\nWe say graphs are trivial, if they are planar or if the heuristic achieves a planarization with only one crossing, as in these cases we need not prove optimality. The Rome library contains 7172 non-trivial graphs.\n\nFrom “An Experimental Comparison of Four Graph Drawing Algorithms”\n\nOur test graph generation strategy is as follows. First, we have focused on the important application area of database and software visualization, where Entity-Relationship diagrams and Data-Flow diagrams are usually displayed with orthogonal drawings. Second, we have collected 112 “real life” graphs with number of vertices between 10 and 100, from now on called core graphs, from the following sources:\n\n\n• 54% of the graphs have been obtained from major Italian software companies (especially from Database Informatica) and large government organization (including the Italian Internal Revenue Service and the Italian National Advisory Council for Computer Applications in the Government (Autorita’ per l’Informatica nella Pubblica Amministrazione)); • 33% of the graphs were taken from well-known reference books in software engineering [18] and database design [1], and from journal articles on software visualization in the recent issues of Information Systems and the IEEE Transactions on Software Engineering; • 13% of the graphs were extracted from theses in software and database visualization written by students at the University of Rome “La Sapienza”.\n\n\nOur approach is based on the following scheme. We defined several primitive operations for updating graphs, which correspond to the typical operations performed by designers of Entity-Relationship and Data-Flow Diagrams, and attributed a certain probability to each of them. More specifically, the updating primitives we have used are the following: InsertEdge, which inserts a new edge between two existing vertices; DeleteEdge, which deletes an existing edge; InsertVertex, which splits an existing edge into two edges by inserting a new vertex; DeleteVertex, which deletes a vertex and all its incident edges; and MakeVertex, which creates a new vertex and connects it to a subset of vertices. The test graphs were then generated in several iterations starting from the core graphs by applying random sequences of operations with a “genetic” mechanism. Namely, at each iteration a new set of test graphs was obtained by applying a random sequence of operations to the current test set. Each new graph was then evaluated for “suitability”, and those found not suitable were discarded. The probability of each primitive operation was varied at the end of each iteration. The evaluation of the suitability of the generated graphs was conducted using both objective and subjective analyses. The objective analysis consisted of determining whether the new graph had similar structural properties with respect to the core graph it was derived from. We have taken into account parameters like the average ratio between number of vertices and number of edges and the average number of biconnected components. The subjective analysis consisted in a visual inspection of the new graph and an assessment by expert users of Entity-Relationship and Data-Flow diagrams of its similarity to a “real-life” diagram. For obvious reasons, the subjective analysis has been done on a randomly selected subset of the graphs.\n\n\n\nExample Figures\nFrom ”An Experimental Comparison of Four Graph Drawing Algorithms”:\n\n\n\nFrom “Experimental Analysis of the Accessibility of Drawings with Few Segments”:\n\n\n\nFrom: Deep Neural Network for DrawiNg Networks, (DNN)2:\n\n\n\nFig 5. Layout examples for (DNN)^2, (DNN)^2, tsNET∗ and S_GD^2.\n\n\n\n\nThe following collections, together with Rome-Lib, can be easily accessed from the homepage of the Graph Drawing Conference website, and are therefore well known and widely used. \n\n\n\n\n\n\n\nAT&T\n\n\n\n\n\n\nOriginally collected by Stephen North at AT&T Bell Labs (see the descriptions from literature section below for more information). The original link from 1995 is broken: ftp://ftp.research.att.com/dist/drawdag. Di Battista et al. modified the dataset by removing isomorphic graphs, connecting disconnected graphs, and removing cycles. Same as North DAG collection. It contains directed and acyclic graphs.\n\nOriginally found at: http://www.graphdrawing.org/data.html\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 1277 graphs, 10 to 100 nodes, 9 to 241 edges\n\n\n\nOrigin paper: \n\n\n(Battista et al. 2000)     Drawing Directed Acyclic Graphs: An Experimental Study\n\n\n\nUsage examples: \n\n\n\n(Hachul and Jünger 2005)\n\n\nDrawing Large Graphs with a Potential-Field-Based Multilevel Algorithm\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n(Hachul and Juenger 2006)\n\n\nAn Experimental Comparison of Fast Algorithms for Drawing General Large Graphs\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n\n\n\nLarge-Graph Layout with the Fast Multipole Multilevel Method\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n(Jabrayilov et al. 2016)\n\n\nCompact Layered Drawings of General Directed Graphs\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n(Jünger, Mutzel, and Spisla 2018)\n\n\nA Flow Formulation for Horizontal Coordinate Assignment with Prescribed Width\n\n\n\ndag\n\n\nhierarchical\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n(Mallach 2019)\n\n\nA Natural Quadratic Approach to the Generalized Graph Layering Problem\n\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n(Chimani and Gutwenger 2012)\n\n\nAdvances in the Planarization Method: Effective Multiple Edge Insertions\n\n\n\ngeneric\n\n\n\n\n\n(Barth, Jünger, and Mutzel 2002)\n\n\nSimple and Efficient Bilayer Cross Counting\n\n\n\nbipartite\n\n\nlayered graphs\n\n\n\n\n\n(Battista et al. 2000)\n\n\nDrawing Directed Acyclic Graphs: An Experimental Study\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n(Welch and Kobourov 2017)\n\n\nMeasuring Symmetry in Drawings of Graphs\n\n\n\ngeneric\n\n\n\n\n\nStatistics\n\n\n\n\n\nDescriptions from Literature\nFrom “Drawing Directed Acyclic Graphs: An Experimental Study”:\n\nThe experimental study was performed on two different sets of DAGs, both with a strong connection to “real-life” applications. We considered two typical contexts where DAGs play a fundamental role, namely software engineering and project planning.\n\n\nThe first set of test DAGs are what we call the North DAGs. They are obtained from a collection of directed graphs [28], that North collected at AT&T Bell Labs by running for two years Draw DAG, an e-mail graph drawing service that accepts directed graphs formatted as e-mail messages and returns messages with the corresponding drawings [27].\n\n\nOriginally, the North DAGs consisted of 5114 directed graphs, whose number of vertices varied in the range 1 … 7602. However, the density of the directed graphs with a number of vertices that did not fall in the range 10 … 100 was very low (see also the statistics in [28]); since such directed graphs represent a very sparse statistical population we decided to discard them. Then we noted that many directed graphs were isomorphic; since the vertices of the directed graphs have labels associated with them, the problem is tractable. For each isomorphism class, we kept only one representative directed graph. Also, we deleted the directed graphs where subgraphs were specified as clusters, to be drawn in their own distinct rectangular region of the layout, because constrained algorithms are beyond the scope of this study. This filtering left us with 1277 directed graphs.\n\n\nStill, 491 directed graphs were not connected and this was a problem for running algorithms implemented in G D W (they assume input directed graphs to be connected). Instead of discarding the directed graphs, we followed a more practical approach, by randomly adding a minimum set of directed edges that makes each directed graph connected. Finally, we made the directed graph acyclic, where necessary, by applying some heuristics for inverting the direction of a small subset of edges.\n\n\nWe then ran a first set of experiments and produced the statistics by grouping the DAGs by number of vertices. Although the comparison among the algorithms looked consistent (the produced plots never oddly overlapped), each single plot was not satisfactory, because it showed peaks and valleys. We went back to study the test suite and observed that grouping them by number of vertices was not the best approach. In fact, the North DAGs come from very heterogeneous sources, mainly representing different phases of various software engineering projects; as a result, directed graphs with more or less the same number of vertices may be either very dense or very sparse.\n\n\nSince most of the analyzed quality measures strongly depend on the number of edges of the DAG (e.g. area, number of bends, and number of crossings), we decided that a better approach was to group the DAGs by number of edges. After some tests, we clustered the DAGs into nine groups, each with at least 40 DAGs, so that the number of edges in the DAGs belonging to group i, 1 ≤ i ≤ 9, is in the range 10 i … 10 i+9 (see Fig. 3). The resulting test suite consists of 1158 DAGs, each with edges in the range 10 … 99.\n\nFrom “Layer-Free Upward Crossing Minimization”:\n\nNorth DAGs. The North DAGs have been introduced in an experimental comparison of algorithms for drawing DAGs [Di Battista et al. 2000]. The benchmark set contains 1,158 DAGs collected by Stephen North, which were slightly modified by Di Battista et al. The graphs are grouped into nine sets, where set i contains graphs with 10 i to 10 i+9 arcs for i=1, …, 9.\n\n\n\nExample Figures\nFrom “Drawing Directed Acyclic Graphs: An Experimental Study”:\n\n\n\n\n\n\nFrom “A Natural Quadratic Approach to the Generalized Graph Layering Problem”:\n\n\n\nFrom “A Flow Formulation for Horizontal Coordinate Assignment with Prescribed Width”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNorth DAGs\n\n\n\n\n\n\nThis is the same collection as AT&T, but referred to as North DAGs in the papers we analyzed. We kept the two collections separate, based on how they are referred to in the papers we collected.\n\nOriginally found at: See AT&T\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: See AT&T\n\n\n\nOrigin paper: \n\n\n\n(Battista et al. 2000)\n\n\nDrawing Directed Acyclic Graphs: An Experimental Study\n\n\n\n\nUsage examples: \n\n\n\n(Chimani et al. 2010)\n\n\nLayer-Free Upward Crossing Minimization\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n(Chimani, Klein, and Wiedera 2016)\n\n\nA Note on the Practicality of Maximal Planar Subgraph Algorithms\n\n\n\nplanar\n\n\n\n\n\n(Rüegg et al. 2016)\n\n\nA Generalization of the Directed Graph Layering Problem\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n(Demel et al. 2018)\n\n\nA Greedy Heuristic for Crossing-Angle Maximization\n\n\n\ngeneric\n\n\n\n\n\n(Chimani, Ilsen, and Wiedera 2021)\n\n\nStar-Struck by Fixed Embeddings: Modern Crossing Number Heuristics\n\n\n\ngeneric\n\n\n\n\n\n(Chimani and Wiedera 2016)\n\n\nAn ILP-based Proof System for the Crossing Number Problem\n\n\n\ngeneric\n\n\n\n\n\n(Battista et al. 2000)\n\n\nDrawing Directed Acyclic Graphs: An Experimental Study\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n(Binucci et al. 2016)\n\n\nPlacing Arrows in Directed Graph Drawings\n\n\n\ndirected edges\n\n\n\n\n\n(Klammler, Mchedlidze, and Pak 2018)\n\n\nAesthetic Discrimination of Graph Layouts\n\n\n\ngeneric\n\n\n\n\n\n(Binucci et al. 2022)\n\n\nPlacing Arrows in Directed Graph Layouts: Algorithms and Experiments\n\n\n\ndirected edges\n\n\n\n\n\nDescriptions from Literature\nFrom “Layer-Free Upward Crossing Minimization”:\nNorth DAGs. The North DAGs have been introduced in an experimental comparison of algorithms for drawing DAGs [Di Battista et al. 2000]. The benchmark set contains 1,158 DAGs collected by Stephen North, which were slightly modified by Di Battista et al. The graphs are grouped into nine sets, where set \\(i\\) contains graphs with \\(10 i\\) to \\(10 i+9\\) arcs for \\(i=1, \\ldots, 9\\).\n\n\n\n\n\n\n\n\n\n\n\nRandDAG or DAGMar\n\n\n\n\n\nThe randDAG collection concludes the collections that can be easily accessed from graphdrawing.org. http://graphdrawing.org highlights the DAGmar graph generator, and provides a benchmark set of randomly generated directed acyclic graphs. While not explicit, it is implied this benchmark comes from the DAGmar generator. The collection is uniformly sampled from set of level graphs with certain graph parameters, such as number of nodes and number of edges. These graphs have no particular features, thus they are classified as generic.\n\n\nOriginally found at: http://www.graphdrawing.org/data.html\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 10-100 nodes, 15-167 edges\n\n\n\nOrigin paper: \n\n\n\n(Bachmaier, Gleißner, and Hofmeier 2012)\n\n\nDAGmar: Library for DAGs\n\n\n\n\nUsage examples: \n\n\n\n(Klammler, Mchedlidze, and Pak 2018)\n\n\nAesthetic Discrimination of Graph Layouts\n\n\n\ngeneric\n\n\n\n\n\nStatistics\n\n\n\n\n\nDescriptions from the Literature\nFrom “Aesthetic Discrimination of Graph Layouts”:\n\nWe have assembled such a dataset using two types of sources. First, we used the collections of the well-known graph archives ROME, NORTH and RANDDAG which are published on graphdrawing.org as well as the NIST’s “Matrix Market” [2].\n\n\n\nExample Figures\nFrom “Aesthetic Discrimination of Graph Layouts (Appendix)”:\n\n\n\nFig. 5. (cropped)… All graphs are visualized using the \\(FM^3\\) algorithm.\n\n\n\n\n\nThe datasets listed below are particularly useful when researchers are interested in testing for crossing numbers. Indeed, they both deal with graphs that have a known crossing numbers.\n\n\n\n\n\n\n\nKnownCR\n\n\n\n\n\nKnownCR is a collection of graphs with known crossing numbers, and it is used to test the performance of algorithms that approximate the crossing number of a graph. The dataset is used in papers that aim to approximate the crossing number of a graph, and it is used to compare the results of the approximation algorithms to the known crossing numbers of the graphs. A good resource for this is also the survey provided by (Clancy, Haythorpe, and Newcombe 2019a). The graphs themselves do not appear to exist online elsewhere, but the method by which they can be created is fully described in (Gutwenger 2010). \n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 9-250 nodes, 18-750 edges\n\n\n\nOrigin paper: \n\n\n\n[link]\n\n\nApplication of SPQR-Trees in the Planarization Approach for Drawing Graphs\n\n\n\n\nUsage examples: \n\n\n\n(Chimani, Ilsen, and Wiedera 2021)\n\n\nStar-Struck by Fixed Embeddings: Modern Crossing Number Heuristics\n\n\n\ngeneric\n\n\n\n\n\n(Clancy, Haythorpe, and Newcombe 2019b)\n\n\nAn effective crossing minimisation heuristic based on star insertion\n\n\n\ngeneric\n\n\n\n\n\n(Chimani and Gutwenger 2012)\n\n\nAdvances in the Planarization Method: Effective Multiple Edge Insertions\n\n\n\ngeneric\n\n\n\n\n\nStatistics\n\n\n\n\n\nDescription from Literature\nFrom “An effective crossing minimisation heuristic based on star insertion”:\n\nKnownCR graphs- these are a set of instances containing between 9 and 250 vertices, first collected by Gutwenger [22], which can be further partitioned into four families of graphs as follows: \\(C_i \\times C_j\\): The Cartesian product of the cycle on \\(i\\) vertices with the cycle on \\(j\\) vertices. The instances contain graphs with \\(3 \\leq i \\leq 7\\) and \\(j \\geq i\\) such that \\(ij \\leq 250\\). \\(G_i \\times P_j\\): The Cartesian product of the path on \\(j+1\\) vertices with one of the 21 non-isomorphic connected graphs on 5 vertices, where \\(i\\) denotes which of the 21. The instances contain graphs with \\(3 \\leq j \\leq 49\\). \\(G_i \\times C_j\\): The Cartesian product of the cycle on \\(j\\) vertices with one of the 21 non-isomorphic connected graphs on 5 vertices, where \\(i\\) denotes which of the 21. The crossing number of these graphs is only known for some of the \\(G_i\\) and only these cases are included. The instances contain graphs with \\(3 \\leq j \\leq 50\\). The Generalised Petersen graphs \\(P(j,2)\\) and \\(P(j,3)\\), on \\(2j\\) vertices. We shall only use those of type \\(P(j,3)\\) as \\(P(j,2)\\) (studied in [20]) are easy for heuristics to solve, as has already been observed in [9]. The instances contain graphs with \\(9 \\leq j \\leq 125\\).\n\nFrom “Advances in the Planarization Method: Effective Multiple Edge Insertions”:\n\nFinally, the KnownCR graphs [11] are a collection of 1946 graphs with known crossing numbers (by proofs), consisting of generalized Petersen graphs (P(m, 2), P(m, 3)) and products of cycles \\(C_n\\), paths \\(P_n\\), and 5-vertex graphs \\(G_i (C_m \\times C_n, G_i \\times P_n, G_i \\times C_n)\\); these graphs have between 9 and 250 nodes.\n\n\n\nExample Figures\nFrom “Application of SPQR-Trees in the Planarization Approach for Drawing Graphs”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWebCompute\n\n\n\n\n\nThe dataset is comprised of instances of graphs uploaded to Crossing Number WebCompute, attributed to M. Chimani, T. Wiedera. http://crossings.uos.de/cr-proof-system-paper. Their website also features proofs of the crossing numbers of many of the Rome-Lib graphs. Newest version of database specifies non-planar graphs, but older versions do have some planar graphs.\n\n\nOriginally found at: https://tcs.uos.de/doku.php?id=research/cr\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 3-112 nodes, 3-366 edges\n\n\n\nOrigin paper: \n\n\n\n(Chimani and Wiedera 2016)\n\n\nAn ILP-based Proof System for the Crossing Number Problem\n\n\n\n\nUsage examples: \n\n\n\n(Chimani and Wiedera 2016)\n\n\nAn ILP-based Proof System for the Crossing Number Problem\n\n\n\ngeneric\n\n\n\n\n\nStatistics\n\n\n\n\n\nDescriptions from Literature\nFrom “An ILP-based Proof System for the Crossing Number Problem”:\n\nTo determine the applicability of the proof system, we tested the algorithms on three benchmark sets: the 3110 non-trivial Rome graphs [14], the 1277 North graphs [15], and the145 non-planar graphs (http://crossings.uos.de/instances) collected by our crossing number web-service.\n\n\n\n\n\n\n\n\n\n\n\n\n\nComplete Graphs\n\n\n\n\n\nComplete graphs refers to a generic collection of graphs that are fully connected, i.e., each node is connected to every other node, up to any number of nodes that are needed for the purpose of the experiment. The linked dataset includes both the complete graphs \\(K_n\\) for \\(5≤n≤50\\) and the complete bipartite graphs \\(K_{n_1,n_2}\\) for \\(5≤n1,n2≤40\\). Crossing number is conjectured for most of these, and while not proven, we found these used in papers to validate minimum crossing numbers. We also note that the papers in our literature review did not provide example figures.\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 5-80 nodes, 10-1600 edges\n\n\n\nNumber of Graphs: 1342\n\n\n\nUsage examples: \n\n\n\n(Clancy, Haythorpe, and Newcombe 2019b)\n\n\nAn effective crossing minimisation heuristic based on star insertion\n\n\n\ngeneric\n\n\n\n\n\nStatistics\n\n\n\n\n\nDescriptions from Literature\nFrom “An effective crossing minimisation heuristic based on star insertion”:\n\nComplete graphs - Although the crossing number of the complete graph \\(K_n\\) is not known for for \\(n ≥ 13\\), the value is conjectured, and typically assumed to be correct. We compare the nine combinations of schemes to see how close to the conjectured value each of them is able to get, for various sizes of complete graphs up to \\(n = 50\\). We indicate how many crossings are obtained after the initial embedding, as well as at the conclusion of the heuristic. We also provide the runtimes, again separated into time spent producing the initial embedding, and time spent in the main loop of the heuristic.\n\n\nComplete bipartite graphs - Much like the complete graphs, the crossing number of the complete bipartite graph \\(K_{n1,n2}\\) is only known in general for \\(n_1 ≤ 6\\), but the value is conjectured and typically assumed to be correct. Again, we compare the nine combinations of schemes to see how close to the conjectured value they can get for values up to \\(n_1,n_2 = 40\\), and report the same data as for the Complete graphs.\n\n\nThe crossing number of the complete graph \\(K_n\\) is conjectured (e.g. see Guy [25]) to be equal to \\(H(n) := 1/4 \\left\\lfloor n/2\\right\\rfloor \\left\\lfloor (n − 1)/2\\right\\rfloor \\left\\lfloor(n − 2)/2\\right\\rfloor \\left\\lfloor (n − 3)/2\\right\\rfloor\\). Although this conjecture is widely believed to be correct, it has only been confirmed for \\(n ≤ 12\\) despite considerable effort to extend the results further [30]. We ran the graphs \\(K_n\\) for \\(5 ≤ n ≤ 50\\). Each graph was run with 100 random permutations and the minimum found solution was compared to \\(H(n)\\) by computing the percent relative deviation from \\(H(n)\\)… For these graphs, we observe that when \\(n\\) was odd, every scheme combination was able to obtain a drawing with \\(H(n)\\) crossings. However, when \\(n\\) was even, each scheme reached a value which was usually very close but not equal to \\(H(n)\\).\n\n\nThe crossing number of the complete bipartite graph \\(K_{n_1,n_2}\\) is conjectured (e.g. see Zarankiewicz [35]) to be equal to \\(Z(n_1, n_2) := \\left\\lfloor n_1/2\\right\\rfloor \\left\\lfloor (n_1 − 1)/2\\right\\rfloor \\left\\lfloor n_2/2\\right\\rfloor \\left\\lfloor (n_2 − 1)/2\\right\\rfloor\\). We ran the graphs \\(K_{n_1,n_2}\\) for \\(5 ≤ n1 ≤ n2 ≤ 40\\). Each graph was run with 100 random permutations and the minimum found solution was compared to \\(Z(n_1,n_2)\\)… As can be seen in Table 6, QuickCross was successful in obtaining the conjectured optimum in all cases and for all scheme combinations, except \\(K_{30,30}\\) and \\(K_{40,40}\\)\n\n\n\n\n\nThe collections presented here are particularly varied in features:\n\n\n\n\n\n\n\nGraphviz Examples\n\n\n\n\n\nWhile graphviz is a graph visualization software, its example gallery has proven useful to many researchers as a source of benchmark datasets. The graphs have various origins, most of which are described on the Graphviz https://www.graphviz.org/gallery/. Example graphs used to generate images with the https://www.graphviz.org for their https://www.graphviz.org/gallery/. These graphs are picked as graphviz examples because they are diverse in types of features they contain: together with generic graphs, there are also graphs with clusters, layers, directed edges and labeled nodes.\n\n\nOriginally found at: https://gitlab.com/graphviz/graphviz/-/tree/main/tests/graphs\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 1-1464 nodes, 0-5806 edges\n\n\n\nOrigin paper: \n\n\n\n(Emden R. Gansner and North 2000)\n\n\nAn open graph visualization system and its applications to software engineering\n\n\n\n\nUsage examples: \n\n\n\n(Gange, Stuckey, and Marriott 2011)\n\n\nOptimal k-level planarization and crossing minimization\n\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n(Nachmanson et al. 2017)\n\n\nNode Overlap Removal by Growing a Tree\n\n\n\nlarge\n\n\n\n\n\n(Giovannangeli et al. 2023)\n\n\nFORBID: Fast Overlap Removal by Stochastic GradIent Descent for Graph Drawing\n\n\n\ngeneric\n\n\n\n\n\nStatistics\n\n\n\n\n\nDescriptions from Literature\nFrom “Node Overlap Removal by Growing a Tree”:\n\nOur data includes the same set of graphs that was used by the authors of PRISM to compare it with other algorithms [6]. The dataset is available in the Graphviz open source package.\n\nFrom “Optimal k-level planarization and crossing minimization”:\n\nThe first set of graphs are all the hierarchical network diagrams appearing in the GraphViz gallery [3]… Table 1 shows the results of minimizing edge crossings and maximizing planar subgraphs with MIP and SAT solvers, as well as the crossings resulting in the Graphviz heuristic layout for graphs from the GraphViz gallery.\n\n\n\nExample Figures\nFrom “Node Overlap Removal by Growing a Tree”:\n\n\n\n\n\n\nFrom “FORBID: Fast Overlap Removal by Stochastic GradIent Descent for Graph Drawing”:\n\n\n\nFrom “Optimal k-level planarization and crossing minimization”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScotch Graph Collection\n\n\n\n\n\nCollection consisting of graphs from various sources including topological meshes, meshes related to physical problems (fluid dynamics, structural mechanics, combinatorial optimization), and interprocess communication graphs for a parallel computing implementation of a factorization solver. The https://gitlab.inria.fr/scotch/scotch is produced by the https://www.labri.fr/perso/pelegrin/scotch/ whose goal is to study static mapping by the means of graph theory, using “divide and conquer’’ graph bipartitioning heuristics. The original link to the data http://www.labri.u-bordeaux.fr/Equipe/PARADIS/Member/pelegrin/graph is broken.\n\nmake_sparkline(\"Scotch_GraphCollection\")\n\n\n\n\n\n\n\n\n\n\n\n\nThe following two collections are particularly relevant for the display of temporal event sequences:\n\n\n\n\n\n\n\nStorylines (Movie Plots)\n\n\n\n\n\nThe storylines dataset is particularly useful for temporal event sequence visualization because of its dynamic aspect and clusters (which also evolve through time). It is a collection of graphs that represent movie plots, and the nodes are the characters in the movie. The edges represent the interactions between the characters. This dataset was initially collected by Yuzuru Tanahashi, then stored on his homepage at UC Davis which was lost. Through the help of personal connections at UC Davis, we were luckily able to recover the dataset.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMilitarized Interstate Disputes (MID)\n\n\n\n\n\nCollected as part of the correlatesofwar.org project, the dataset contains two disconnected temporal event sequences.\n//| echo: false\n\nmake_sparkline(\"Militarized_InterstateDisputesMID\")\n\n\n\n\n\n\nCollections of graphs that focus on one specific attribute can also be useful in case the attribute relates to geographical data:\n\n\n\n\n\n\n\nWorld Maps\n\n\n\n\n\nDatasets contain various attributes for a few locations and their geographical adjacency, namely neighboring states, countries, and municipalities. World Bank country information transformed into a weight-vectors dataset. Some of the incomplete data was filled from disparate sources mentioned in the paper’s supplemental materials: https://doi.org/10.48550/arXiv.1908.07291. The collection contains 14 graphs with dynamic and spatial attributes, categorical nodes, and weighted nodes.\n\n\nOriginally found at: https://data.worldbank.org/indicator https://github.com/loizuf/StableDemersLP/tree/main/code/StableDemers_TVCG/data\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 48-514 nodes, 205-2428 edges\n\n\n\nNumber of Graphs: 14\n\n\n\nOrigin paper: \n\n\n\n(Nickel et al. 2019)\n\n\nComputing Stable Demers Cartograms\n\n\n\n\nUsage examples: \n\n\n\n(Nickel et al. 2019)\n\n\nComputing Stable Demers Cartograms\n\n\n\ndynamic\n\n\nspatial\n\n\n\n\n\nStatistics\n\n\n\n\n\nDescriptions from Literature\nFrom Computing Stable Demers Cartograms”:\n\nWe run experiments on real-world datasets. For time-series data, we expect a gradual change and strong correlation between the different values. For weight-vectors data, we expect more erratic changes and less correlation. We use two maps with rather different geographic structures: the first (World) is a map of world countries, having mixed region (country) sizes in a rather unstructured manner; the second (US) is a map of the 48 contiguous US states, having relatively high structure in sizes of its states, with large states in the middle and along the west coast and many smaller states along the east coast.\n\nFrom Supplemental Materials, Appendix C of *“Computing Stable Demers Cartograms*”:\n\n\n\n\n\nExample Figures\nFrom Computing Stable Demers Cartograms”:\n\n\n\n\n\n\n\n\n\nOtherwise, one might decide to focus on a particular domain:\n\n\n\n\n\n\nBiological Pathways (KEGG)\n\n\n\n\n\nAccording to kegg.jp, “the KEGG PATHWAY database is a collection of manually drawn graphical diagrams, called KEGG pathway maps, for metabolic pathways, signaling pathways, pathways involved in various cellular processes and organismal systems, and perturbed pathways associated with human diseases.”\n//| echo: false\n\nmake_sparkline(\"Biological_PathwaysKEGG\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCo-Phylogenetic Trees\n\n\n\n\n\nCollected by the authors of “https://almob.biomedcentral.com/articles/10.1186/s13015-014-0031-3. Each element of the data set is two binary co-phylogentic trees. “Caryophyllaceae & Microbotryum” and “Stinkbugs & Bacteria” are missing but our dataset includes all other files from “https://doi.org/10.1007/978-3-319-73915-1_27”. An additional dataset from “https://almob.biomedcentral.com/articles/10.1186/s13015-014-0031-3”, called “Wolbachia”, is included. Naturally, the data contains trees.\n\n\nOriginally found at: https://gitlab.inria.fr/erable/eucalypt/-/blob/master/html/PaperDatasets.zip\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 13-773 nodes, 12-772 edges\n\n\n\nNumber of Graphs: 30\n\n\n\nOrigin paper: \n\n\n\n(Donati et al. 2015)\n\n\nEUCALYPT: efficient tree reconciliation enumerator\n\n\n\n\nUsage examples: \n\n\n\n(Calamoneri et al. 2018)\n\n\nVisualizing Co-phylogenetic Reconciliations\n\n\n\nbinary trees\n\n\ntrees\n\n\n\n\n\nStatistics\n\n\n\n\n\nDescriptions from Literature\nFrom “EUCALYPT: efficient tree reconciliation enumerator”:\n\nTo test EUCALYPT, we selected 12 datasets from the literature. As we are mostly interested in host-parasite systems, the first 10 datasets concern such relations: EC Encyrtidae & Coccidae [23], GL Gopher & Lice [24], SC Seabirds & Chewing Lice [25], RP Rodents & Pinworms [26], SCF Smut Fungi & Caryophillaceus plants [27], PLML Pelican Lice ML [28] (the trees are generated through a maximum likelihood approach), PLMP Pelican Lice MP [28] (the trees are generated through a maximum parsimony approach), RH Rodents & Hantaviruses [29], PP Primates & Pinworm [30], and FD Fishs and Dactylogyrus [31].\n\n\nIn addition, we used a dataset of our own which corresponds to arthropod hosts and a bacterium genus, Wolbachia, living inside the cells of their hosts [32,33]. The datasets were chosen to provide a variety in terms of size of the host and parasite trees: those from the literature are relatively small (from 7 to 100 leaves), while our own data provide an example of much bigger host and parasite trees, each having 387 leaves. Moreover, we were careful that the selected datasets cover, as much as possible, a range of situations in terms of coevolution and of the expected frequencies of each event\n\n\n\nExample Figures\nFrom “Visualizing Co-phylogenetic Reconciliations”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd finally, a collection of graph problems:\n\n\n\n\n\n\n\nSteinLib\n\n\n\n\n\nSteinLib is a collection of Steiner tree problems in graphs and variants. Their website has additional information about each problem in the dataset, including whether or not it has been solved. We omit two sets, Relay and EFST, from our provided data due to size constraints.\n\n\nOriginally found at: https://steinlib.zib.de/steinlib.php\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 6-38,418 nodes, 9-221,445 edges\n\n\n\nNumber of Graphs: 1207\n\n\n\nOrigin paper: \n\n\n\n(Koch, Martin, and Voß 2001)\n\n\nSteinLib: An Updated Library on Steiner Tree Problems in Graphs\n\n\n\n\nUsage examples: \n\n\n\n(Chimani, Klein, and Wiedera 2016)\n\n\nA Note on the Practicality of Maximal Planar Subgraph Algorithms\n\n\n\nplanar\n\n\n\n\n\nStatistics\n\n\n\n\n\nDescriptions from Literature\nFrom A Note on the Practicality of Maximal Planar Subgraph Algorithms:\n\nWe use the non-planar graphs of the established benchmark sets North [12] (423 instances), Rome [11] (8249), and SteinLib [16] (586), all of which include real-world instances. In our plots, we group instances according to |V| rounded to the nearest multiple of 10; for Rome we only consider graph with ≥ 25 vertices.\n\n\n\nExample Figures\nFrom SteinLib: An Updated Library on Steiner Tree Problems in Graphs:\n\n\n\n\n\n\n\n\n\n\nEstablished Network Repositories\nA popular choice is to use datasets from Established Network Repositories. These are ample collections, often organized in dedicated websites which also offer a few stats about the contained graphs. Because their hosts are already dedicated to the maintaining and reporting of information on these collections, we do not include here any storage of the data (which would be redundant) or report statistics on them. Rather, our analysis here is focused on highlighting their properties, origins, and ways in which they have been used.\nCompiled by the Mathematical and Computational Sciences Division of the Information Technology Laboratory of the National Institute of Standards and Technology, the Matrix Market is a repository of test data for use in comparative studies of algorithms for numerical linear algebra, featuring nearly 500 sparse matrices from a variety of applications, as well as matrix generation tools and services. It has been used for experiments with generic graphs, large graphs, and graphs with weighted edges. Each matrix entry is accompanied by metadata that includes the matrix name and identifier, dimensions (number of rows and columns), number of non-zero elements, symmetry type (symmetric, skew-symmetric, or general) and data type (real, complex, integer, or pattern). The website also provides visualizations of the matrices, helping users understand their structure and distribution of non-zero elements. Downloads are also provided in a variety of formats, including their own Matrix Market Exchange (MME) format, Harwell-Boeing, and MATLAB.\n\n\n\n\n\n\nMatrix Market\n\n\n\n\n\n\n\n\nOriginally found at: https://math.nist.gov/MatrixMarket/index.html\n\n\n\nDownload formatted data: \n\n\n\nNote: A repository of test data for use in comparative studies of algorithms for numerical linear algebra, featuring nearly 500 sparse matrices from a variety of applications, as well as matrix generation tools and services.\n\n\n\nOrigin Notes: Compiled by the https://math.nist.gov/mcsd/ of the http://www.itl.nist.gov/ of the http://www.nist.gov/\n\n\n\nOrigin paper: \n\n\nMatrix Market: a web resource for test matrix collections\n\n\n\nUsage examples: \n\n\n\n[link]   Aesthetic Discrimination of Graph Layouts\n\n\n\ngeneric\n\n\n\n\n\n[link]   Drawing graphs by eigenvectors: theory and practice\n\n\n\ngeneric\n\n\n\n\n\n[link]   Eigensolver methods for progressive multidimensional scaling of large data\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[link]   Graph Drawing by Stress Majorization\n\n\n\ngeneric\n\n\nweighted edges\n\n\n\n\n\n[link]   Sublinear Time Force Computation for Big Complex Network Visualization\n\n\n\nlarge\n\n\n\n\n\n\n\n\n\nDescriptions from Literature\n\n\n\n\n\n\n\nFrom “Graph Drawing by Stress Majorization”:\n\n\n\n\n\n\n\n\nThe first example is the 1138Bus graph (|V|=1138, |E|=1458) from the Matrix Market repository [1]. This graph models a network of high-voltage power distribution lines. Figure 4 shows two layouts of this graph.\n\n\n\n\n\n\n\n\nExample Figures\n\n\n\n\n\n\n\nFrom “Drawing graphs by eigenvectors: theory and practice” (top two layouts are a Matrix Market graph):\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “Graph Drawing by Stress Majorization”:\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Network Repository was proposed in 2015 by Rossi and Ahmed of Purdue University as a visually interactive real world graph tool and database. Graphs in this repository are tagged with their real-world source, have in-depth analysis, and even a preview visualization of each individual graph. Types of graphs include social networks, infrastructure networks, biological networks, and many others. The repository also offers sources for individual graphs. It contains many graphs from other benchmark sets described here.\n\n\n\n\n\n\nNetwork Repository\n\n\n\n\n\n\n\nOriginally found at: https://networkrepository.com/\n\n \n\nOrigin paper: \n\n\n\n(Rossi and Ahmed 2015)\n\n\nThe Network Data Repository with Interactive Graph Analytics and Visualization\n\n\n\n\nUsage examples: \n\n\n\n(Eades, Nguyen, and Hong 2018)\n\n\nDrawing Big Graphs Using Spectral Sparsification\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n(Arleo et al. 2019)\n\n\nA Distributed Multilevel Force-Directed Algorithm\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\nDescriptions from Literature\nFrom “A Distributed Multilevel Force-Directed Algorithm”:\n\nTo evaluate the running time of MULTI-GILA, we used the REALGRAPHS and BIGGRAPHS benchmarks, which contain larger graphs extracted from both real-world applications and synthetic generators; see Table 4. The REALGRAPHS set includes the 5 largest real-world graphs (mainly scale-free graphs) used in the experimental study of GILA [5]. These graphs are taken from the Stanford Large Networks Dataset Collection [3] and from the Network Data Repository [46], and their number of edges is between 121523 and 1541514.\n\nFrom “Drawing Big Graphs Using Spectral Sparsification”:\n\nWe used three data sets. The first set of graphs is taken from “defacto-benchmark” graphs, including the Hachul library, Walshaw’s Graph Partitioning Archive, the sparse matrices collection [6] and the network repository [24]. These include two types of graphs that have been extensively studied in graph drawing research: grid-like graphs and scale-free graphs.\n\n\n\n\n\n\nThe Pajek Program for Large Network Analysis is a tool developed and hosted by Andrej Vlado and some of their colleagues. As part of this program, they later compiled relevant graphs and links to other datasets, which we call today the Pajek collection. As a curiosity, pajek means spider in Slovenian. Many of Pajek graphs have been included as part of the SuiteSparse Matrix Collection.\n\n\n\n\n\n\nPajek\n\n\n\n\n\n\n\nOriginally found at: http://vlado.fmf.uni-lj.si/pub/networks/data/\n\n  \n\nOrigin paper: \n\n\n\n(Batagelj and Mrvar 2006)\n\n\nPajek datasets\n\n\n\n\nUsage examples: \n\n\n\n(Noack 2004)\n\n\nEnergy Models for Graph Clustering\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\n\n\n\n(Meidiana et al. 2019)\n\n\nA Quality Metric for Visualization of Clusters in Graphs\n\n\n\nclusters (generated)\n\n\n\n\n\nDescriptions from Literature\nFrom “Energy Models for Graph Clustering”:\n\nAirline Routing (Figure 5): The nodes of this graph represent US airports, and the (unweighted) edges represent direct flights. The probability that two airports are connected by a direct flight is strongly related to their geographical distance: Most direct flights are relatively short, and only few large hub airports are connected by direct long-range flights. The distances in the edge-repulsion LinLog layout resemble the relative geographical distances of the airports remarkably closely, given that the graph does not contain any explicit information about geographical distances.\n\n\nDictionary (Figure 7): The nodes represent terms in the Online Dictionary of Library and Information Science (ODLIS), and the edges represent hyperlinks. A hyperlink between two terms exists if one term is used to describe the meaning of the other term, and thus connects semantically related terms. The edge-repulsion LinLog layout indeed groups semantically related terms, which is better reflected in the VRML file on the supplementary web page than in Figure 7(c). Such a grouping is useful, for example, for discovering the global topic areas (like publishing, printing, information technology, etc.), for identifying entry points for the exploration of topics, or for finding semantically related terms even if they are not explicitly linked.\n\nFrom “A Quality Metric for Visualization of Clusters in Graphs”:\n\nWe re-used some datasets from the validation experiments and created some new ones, listed in Table 2. We also selected real world graph datasets with existing vertex categorization, which are listed under the double line in Table 2. The datasets were taken from Pajek [2] and Stanford Network Analysis Project’s (SNAP) repository [23, 40].\n\n\n\nExample Figures\nFrom “Energy Models for Graph Clustering”:\n\n\n\n\n\n\n\n\n\n\n\n\nThe SNAP repository is a collection of datasets assembled as part of the Stanford Network Analysis Platform, which started in 2004 and launched their website in 2009. Well-known, widely used graph repository.  A number of graphs that became relevant individually are included in SNAP, such as Enron, Amazon, Protein Interactions datasets and various Social Network graphs. SNAP contains generic graphs, directed and undirected graphs, dynamic graphs and more. Graphs are presented with name and descriptions and a few statistics such as a general description, numbers of nodes and edges, source and reference information.\n\n\n\n\n\n\nSNAP (Stanford Network Analysis Platform)\n\n\n\n\n\n\n\nOriginally found at: http://snap.stanford.edu/data/index.html\n\n \n\nSize: 1008 unique graphs (excluding graph classification tasks consisting of 352,536 graphs)\n\n \n\nOrigin paper: \n\n\n\n(Leskovec and Krevl 2014)\n\n\nSNAP Datasets: Stanford Large Network Dataset Collection\n\n\n\n\nUsage examples: \n\n\n\n(Arleo et al. 2019)\n\n\nA Distributed Multilevel Force-Directed Algorithm\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n(Meidiana et al. 2019)\n\n\nA Quality Metric for Visualization of Clusters in Graphs\n\n\n\nclusters (generated)\n\n\n\n\n\n\n\n\nForceAtlas2\n\n\n\n\n\n\n\n\n\n\na Continuous Graph Layout Algorithm for Handy Network Visualization Designed for the Gephi Software\n\n\n\n\n\n\n\n\n\n\nA Random Sampling O\n\n\n\n\n\n\n\n(Zhong et al. 2023)\n\n\nForce-Directed Graph Layouts Revisited: A New Force Based on the T-Distribution\n\n\n\ngeneric\n\n\n\n\n\n(Meidiana, Hong, and Eades 2023)\n\n\nShape-Faithful Graph Drawings\n\n\n\nalmost proximity drawable graphs\n\n\nmesh graphs\n\n\nscale-free graphs\n\n\nstrong proximity drawable graphs\n\n\nweak proximity drawable graphs\n\n\n\n\n\nDescriptions from Literature\nFrom “ForceAtlas2, a Continuous Graph Layout Algorithm for Handy Network Visualization Designed for the Gephi Software”:\n\nWe benchmarked our algorithm with a dataset of 68 networks from 5 to 23,133 nodes. We tried to gather varied networks corresponding to the actual use of Gephi (a lot of social networks, and scale-free networks in general). Most of these networks are from the Stanford Large Network Dataset Collection (http://snap. stanford.edu/data/) and include social networks (Facebook and Twitter ego-networks), collaboration networks (from Arxiv) and autonomous systems (peering information inferred from Oregon route-views).\n\n\n\nExample Figures\nFrom “ForceAtlas2, a Continuous Graph Layout Algorithm for Handy Network Visualization Designed for the Gephi Software”:\n\n\n\n\n\n\n\n\nCompiled by Donald Knuth, the Stanford Graphbase consists of programs and datasets for network analysis. The datasets accompany a textbook, “The Stanford GraphBase: A Platform for Combinatorial Computing”.\n\n\n\n\n\n\nStanford GraphBase\n\n\n\n\n\n\n\nOriginally found at: https://www-cs-faculty.stanford.edu/~knuth/sgb.html\n\n\n\nOrigin paper: \n\n\n\n(Knuth 2009)\n\n\nThe Stanford GraphBase: A Platform for Combinatorial Computing\n\n\n\n\nUsage examples: \n\n\n\n(Kruiger et al. 2017)\n\n\nGraph Layouts by t-SNE\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\nplanar\n\n\nspatial\n\n\n\n\n\n(Raj and Whitaker 2018)\n\n\nAnisotropic Radial Layout for Visualizing Centrality and Structure in Graphs\n\n\n\nclusters (generated)\n\n\nweighted edges\n\n\n\n\n\n(Gronemann et al. 2016)\n\n\nCrossing Minimization in Storyline Visualization\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n(Jünger and Mutzel 1996)\n\n\n2-Layer Straightline Crossing Minimization\n\n\n\nbipartite\n\n\nlayered graphs\n\n\n\n\n\n(Barth, Jünger, and Mutzel 2002)\n\n\nSimple and Efficient Bilayer Cross Counting\n\n\n\nbipartite\n\n\nlayered graphs\n\n\n\n\n\n\n\n\nA Random Sampling O\n\n\n\n\n\n\n\nDescriptions from Literature\nFrom “Crossing Minimization in Storyline Visualizations”:\n\nSince the instances “Anna Karenina” and “Les Miserables” are very big, we have split them into chapters and sequences of chapters. The resulting test-bed is made of eight chapters, seven pairs of chapters, six triples of chapters and five quadruples of chapters from “Anna Karenina”, and five chapters, four pairs of chapters and three triples of chapters from “Les Mis ́erables”, plus the entire “Adventures of Huckleberry Finn”, “Inception-sf”, “Inception”, “Star Wars”, “The Matrix-sf”, and “The Matrix”.\n\nFrom “Anisotropic Radial Layout for Visualizing Centrality and Structure in Graphs”:\n\nThe third dataset is a graph of character associations in the famous French novel Les Miserables (Fig. 5) [18]. This graph consists of 77 nodes, each representing a character in the novel, and 254 weighted edges where the weights represent the number of chapters that feature both characters associated with an edge. We see the that the main protagonist Valjean (marked in red) is placed prominently in all three visualizations (Fig. 5). However, other key characters in the plot such as Inspector Javert (blue) and Cosett (orange), who do not appear often with characters other than the protagonist (and thus have low betweenness centrality) are treated differently. While the radial layout relegates them to the periphery (far from Valjean) (Fig. 5b), MDS (Fig. 5a) paints a conflicting picture with regard to their centrality, e.g., Cosett’s node almost overlaps with Valjean despite its low centrality. In contrast, the proposed ARL (Fig.5c) is able to coherently convey the low centrality of the Inspector Javert and Cosett, as well as, their closeness to Valjean. The above issue of distance distortion appears to be a frequent occurrence in the radial layout due to many characters who have a low centrality value causing them to end up being packed in the outer periphery. A case of contrast is that of the character Bishop Myriel (green) who despite being associated with several characters, is only seen with Valjean once.\n\n\n\nExample Figures\nFrom “Crossing Minimization in Storyline Visualizations”:\n\n\n\nFrom “Graph Layouts by t-SNE”:\n\n\n\nlesmis is the GraphBase Les Miserables graph\nFrom “Anisotropic Radial Layout for Visualizing Centrality and Structure in Graphs”:\n\n\n\n\n\n\n\n\nThe SuiteSparse Matrix Collection, formerly known as the University of Florida Sparse Matrix Collection, is a comprehensive repository of 2893 sparse matrices. All graphs in SuiteSparse belong to groups which will have more information about the graphs and the sub-collections they belong to. In our Descriptions from the Literature section we also highlight a few tables with the specific graphs used in a couple of papers. From “The university of Florida Sparse Matrix Collection”, Davis and Hu describe the origin of this network repository. Namely they cite the Harwell-Boeing collection as the starting point for SuiteSparse, then called the University of Florida (UF) Sparse matrix collection, back in 1991. Other groups, or collections, have then been added to SuitseSparse through the years, mainly focusing on real-world matrices and other relevant problems related to them.\n\n\n\n\n\n\nSuiteSparse Matrix Collection\n\n\n\n\n\n\n\nOriginally found at: https://sparse.tamu.edu/\n\n\n\nSize: 2893\n\n\n\nOrigin paper: \n\n\n\n(Davis and Hu 2011)\n\n\nThe University of Florida Sparse Matrix Collection\n\n\n\n\nUsage examples: \n\n\n\n(E. R. Gansner, Hu, and North 2013)\n\n\nA Maxent-Stress Model for Graph Layout\n\n\n\ngeneric\n\n\n\n\n\n(Ortmann, Klimenta, and Brandes 2017)\n\n\nA Sparse Stress Model\n\n\n\nlarge\n\n\nweighted edges\n\n\n\n\n\n(Eades, Nguyen, and Hong 2018)\n\n\nDrawing Big Graphs Using Spectral Sparsification\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n(Hong et al. 2019)\n\n\nMulti-level Graph Drawing Using Infomap Clustering\n\n\n\nmultilevel\n\n\n\n\n\n(Börsig, Brandes, and Pasztor 2020)\n\n\nStochastic Gradient Descent Works Really Well for Stress Minimization\n\n\n\ngeneric\n\n\n\n\n\n(Kruiger et al. 2017)\n\n\nGraph Layouts by t-SNE\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\nplanar\n\n\nspatial\n\n\n\n\n\n(Zheng, Pawar, and Goodman 2019)\n\n\nGraph Drawing by Stochastic Gradient Descent\n\n\n\ngeneric\n\n\n\n\n\n(Zhu et al. 2021)\n\n\nDRGraph: An Efficient Graph Layout Algorithm for Large-scale Graphs by Dimensionality Reduction\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n(Zhong et al. 2023)\n\n\nForce-Directed Graph Layouts Revisited: A New Force Based on the T-Distribution\n\n\n\ngeneric\n\n\n\n\n\n(Miller, Huroyan, and Kobourov 2023)\n\n\nSpherical Graph Drawing by Multi-dimensional Scaling\n\n\n\ngeneric\n\n\n\n\n\n(Meidiana, Hong, and Eades 2023)\n\n\nShape-Faithful Graph Drawings\n\n\n\nalmost proximity drawable graphs\n\n\nmesh graphs\n\n\nscale-free graphs\n\n\nstrong proximity drawable graphs\n\n\nweak proximity drawable graphs\n\n\n\n\n\nDescriptions From Literature\nFrom “A Sparse Stress Model”:\n\nWe conducted our experiments on a series of different graphs, see Tab. 1, most of them taken from the sparse matrix collection [9]. We selected these graphs as they differ in their structure and size, and are large enough to compare the results of different techniques. Two of the graphs, LeHavre and commanche, have predefined edge lengths that were derived from the node coordinates. We did not modify the graphs in any way, except for those that were disconnected, in which case we only kept the largest component.\n\n\n\n\nFrom “A Maxent-Stress Model for Graph Layout”:\n\nWith the exception of graph gd, which is an author collaboration graph of the International Symposium on Graph Drawing between 1994 and 2007, the graphs used are from the University of Florida Sparse Matrix Collection [9]. Our selection covers a range of graph sizes, and includes mesh-like and other nonmesh graphs, and graphs from Brandes and Pich’s experimental study of distance scaling [5].\n\n\n\n\nTable 2. Test Graphs\nFrom “DRGraph: An Efficient Graph Layout Algorithm for Large-scale Graphs by Dimensionality Reduction”:\n\nWe perform experiments on a broad range of datasets selected from the University of Florida Sparse Matrix Collection [10] and tsNET [34] (Table 1).\n\n\n\n\nTable 1. Test Datasets\n\n\nExample Figures\nFrom “The university of Florida sparse matrix collection”:\n\n\n\nFig. 13. A sample of matrices from the Collection, for the purpose of illustrating the complexity and diversity of matrices arising in real applications\nFrom “DRGraph: An Efficient Graph Layout Algorithm for Large-scale Graphs by Dimensionality Reduction”:\n\n\n\nFig. 8. Visualizations of selected graph datasets using FR, KK, S.M., FM3, SFDP, PMDS, tsNET and DRGraph.\n\n\n\n\n\n\nSingle Graphs\nA number of papers used individual, Single Graphs for their experiments instead of a collection. These graphs have become popular because of their properties as individual graphs - see, for example, the Enron dataset below, a huge individual graph that has a large variance in node degree distribution. Many of these graphs are also available in other repositories - their locations are noted wherever known.\n\n\n\n\n\n\n\nEnron\n\n\n\n\n\n\nData made public by the Federal Energy Regulatory Commission when investigating Enron. It has had a few changes over time documented in the link provided as its source. The data is currently hosted by William W. Cohen from CMU on a webiste, and it is also hosted on SNAP. SNAP asks to cite the paper linked in Origin paper. Very high variance in node degrees. Data can be considered threaded and directed, although SNAP provides a version of the network that is explicitly undirected. This dataset proves useful for evaluating algorithms that work on very large graphs, due to its very large size.\n\nOriginally found at: https://www.cs.cmu.edu/~enron/\n\n\n\nSize: The data consists of 150 Enron executives, who sent 500,000 messages between themselves.\n\n\n\nOrigin paper: \n\n\n\n(Klimt and Yang 2004)\n\n\nIntroducing the Enron Corpus\n\n\n\n\nUsage examples: \n\n\n\n(Tanahashi, Hsueh, and Ma 2015)\n\n\nAn Efficient Framework for Generating Storyline Visualizations from Streaming Data\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n(Elzen et al. 2013)\n\n\nReordering massive sequence views: Enabling temporal and structural analysis of dynamic networks\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\nDescriptions from Literature\nFrom “Reordering massive sequence views: Enabling temporal and structural analysis of dynamic networks”:\n\nWe cleaned the data set by removing duplicates, spam and only to contain internal communication between Enron employees annotated with employee function leaving us with 151 nodes (employees) and 21374 edges (emails). Visualization using a node-link diagram enables the identification of stronger connections (see Figure 9(a)). However, temporal patterns and the evolution of the network cannot be analysed. From the standard MSV (Figure 9(b)) it becomes somewhat clear that transaction density increases over time and we can distinguish between different phases. We cannot, however, see features and identify communities due to visual clutter\n\n\n\nExample Figures\nFrom “An Efficient Framework for Generating Storyline Visualizations from Streaming Data”:\n\n\n\nFrom “Reordering massive sequence views: Enabling temporal and structural analysis of dynamic networks”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCalifornia\n\n\n\n\n\n\nData contains links related to an online search of the word “California” as nodes - the edges are links between webpages. We found this dataset on the webpage of a 2002 computer science course at Cornell, instructed by Jon Kleinberg. The original name was Pages that match the word “California”. They mention how the data was queried from a search engine, and that many of the original links are broken. It is not clear whether Kleinberg collected the data, or compiled it for the course.\n\nOriginally found at: https://www.cs.cornell.edu/courses/cs685/2002fa/data/gr0.California\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 4772 nodes, 8965 edges\n\n\n\nOrigin paper: \n\n\n\n(Kleinberg 2002)\n\n\nThe Structure of Information Networks\n\n\n\n\nUsage examples: \n\n\n\n(Muelder and Ma 2008b)\n\n\nA Treemap Based Method for Rapid Layout of Large Graphs\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n(Muelder and Ma 2008a)\n\n\nRapid Graph Layout Using Space Filling Curves\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\nStatistics\n\n\n\n\n\nDescriptions from Literature\nFrom “A Treemap Based Method for Rapid Layout of Large Graphs”:\n\nThis particular graph is a non-weighted graph of links between search results for the word “California” (also in Figures 6, 8, and 9, |V|=6107,|E|=15160).\n\nFrom “Rapid Graph Layout Using Space Filling Curves”:\n\nThe “california” dataset (shown in Figures 5 and 8) consists of the links between the webpages found from a search for the word ‘California’ [4].\n\n\n\nExample Figures\nFrom “A Treemap Based Method for Rapid Layout of Large Graphs”:\n\n\n\nFig. 1. A graph laid out using our treemap based approach. This graph portrays the links between websites that came from a search on the word “California” [7]. Nodes are clustered into a hierarchy, and laid out by applying a treemap to this hierarchy. Levels of the hierarchy below a threshold are clustered together into larger nodes. It can very easily be seen that there are three primary groups of websites that link to each other, and a plethora of others that are not as tightly linked.\nFrom “Rapid Graph Layout Using Space Filling Curves”:\n\n\n\nFig. 5 Separating clusters. By adjusting the spacing between nodes according to the clustering information, clusters can be separated.\n\n\n\n\n\n\n\n\n\n\n\nWorld Greenhouse Gas Emissions\n\n\n\n\n\n\nData collected by the WRI. Linked data is from a different year than the data used by Optimal Sankey Diagrams Via Integer Programming, for which data could not be found. Contains weighted edges, weighted nodes, categorical nodes, and layers.\n\nOriginally found at: https://www.wri.org/data/world-greenhouse-gas-emissions-2005 https://www.wri.org/search?keys=world%20greenhouse%20gas%20emissions&f%5B0%5D=content_type%3Adata https://github.com/lhc70000/sankey/tree/master\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 40 nodes, 85 edges\n\n\n\nOrigin paper: \n\n\n\n(Baumert, Herzog, and Pershing 2005)\n\n\nNavigating the Numbers: Greenhouse Gas Data and International Climate Policy\n\n\n\n\nUsage examples: \n\n\n\n(Zarate et al. 2018)\n\n\nOptimal Sankey Diagrams via Integer Programming\n\n\n\nclusters (pre-existing)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\nStatistics\n\n\n\n\n\nDescriptions from Literature\n\nWe have tested our method on the “World Greenhouse Gas Emissions” data from the World Resources Institute [8]. After transforming the “long” edges of the graph into “short” edges and adding the corresponding dummy nodes, as described in Section 3, this example has 4 layers, 55 nodes and 100 edges. The node ordering in the layout of the Sankey diagram shown in Figure 1 has been computed using Sugiyama’s heuristic method [13].\n\n\n\nExample Figures\nFrom Optimal Sankey Diagrams via Integer Linear Programming:\n\n\n\n\n\n\n\n\n\n127.0.0.1:5501:150:21\n\n\n\n\n\n\n\n\n\n\nChess Games\n\n\n\n\n\n\n20,058 chess openings from games in a database of played online chess games. The authors of “Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes” collected the dataset online from the data science platform kaggle. The dataset was collected by user Mitchell J. and collects data from the chess website Lichess.org. The data used in the literature focuses on the 200 most common openings. These are all sequences of 6 moves and are topologically equivalent. It is a layered graph with categorical nodes and layers, and can be seen as a temporal event sequence.\n\nOriginally found at: https://www.kaggle.com/datasets/datasnaek/chess?resource=download https://github.com/VisDunneRight/sequence_braiding/blob/master/data/chess.json\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: The data consists of 20058 sequences, which result in a disconnected graph of 118164 nodes, and 98106 edges.\n\n\n\nOrigin paper: \n\n\n\n(Jolly 2017)\n\n\nChess Game Dataset (Lichess)\n\n\n\n\nUsage examples: \n\n\n\n(Bartolomeo et al. 2021)\n\n\nSequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\nDescriptions from Literature\nFrom “Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes”:\n\n200 Chess openings displayed with Sequence Braiding. Each line represents a sequence of moves of the white player, each group is a chess piece type. Most openings start with a pawn, and very little with the knight.\n\n\n\nExample Figures\nFrom “Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes”:\n\n\n\nFig. 7. 200 Chess openings displayed with Sequence Braiding. Each line represents a sequence of moves of the white player, each group is a chess piece type. Most openings start with a pawn, and very little with the knight. After moving a pawn, it is common to move a knight or a pawn, it is a little less common to move a bishop, and only a little number of openings move the queen on the second move.\n\n\n\n\n\n\n\n\n\n\n\nTree of Life\n\n\n\n\n\n\nPart of the http://tolweb.org/tree/to characterize information about biodiversity and their evolutionary genealogy. It is a tree tree with categorical nodes.\n\nOriginally found at: https://www.kaggle.com/datasets/konivat/tree-of-life?resource=download\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 35,960 nodes, 35,959 edges\n\n\n\nOrigin paper: \n\n\n\n(Letunic and Bork 2021)\n\n\nInteractive Tree Of Life (iTOL) v5: an online tool for phylogenetic tree display and annotation\n\n\n\n\n(Maddison, Schulz, and Maddison 2007)\n\n\nThe Tree of Life Web Project\n\n\n\n\nUsage examples: \n\n\n\n(Gray et al. 2023)\n\n\nVisualizing Evolving Trees\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\n\n\n\nDescriptions from Literature\nFrom “Visualizing Evolving Trees”:\n\nThe Tree of Life: captures the evolutionary progression of life on Earth [37]. The underlying data is a tree structure with a natural time component. As a new species evolves, a new node in the tree is added. The edges give the parent-child relation of the nodes, where the parent is the original species, and the child is the new species. We use a subset of this graph with 500 nodes. The maximum node degree of this tree is 5, and the radius is 24\n\n\n\nExample Figures\nFrom “Visualizing Evolving Trees”:\n\n\n\nFig. 4. Layouts obtained by the seven methods for the tree of life dataset.\n\n\n\n\n\n\n\n\n\n\n\n\nWorld Bank Trade Data\n\n\n\n\n\n\nBilateral trade value in 1999 (total imports+exports), from wits.worldbank.org. It is dense and has categorical nodes.\n\nOriginally found at: https://wits.worldbank.org/module/ALL/sub-module/ALL/reporter/ALL/year/ALL/tradeflow/ALL/pagesize/50/page/1\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n \n\nSize: 194 nodes, 10080 edges\n\n\n\nOrigin paper: \n\n\n\n(Subramanian and Wei 2007)\n\n\nThe WTO promotes trade strongly but unevenly\n\n\n\n\nUsage examples: \n\n\n\n(Noack 2004)\n\n\nEnergy Models for Graph Clustering\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\n\n\n\n(Nocaj, Ortmann, and Brandes 2015)\n\n\nUntangling the Hairballs of Multi-Centered Small-World Online Social Media Networks\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\nStatistics\n\n\n\n\n\nDescriptions from Literature\nFrom “Energy Models for Graph Clustering”:\n\nThe difference between conventional energy models, node-repulsion LinLog, and edge-repulsion LinLog can be illustrated with a model of the trade between ten North American and European countries. The nodes of the graph correspond to the countries, and the edge weights specify the trade volume between each pair of countries. Because of geographical closeness and free trade agreements, countries on the same continent trade more intensively than countries on different continents. Figure 1 shows the minimum energy layouts of the trade graph for the three force and energy models. The layout of the widely used Fruchterman-Reingold model [20] does not show any clear groups at all. The layout of the node-repulsion LinLog energy model groups the countries (nodes) primarily according to their total trade volume (degree). Only the layout of the edge-repulsion LinLog energy model shows the expected grouping according to continents.\n\n\n\nExample Figures\nFrom “Untangling the Hairballs of Multi-Centered Small-World Online Social Media Networks”:\n\n\n\nFrom “Energy Models for Graph Clustering”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInvestment Interdependence\n\n\n\n\n\n\nData collected in a survey of Ohio State University students by D. W. Malone. Students were presented with two potential obstacles to investment in Columbus, Ohio’s business district and asked, “does obstacle A aggravate or intensify obstacle B?”. Contains directed edges and is hierarchical.\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 25 nodes, 30 edges\n\n\n\nOrigin paper: \n\n\n\n(Malone 1975)\n\n\nAn introduction to the application of interpretive structural modeling\n\n\n\n\nUsage examples: \n\n\n\n(Sugiyama, Tagawa, and Toda 1981)\n\n\nMethods for Visual Understanding of Hierarchical System Structures\n\n\n\nhierarchical\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\nStatistics\n\n\n\n\n\nDescription from Literature\nFrom Methods for Visual Understanding of Hierarchical System Structures:\n\nPresented in Fig. 5 are drawings of the nine-level hierarchy which appeared in Malone [11] and represent the interdependence of obstacles to investment in the Columbus, Ohio, central business district.\n\n\n\nExample Figures\nFrom Methods for Visual Understanding of Hierarchical System Structures:\n\n\n\nFig. 5. (cropped): Maps of the nine-level hierarchy [11]. (a) Initial. (b) BC + QP methods (c = 1.0). (c) BC + QP methods (cL= 0.5). (d) BC + QP methods (c = 0.05). (e) BC + PR methods.\n\n\n\n\n\n\n\n\n\n\n\nProtein Interactions\n\n\n\n\n\n\nProtein Interaction Publications were collected from the Biological Pathway Commons Database. Various types of protein interaction graphs are recorded in other network collections. We highlight two of them from the surveyed papers. First, we have the temporal Protein Interaction Publications, showing the history of how protein interactions were described in the literature. Second, the Protein Homology graph was provided by the Large Graph Layout project, their links are now broken and the dataset lost. Nonetheless, SNAP and Konect both also have various dataset of human/other species protein interactions.\n\nOriginally found at: https://github.com/CreativeCodingLab/TimeArcs/tree/master/IndexCards https://lgl.sourceforge.net/ (download link broken)\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 2961 nodes, 5267 edges\n\n\n\nOrigin paper: \n\n\n\n(Adai et al. 2004)\n\n\nLGL: Creating a Map of Protein Function with an Algorithm for Visualizing Very Large Biological Networks\n\n\n\nUsage examples: \n\n\n\n(Muelder and Ma 2008a)\n\n\nRapid Graph Layout Using Space Filling Curves\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n(Dang, Pendar, and Forbes 2016)\n\n\nTimeArcs: Visualizing Fluctuations in Dynamic Networks\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n3.2 Protein Interaction Publications\n\nStatistics\n\n\n\n\n\nDescription from the Literature\nFrom TimeArcs: Visualizing Fluctuations in Dynamic Networks:\n\nThe data contains the publication information (such as publication year, author, and textual evidence) of interactions between pairs of proteins, as well as their specific interaction type.\n\n\nWhen there are multiple arcs connecting two proteins, it falls into one of the two circumstances. If they have the same color, these arcs indicate that there are supporting evidences in different publications which confirm the interaction between two elements. On the other hand, if they have the different colors, the more recent appearance provides either more detailed knowledge about the interaction or shows a conflict between different articles regarding the way in which these proteins interact.\n\n\n\nExample Figures\nFrom TimeArcs: Visualizing Fluctuations in Dynamic Networks:\n\n\n\nFig. 10: TimeArcs visualization for interactions around PCAF protein. (1), (2), and (3) in the figure are supporting evidences in literature of “PCAF binds MAML”.\n\n\n\n3.3 Protein Homology (Lost)\n\nDescription from the Literature\nFrom [Rapid Graph Layout Using Space Filling Curves:](https://ieeexplore.ieee.org/document/4658143)\n\nThe “pgraph” dataset (shown in Figures 2 and 6) is a protein homology graph, which is relatively dense [7].\n\nConsists of 28, 854 vertices and 1,180, 816 edges, found in Table 1 of paper above.\n\n\nExample Figures\nFrom Rapid Graph Layout Using Space Filling Curves:\n\n\n\nFig. 2. A protein homology graph laid out with our space filling curve based approach. Color corresponds to depth in the clustering hierarchy. |V| = 28, 854,|E| = 1, 180, 816\nFrom LGL: Creating a Map of Protein Function with an Algorithm for Visualizing Very Large Biological Networks\n\n\n\nFig. 3. The complete protein homology map. A layout of the entire protein homology map; a total of 11,516 connected sets containing 111,604 proteins (vertices) with 1,912,684 edges. The largest connected set is shown more clearly in the inset and is enlarged further in Figure 4.\n\n\n\n\n\n\n\n\nAggregate Collections\nMany papers used graphs from specific domains that contain particular characteristics (e.g., geographical coordinates are often found in airline data). Instead of collecting each one of these individual, contextual datasets, we aggregated them in further subcategories, and called them Aggregate collections. Individual information about about each aggregate collection can be found in the papers that contain them.\n\n\n\n\n\n\nAssorted Collaboration Network\n\n\n\n\n\n\nmake_sparkline(\"Assorted_CollaborationNetwork\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAirlines, Migrations, and Air Traffic\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode Dependency Graphs\n\n\n\n\n\n//| echo: false\n\nmake_sparkline(\"Code_DependencyGraphs\")\n\n\n\n\n\n\n\n\n\n\n\n\nBlogposts, Tweets, and Forums\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSocial Networks\n\n\n\n\n\n//| echo: false\n\nmake_sparkline(\"Social_Networks\")\n\n\n\n\n\n\n\n\n\n\n\n\nTransportation Networks\n\n\n\n\n\n\nmake_sparkline(\"Transportation_Networks\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSubsets of other collections\nFinally, we collected some datasets that we noticed being subsets of existing collections. This is a phenomenon that can happen through the years, through the redistribution and through the merging of different sources: the Walshaw dataset, for instance, was and still is distributed and cited as its own standalone dataset, but its graphs can be found as part of many other larger collections, such as SNAP. We classified these datasets as Subsets.\n\n\n\n\n\n\n\nWalshaw\n\n\n\n\n\nC. Walshaw, collected for an archive of graph partitions which has been maintained since 2000. These are multilevel mesh partitions of heterogeneous networks from a variety of domains.\nWe do not provide the the data ourselves. Walshaw requests to be emailed for the distribution of the data, and so we link to their site and to the graphs found in the SuiteSparse Matrix Collection.\n\n\nOriginally found at: https://chriswalshaw.co.uk/partition/ where C. Walshaw requests to be emailed for the dataset at mailto:c.walshaw@gre.ac.uk. the individual graphs can also be found on the SuiteSparse Matrix Collection under different groups.\n\n\n\nSize: 34 graphs, 2395-448695 nodes, 6837-3314611 edges. Node-weighted, edge-weighted. Partitions of the 34 graphs are given with various partition sizes and imbalance percentages.\n\n\n\nOrigin paper: \n\n\n\n(Soper, Walshaw, and Cross 2004)\n\n\nA Combined Evolutionary Search and Multilevel Optimisation Approach to Graph Partitioning\n\n\n\n\n(Walshaw and Cross 2000)\n\n\nMesh Partitioning: a Multilevel Balancing and Refinement Algorithm\n\n\n\n\nUsage examples: \n\n\n\n(Walshaw 2001)\n\n\nA Multilevel Algorithm for Force-Directed Graph Drawing\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\n\n\n\n(Yaniv Frishman and Tal 2007)\n\n\nMulti-Level Graph Layout on the GPU\n\n\n\ngeneric\n\n\n\n\n\n(Yehuda Koren, Carmel, and Harel 2002)\n\n\nACE: A Fast Multiscale Eigenvectors Computation for Drawing Huge Graphs\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n(Y. Koren 2005)\n\n\nDrawing graphs by eigenvectors: theory and practice\n\n\n\ngeneric\n\n\n\n\n\n(Civril, Magdon-Ismail, and Bocek-Rivele 2006)\n\n\nSDE: Graph Drawing Using Spectral Distance Embedding\n\n\n\ngeneric\n\n\n\n\n\n\n\n\nEfficient and High Quality Force-Directed Graph Drawing\n\n\n\ngeneric\n\n\n\n\n\n\n\n\nLarge-Graph Layout with the Fast Multipole Multilevel Method\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n(Hachul and Jünger 2005)\n\n\nDrawing Large Graphs with a Potential-Field-Based Multilevel Algorithm\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n(Eades, Nguyen, and Hong 2018)\n\n\nDrawing Big Graphs Using Spectral Sparsification\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n(Hachul and Juenger 2006)\n\n\nAn Experimental Comparison of Fast Algorithms for Drawing General Large Graphs\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n(Brandes and Pich 2006)\n\n\nEigensolver methods for progressive multidimensional scaling of large data\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n(E. R. Gansner, Koren, and North 2005)\n\n\nTopological fisheye views for visualizing large graphs\n\n\n\ngeneric\n\n\nhigh degree\n\n\nlarge\n\n\n\n\n\n(Y. Frishman and Tal 2008)\n\n\nOnline Dynamic Graph Drawing\n\n\n\ndynamic\n\n\n\n\n\n(Hong et al. 2019)\n\n\nMulti-level Graph Drawing Using Infomap Clustering\n\n\n\nmultilevel\n\n\n\n\n\n\n\n\nA Random Sampling O\n\n\n\n\n\n\n\n(Meidiana et al. 2020)\n\n\nSublinear Time Force Computation for Big Complex Network Visualization\n\n\n\nlarge\n\n\n\n\n\nDescriptions from Literature\nFrom “An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs”:\n\nThe rest of the test graphs are taken from real-world applications. In particular, we selected graphs from the AT&T graph library [1], from C. Walshaw’s graph collection [20], and a graph that describes a social network of 2113 people that we obtained from C. Lipp.\n\nFrom “A Combined Evolutionary Search and Multilevel Optimisation Approach to Graph-Partitioning”:\n\nThe test graphs have been chosen to be a representative sample of small to medium scale real-life problems (mostly mesh-based) and include both 2D and 3D examples of nodal graphs (where the mesh nodes are partitioned) and dual graphs (where the mesh elements are partitioned). In addition there is a 3D semi-structured graph, cti, which is unstructured in the x−y plane but extended regularly along the z-axis. Finally the test suite includes three non mesh-based graphs (add32, vibrobox, bcsstk32) which arise from various scientific computing applications2. None of the graphs have either vertex or edge weights; such graphs are not widely available since most applications do not accurately instrument costs and it is difficult to draw meaningful conclusions from the few examples that we have access to.\n\n\n\n\n\n\nExample Figures\nFrom “An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs”:\n\n\n\nFrom “Multi-Level Graph Layout on the GPU”:\n\n\n\nFig. 11. 4elt. Red: our layout, black: Kamada-Kawai layout\n\n\nOther\nFrom Group DIMACS10 in the SuiteSparse Matrix Collection:\nChris Walshaw's graph partitioning archive contains 34 graphs that\n    have been very popular as benchmarks for graph partitioning algorithms\n    ( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).\n\n    17 of them are already in the UF Collection.  Only the 17 new graphs\n    not yet in the collection are added here in the DIMACS10 set.\n\nDIMACS10 graph:                 new?   UF matrix:\n    ---------------                 ----   -------------\n    walshaw/144                      *     DIMACS10/144\n    walshaw/3elt                           AG-Monien/3elt\n    walshaw/4elt                           Pothen/barth5\n    walshaw/598a                     *     DIMACS10/598a\n    walshaw/add20                          Hamm/add20\n    walshaw/add32                          Hamm/add32\n    walshaw/auto                     *     DIMACS10/auto\n    walshaw/bcsstk29                       HB/bcsstk29\n    walshaw/bcsstk30                       HB/bcsstk30\n    walshaw/bcsstk31                       HB/bcsstk31\n    walshaw/bcsstk32                       HB/bcsstk32\n    walshaw/bcsstk33                       HB/bcsstk33\n    walshaw/brack2                         AG-Monien/brack2\n    walshaw/crack                          AG-Monient/crack\n    walshaw/cs4                      *     DIMACS10/cs4\n    walshaw/cti                      *     DIMACS10/cti\n    walshaw/data                     *     DIMACS10/data\n    walshaw/fe_4elt2                 *     DIMACS10/fe_4elt2\n    walshaw/fe_body                  *     DIMACS10/fe_body\n    walshaw/fe_ocean                 *     DIMACS10/fe_ocean\n    walshaw/fe_pwt                         Pothen/pwt\n    walshaw/fe_rotor                 *     DIMACS10/fe_rotor\n    walshaw/fe_sphere                *     DIMACS10/fe_sphere\n    walshaw/fe_tooth                 *     DIMACS10/fe_tooth\n    walshaw/finan512                       Mulvey/finan512\n    walshaw/m14b                     *     DIMACS10/m14b\n    walshaw/memplus                        Hamm/memplus\n    walshaw/t60k                     *     DIMACS10/t60k\n    walshaw/uk                       *     DIMACS10/uk\n    walshaw/vibrobox                       Cote/vibrobox\n    walshaw/wave                           AG-Monien/wave\n    walshaw/whitaker3                      AG-Monien/whitaker3\n    walshaw/wing                     *     DIMACS10/wing\n    walshaw/wing_nodal               *     DIMACS10/wing_nodal\n\n\n\n\n\n\n\n\n\n\n\nPert DAG\n\n\n\n\n\n//| echo: false\n\nmake_sparkline(\"Pert_DAG\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmazon\n\n\n\n\n\n\nmake_sparkline(\"Amazon\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAutonomous System Network\n\n\n\n\n\n\nmake_sparkline(\"Autonomous_SystemNetwork\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nControl Flow Graphs\n\n\n\n\n\n\nmake_sparkline(\"Control_FlowGraphs\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLost and unavailable datasets\nUnfortunately, some of the datasets that were used in the papers in our corpus are lost, or not available anymore. While we did go through the effort, for each one of them, to recover them and store them on OSF, we could not find anywhere the following list of datasets:\n\n\n\n\n\n\nGION\n\n\n\n\n\n\nmake_sparkline(\"GION\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFM3\n\n\n\n\n\n\nmake_sparkline(\"FM3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPadia Stories\n\n\n\n\n\n\nmake_sparkline(\"Padia_Stories\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Mapping Project\n\n\n\n\n\n\nmake_sparkline(\"Internet_MappingProject\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMathematics Genealogy\n\n\n\n\n\n\nmake_sparkline(\"Mathematics_Genealogy\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMedical Patient Records\n\n\n\n\n\n\nmake_sparkline(\"Medical_PatientRecords\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssorted Fiscal Network\n\n\n\n\n\n\nmake_sparkline(\"Assorted_FiscalNetwork\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDebates\n\n\n\n\n\n\nmake_sparkline(\"Debates\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCar Features\n\n\n\n\n\n\nmake_sparkline(\"Car_Features\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBusiness Processes\n\n\n\n\n\n\nmake_sparkline(\"Business_Processes\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom-made datasets\nIn the data we collected, we also found several instances of custom-made datasets. We consider custom-made datasets either edits to pre-existing datasets, where the authors found it necessary to either split or modify the dataset in a particular way, or datasets completely made up from scratch using random generators or custom-made code. This can happen in cases where the authors of a paper needed a dataset containing particular characteristics which was not easy to find in the wild, so a new dataset was crafted.\nFor instance, consider the case where the authors of a paper develop an algorithm that works on hypergraphs. They want to test that the algorithm works, and test its performance on hypergraphs of various sizes, but datasets containing hypergraphs are difficult to find. For this reason, the authors craft one dataset synthetically, or take a pre-existing dataset and edit it so that it now contains hyperedges.\nWe split custom-made datasets in three categories, with their occurrences in the corpus of papers illustrated below:\n\n{ \n  let d = []\n  \n  let allbenchmarkdatasets = [...new Set(literature.map(l =&gt; l[\"Dataset tag clean\"].split(\",\").map(d =&gt; d.trim())).flat())].filter(a =&gt; a != \"\")\n\n  for (let dataset of allbenchmarkdatasets){\n    if (!dataset.includes(\"Custom\")) continue;\n    let literature_entries_with_this_dataset = literature.filter(l =&gt; l[\"Dataset tag clean\"].includes(dataset))\n\n    d.push({\"dataset\": dataset, \"count\": literature_entries_with_this_dataset.length})\n  }\n  \n  return Plot.plot({\n    color: {\n      // legend: true,\n      type: \"categorical\",\n      // domain: d3.range(10).map((d, i) =&gt; `Category ${i + 1}`),\n      scheme: \"Tableau10\" // use the \"accent\" scheme\n    },\n    y: {\n      // tickFormat: \"s\"\n    },\n    marks: [\n      Plot.barX(d, {x: \"count\", y: \"dataset\", fill: \"dataset\",inset: 2, sort: {y: \"x\", reverse: true}}),\n      Plot.axisY({label: null, lineWidth: 12, marginLeft: 150}),\n    ]\n  })\n}\n\n\n\n\n\n\nReplicable datasets indicate cases where the authors have given enough information so that the experiment can be replicated exactly as it was run by the authors of a paper, or closely enough that the results obtained reflect the published ones very closely. This includes cases where either the authors published the entire dataset they used, they published the code they used to generate the dataset, or include an exact description of the steps they took to generate it.\nReproducible datasets are cases where the authors described the steps they took to generate and/or edit their datasets, but not in-depth enough so that the exact same graphs can be reproduced, and did not redistribute it. Results can still be reproduces somewhat closely if the authors took care to report enough information about their graphs.\nFor non-replicable datasets, we indicate cases where the authors did not distribute their datasets and did not include enough information in the paper so that their results could be replicated.\nThis information is closely tied to the distribution of supplemental material in papers, that is shown in the chart below:\n\n{ \n  let d = []\n  \n  let allbenchmarkdatasets = [...new Set(literature.map(l =&gt; l[\"Supplemental material (Multi-select)\"].split(\",\").map(d =&gt; d.trim())).flat())].filter(a =&gt; a != \"\")\n\n  for (let dataset of allbenchmarkdatasets){\n    let literature_entries_with_this_dataset = literature.filter(l =&gt; l[\"Supplemental material (Multi-select)\"].includes(dataset))\n\n    d.push({\"dataset\": dataset, \"count\": literature_entries_with_this_dataset.length})\n  }\n  \n  return Plot.plot({\n    color: {\n      // legend: true,\n      type: \"categorical\",\n      // domain: d3.range(10).map((d, i) =&gt; `Category ${i + 1}`),\n      scheme: \"Tableau10\" // use the \"accent\" scheme\n    },\n    y: {\n      // tickFormat: \"s\"\n    },\n    marks: [\n      Plot.barX(d, {x: \"count\", y: \"dataset\", fill: \"dataset\",inset: 2, sort: {y: \"x\", reverse: true}}),\n      Plot.axisY({label: null, lineWidth: 12, marginLeft: 150}),\n    ]\n  })\n}\n\n\n\n\n\n\nThis discussion is part of a larger discourse on research replicability, that is gaining traction in the scientific community. The ACM, for instance, has a policy on artifact review and badging, where authors are encouraged to submit their artifacts for review, and if they pass, they receive a badge that indicates the artifact is available for review. This is a step towards making research more replicable and reproducible, and we hope that our work will contribute to this effort.\nSee, e.g., ACM’s definitions at https://www.acm.org/publications/policies/artifact-review-and-badging-current.\n\nfunction make_dataset_name_and_title_list(chosen_collection_type, include_num_graphs){ \n  let collection_type = benchmark_datasets.map(a =&gt; a[\"Type of Collection\"]).filter(c =&gt; c == chosen_collection_type);\n  let y_distance = 20;\n  let svgwidth = 700;\n  let numgraphs_offset = 40;\n\n  const svg = d3.create('svg')\n    .attr('width', svgwidth)\n    .attr('height', y_distance * collection_type.length + 60);\n\n  svg.append(\"text\")\n    .attr(\"x\", svgwidth/2)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"font-weight\", \"bold\")\n    .text(\"List of datasets tagged as \" + chosen_collection_type + \" and their sources\")\n\n  svg.append(\"text\")\n      .attr(\"x\", 200)\n      .attr(\"y\", 45)\n      .style(\"text-anchor\", \"end\")\n      .style(\"font-size\", \"small\")\n      .style(\"fill\", \"#aaa\")\n      .text(\"Name\")\n\n  if (include_num_graphs) {\n    svg.append(\"text\")\n        .attr(\"x\", 240)\n        .attr(\"y\", 45)\n        .style(\"text-anchor\", \"middle\")\n        .style(\"font-size\", \"small\")\n        .style(\"fill\", \"#aaa\")\n        .text(\"#Graphs\")\n  }\n\n  svg.append(\"text\")\n      .attr(\"x\", 320 - (include_num_graphs ? 0 : numgraphs_offset))\n      .attr(\"y\", 45)\n      .style(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"small\")\n      .style(\"fill\", \"#aaa\")\n      .text(\"Original link\")\n\n  svg.append(\"text\")\n      .attr(\"x\", 370 - (include_num_graphs ? 0 : numgraphs_offset))\n      .attr(\"y\", 45)\n      .style(\"text-anchor\", \"start\")\n      .style(\"font-size\", \"small\")\n      .style(\"fill\", \"#aaa\")\n      .text(\"Origin paper / website\")\n\n  for (let c of [... new Set(collection_type)]){\n    if (c == \"Skip\" || c == \"Missed It\") continue;\n    // console.log(c)\n    let instances = benchmark_datasets.filter(a =&gt; a[\"Type of Collection\"] == c);\n    if (c.includes(\"No report\")) c = \"Established Network Repository\";\n\n    for (let i in instances){\n      svg.append(\"text\")\n        .attr(\"x\", 200)\n        .attr(\"y\", 65 + i * y_distance)\n        .style(\"text-anchor\", \"end\")\n        .style(\"font-size\", \"small\")\n        .text(instances[i][\"Name\"] + \" \")\n\n      if (include_num_graphs){\n        svg.append(\"text\")\n          .attr(\"x\", 240)\n          .attr(\"y\", 65 + i * y_distance)\n          .style(\"text-anchor\", \"middle\")\n          .style(\"font-size\", \"small\")\n          .text(instances[i][\"Number of Graphs\"] + \" \")\n      }\n      \n      if (instances[i][\"Originally found at\"] != \"\" && instances[i][\"Originally found at\"] != undefined) {\n        const xPosOff = (include_num_graphs ? 0 : numgraphs_offset);\n        const yPos = (y_distance * i + 65);\n        svg.append(\"a\")\n        .attr(\"href\", instances[i][\"Originally found at\"])\n        .attr(\"transform\", \"translate(\"+ (310 - xPosOff) +\", \" + yPos + \")\")\n        .attr(\"target\", \"_blank\")\n        .append(\"text\")\n        .text(\"[link]\")\n        .style(\"fill\", \"#88d\")\n        .style(\"font-size\", \"small\")\n        \n        const paper = (paper_source.find(a =&gt; a.Name == instances[i][\"Origin paper plaintext\"]) || {})\n        let link = \"\"\n        if('bib' in paper){\n          const res = extractDOIUrl(paper.bib)\n          if (res) link = res;\n        }\n        \n        if(link != \"\"){\n          link = extractDOIUrl(paper.bib)\n          svg.append(\"a\")\n          .attr(\"href\", link)\n          .attr(\"transform\", \"translate(\"+ (370 - xPosOff)+\", \" + yPos + \")\")\n          .attr(\"target\", \"_blank\")\n          .append(\"text\")\n          .text(instances[i][\"Origin paper plaintext\"].split(\"(\")[0])\n          // .style(\"fill\", \"rgb(136, 136, 221)\")\n          .style(\"fill\",\"#1565c0\")\n          .style(\"font-size\", \"small\")\n        } else {\n          // What do we do here\n          svg.append(\"text\")\n          .attr(\"transform\", \"translate(\"+ (370 - xPosOff)+\", \" + yPos + \")\")\n          .text(instances[i][\"Origin paper plaintext\"].split(\"(\")[0])\n          .style(\"fill\", \"#616161\")\n          .style(\"font-size\", \"small\")\n        }\n        \n      }\n    }\n  }\n\n  return svg.node();\n}\n\nfunction extractDOIUrl(bibtex) {\n    // Regular expression to find the DOI within the BibTeX entry\n    const doiRegex = /doi\\s*=\\s*{([^}]+)}/i;\n    \n    // Try to match the DOI in the BibTeX entry\n    const match = bibtex.match(doiRegex);\n    \n    // Check if a DOI was found\n    if (match) {\n        // Return the DOI as a full URL\n        return `https://doi.org/${match[1].trim()}`;\n    } else {\n        // Return null or an appropriate message if DOI is not found\n        return null;\n    }\n}"
  },
  {
    "objectID": "index.html#protein-interaction-publications",
    "href": "index.html#protein-interaction-publications",
    "title": "Benchmark Datasets for Graph Layout Algorithms",
    "section": "3.2 Protein Interaction Publications",
    "text": "3.2 Protein Interaction Publications\n\nStatistics\n\n\n\n\n\nDescription from the Literature\nFrom TimeArcs: Visualizing Fluctuations in Dynamic Networks:\n\nThe data contains the publication information (such as publication year, author, and textual evidence) of interactions between pairs of proteins, as well as their specific interaction type.\n\n\nWhen there are multiple arcs connecting two proteins, it falls into one of the two circumstances. If they have the same color, these arcs indicate that there are supporting evidences in different publications which confirm the interaction between two elements. On the other hand, if they have the different colors, the more recent appearance provides either more detailed knowledge about the interaction or shows a conflict between different articles regarding the way in which these proteins interact.\n\n\n\nExample Figures\nFrom TimeArcs: Visualizing Fluctuations in Dynamic Networks:\n\n\n\nFig. 10: TimeArcs visualization for interactions around PCAF protein. (1), (2), and (3) in the figure are supporting evidences in literature of “PCAF binds MAML”."
  },
  {
    "objectID": "index.html#protein-homology-lost",
    "href": "index.html#protein-homology-lost",
    "title": "Benchmark Datasets for Graph Layout Algorithms",
    "section": "3.3 Protein Homology (Lost)",
    "text": "3.3 Protein Homology (Lost)\n\nDescription from the Literature\nFrom [Rapid Graph Layout Using Space Filling Curves:](https://ieeexplore.ieee.org/document/4658143)\n\nThe “pgraph” dataset (shown in Figures 2 and 6) is a protein homology graph, which is relatively dense [7].\n\nConsists of 28, 854 vertices and 1,180, 816 edges, found in Table 1 of paper above.\n\n\nExample Figures\nFrom Rapid Graph Layout Using Space Filling Curves:\n\n\n\nFig. 2. A protein homology graph laid out with our space filling curve based approach. Color corresponds to depth in the clustering hierarchy. |V| = 28, 854,|E| = 1, 180, 816\nFrom LGL: Creating a Map of Protein Function with an Algorithm for Visualizing Very Large Biological Networks\n\n\n\nFig. 3. The complete protein homology map. A layout of the entire protein homology map; a total of 11,516 connected sets containing 111,604 proteins (vertices) with 1,912,684 edges. The largest connected set is shown more clearly in the inset and is enlarged further in Figure 4."
  },
  {
    "objectID": "index.html#details-of-the-datasets",
    "href": "index.html#details-of-the-datasets",
    "title": "Benchmark Datasets for Graph Layout Algorithms",
    "section": "3.4 Details of the datasets",
    "text": "3.4 Details of the datasets\nFor each of the datasets collected as part of our process, we conducted a brief analysis of their contents. Where possible, the analysis includes information about the number of nodes per graph, the source of the dataset, which papers have used the dataset and what graph features they took into account. The following section defaults to illustrating the contents of Rome-Lib, but the reader can easily change the dataset in focus by modifying the value of the dropdown menu below:\n\n\n{\n  let s = \"\"\n  for (let dataset_to_be_visualized of benchmark_datasets.map(d =&gt; d.Name)){\n    s += `::: {.callout-note title=\"` + dataset_to_be_visualized + `\" collapse=true appearance=\"minimal\"}` + \"\\n\\n\"\n    s += \"```{ojs}\\n\"\n    s += `//| echo: false\\n\nmake_sparkline(\"` + name_cleanup(dataset_to_be_visualized) + `\")\\n`\n    s += \"```\\n\\n\"\n    s += `&lt;div id=\"named-list-` + name_cleanup(dataset_to_be_visualized) + `\" data-bs-spy=\"scroll\"  data-bs-target=\"db-nav-list\" data-bs-offset=\"20\" tabindex=\"0\"&gt;&lt;/div&gt;\\n\\n`\n    s += \"::: \\n\\n\\n\"\n  }\n  // console.log(s);\n}\n\n\n\n\n\n\n\n\n\nviewof dataset_to_be_visualized = Inputs.select(benchmark_datasets.map(b =&gt; b.Name), {value: \"Rome-Lib\", label: \"Dataset to visualize\"})\n\n\n\n\n\n\n\nfunction make_sparkline(bname){\n  let b = benchmark_datasets.find(l =&gt; name_cleanup(l.Name) == bname)[\"sparkline data\"].replaceAll(\"'\", '\"')\n  try {\n    b = JSON.parse(b)\n    return Plot.plot({\n    color: {\n      range: [\"steelblue\"]\n    },\n    y: {nice:true},\n    x: {nice:true},\n    height: 400,\n    marks: [\n      Plot.line(b.num_nodes.map((d, i) =&gt; [i*5, d]), {marginTop: 30}),\n      Plot.text(['Distribution of graph sizes by number of nodes in ' + bname], {frameAnchor: \"Top\",dy: -20})\n    ]\n  })\n  } catch { return \"No sparkline information to show\" }\n}\n\n\n\n\n\n\n\n\n\n{\n  for (let benchmark_dataset of benchmark_datasets.map(d =&gt; d.Name)){\n    let bname = name_cleanup(benchmark_dataset)\n\n    let named_list_dom = d3.select(\"#named-list-\" + bname);\n    named_list_dom.selectAll(\"*\").remove()\n    let entry =  benchmark_datasets.find(l =&gt; name_cleanup(l.Name) == bname);\n    const paper_data = literature\n    const origin_paper_data = paper_source\n    add_entry_row(named_list_dom, entry, paper_data, origin_paper_data, notionFolders)\n\n  }\n}\n\n\n\n\n\n\n\nasync function add_entry_row(named_list_dom, entry, paper_data, origin_paper_data, notionFolders){\n\n    if (entry[\"graph features handled\"] != \"\" && entry[\"graph features handled\"] != undefined){\n        let tags = entry[\"graph features handled\"].split(\",\")\n        for (let j = 0; j &lt; tags.length; j++){\n            if (tags[j].charAt(0) == ' '){\n                tags[j] = tags[j].substring(1).toLowerCase()\n            }\n            if (!graph_feature_tags.includes(tags[j])){\n                graph_feature_tags.push(tags[j])\n            }\n        }\n    }\n\n    for (let element of paper_data){\n        let features = (element[\"Graph feature\"]).split(\",\")\n        for (let feature of features){\n            feature = feature.trim().toLowerCase()\n            if (!graph_feature_tags.includes(feature)){\n                graph_feature_tags.push(feature)\n            }\n        }\n    }\n        \n        let infocontainer = named_list_dom.append(\"div\")\n            .attr(\"class\", \"container\")\n            .attr(\"id\", \"inforow_\" + name_cleanup(entry[\"Name\"]))\n            .style(\"padding\", \"2%\")\n\n        let inforow = infocontainer.append(\"div\")\n            .append(\"div\")\n            .attr(\"class\", \"card card-body\")\n            .append(\"div\")\n            .attr(\"class\", \"col small-text\")\n\n        add_simple_field(entry, \"Originally found at\", inforow)\n        inforow.append(\"br\")\n        add_download_field(entry, inforow);\n        inforow.append(\"br\")\n        add_simple_field(entry, \"Note\", inforow)\n        // inforow.append(\"br\")\n        // add_simple_field(entry, \"Number of Files\", inforow)\n        inforow.append(\"br\")\n        add_simple_field(entry, \"Size\", inforow)\n        inforow.append(\"br\")\n        add_simple_field(entry, \"Origin Notes\", inforow)\n        inforow.append(\"br\")\n        inforow.append(\"div\").html(\"&lt;b&gt;Origin paper: &lt;/b&gt;\")\n        for (let e of entry[\"Origin paper plaintext\"].split(\",\")){\n            e = e.trim();\n            if (e == \"\") continue;\n            let origindoi = (paper_data.find(a =&gt; a.Name == e) || {}).DOI\n            let cited_paper = origin_paper_data.find(o =&gt; o.Name == e)\n            let cite_index = origin_paper_data.indexOf(cited_paper)\n            // if (origindoi != undefined && origindoi != \"\"){\n                inforow.append(\"div\").attr(\"class\", \"row\").html('&lt;div class=\"col-4\"&gt;[link]&lt;/div&gt;&lt;div class=\"col-8\"&gt;' + e + '&lt;/div&gt;')\n            // } else inforow.append(\"div\").html(e)\n        }\n\n        inforow.append(\"br\")\n        inforow.append(\"div\").html(\"&lt;b&gt;Usage examples: &lt;/b&gt;\")\n\n        for (let i in entry[\"Related to Literature - Algorithm (Dataset tag relations) 1\"].split(\",\")){\n            let e = entry[\"Related to Literature - Algorithm (Dataset tag relations) 1\"].split(\",\")[i].split(\"(\")[0].trim()\n            let entryrow = inforow.append(\"div\").attr(\"class\", \"row\")\n\n            if (e != \"\") {\n                let doi = (paper_data.find(a =&gt; a.Name == e) || {}).DOI\n                let citation_name = (paper_data.find(a =&gt; a.Name == e) || {})[\"Citation name\"]\n                let link = \"\";\n                // if (doi != undefined && doi != \"\") link = '&lt;a href=\"' + doify(doi) + '\"&gt;[link]&lt;/a&gt;'\n                if (doi != undefined && doi != \"\" && citation_name != undefined) {\n                  // link += '&lt;span class=\"citation\" data-cites=\"' + citation_name + '\"&gt;'\n                  // link += '&lt;a href=\"#ref-' + citation_name + '\" role=\"doc-biblioref\" aria-expanded=\"false\"&gt;[link]&lt;/a&gt;'\n                  // link += '&lt;/span&gt;'\n                  link += \"[@\" + citation_name + \"]\"\n                } else link = \"\"\n\n                entryrow.append(\"div\")\n                    .attr(\"class\", \"col-4\")\n                    .html(link)\n\n                entryrow.append(\"div\")\n                    .attr(\"class\", \"col-4\")\n                    .html(e)\n\n                let tagrow = entryrow.append(\"div\").attr(\"class\", \"col-4\")\n\n                if (paper_data.find(a =&gt; a.Name == e)){\n                    let feature_collection = (paper_data.find(a =&gt; a.Name == e) || {})[\"Graph feature\"].split(\",\")\n                    \n                    for (let graph_feature of feature_collection){\n                        graph_feature = graph_feature.trim().toLowerCase()\n                        tagrow.append(\"div\")\n                            .attr(\"class\", \"rounded-pill badge\")\n                            .style(\"margin\", \"2px\")\n                            .style(\"background-color\", graph_feature_tags_colors[graph_feature_tags.indexOf(graph_feature)%graph_feature_tags_colors.length])\n                            .text(graph_feature)\n                    }\n                }\n            }\n        }\n\n        inforow.append(\"br\")\n\n        // DRAW REST OF THE PAGE: uncomment when moving over\n  \n        let otherinfo = \"\"\n        try{\n            let otherinfo = await fetch(\"data/Benchmark datasets 64e0439269f9497799025562a4087ce1/\" + entry[\"Name\"].replace(\".\", \"\") + \" \" + entry[\"Page id\"] + \".md\")\n               \n            otherinfo = await otherinfo.text() \n            \n            var converter = new showdown.Converter();\n            \n            otherinfo = getTextAfterBody(otherinfo);\n            // let otherinfo2 = otherinfo.replace(/\\!\\[(.*?)\\]\\((.*?)\\)/g, \"![$1](data/Benchmark datasets 64e0439269f9497799025562a4087ce1/$2)\");\n            // console.log(otherinfo2);\n\n            let string_to_print = \"\"\n            \n            for (let line of otherinfo.split(\"\\n\")){\n                if (line == \"&gt;\" || line == \"&gt; \") continue;\n                else if (line[0] == \"!\") {\n                    // get everything after the first (, concat the rest\n                    let img = line.split(\"(\")\n                    // concat all the entries after the first\n                    for (let i = 2; i &lt; img.length; i++){\n                        img[1] += \"(\" + img[i]\n                    }\n                    // remove the last )\n                    img[1] = img[1].substring(0, img[1].length - 1)\n                    img = img[1]\n\n                    // inforow.append(\"div\")\n                    //     .style(\"text-align\", \"center\")\n                    //     .append(\"img\")\n                    //     .attr(\"src\", \"data/Benchmark datasets 64e0439269f9497799025562a4087ce1/\" + img)\n                    //     .attr(\"width\", \"80%\")\n\n                    string_to_print += \"&lt;div style='text-align: center'&gt;&lt;img src='data/Benchmark datasets 64e0439269f9497799025562a4087ce1/\" + img + \"' width='80%'&gt;&lt;/div&gt;\\n\"\n                // } else if (line.includes(\"STOP RENDERING\")){\n                //      break;\n                } else string_to_print += line + \"\\n\"\n                \n            }\n\n            console.log(string_to_print)\n\n        } catch (e){\n            console.log(e)\n        }\n\n        console.log(entry, inforow.node().innerHTML.replaceAll(\"&lt;br&gt;\", \"&lt;br&gt;\\n\"))\n}\n\n\n\n\n\n\n\nnotionFolders = Object()\ngraph_feature_tags = []\ngraph_feature_tags_colors = [\"#9B9A97\", \"#64473A\", \"#D9730D\", \"#DFAB01\", \"#0F7B6C\", \"#0B6E99\", \"#6940A5\", \"#AD1A72\", \"#E03E3E\"]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction doify(text){\n        if (text == \"\" || text == undefined) return text;\n        if (text.includes(\"https\")) return (text);\n        else return (\"https://doi.org/\" + text);\n    }\n\n\n\n\n\n\n\nfunction add_simple_field(entry, field_name, div, name = \"\"){\n        if (entry[field_name] != \"\" && entry[field_name] != undefined){\n            let title = name === \"\" ? field_name : name;\n            div.append(\"div\").html(\"&lt;b&gt;\" + title + \": &lt;/b&gt;\" + urlify(entry[field_name]))\n        }\n    }\n\n\n\n\n\n\n\nfunction add_download_field(entry, div){\n        let divSection = div.append(\"div\").html(\"&lt;b&gt;\" + \"Download formatted data: \" + \"&lt;/b&gt;\");\n        const list = ['OSF link gexf', 'OSF link gml', 'OSF link graphml', 'OSF link json']\n\n        list.forEach((item)=&gt;{\n            if(entry[item] != \"\" && entry[item] != undefined){\n                divSection.append(\"a\")\n                // .attr('type', 'button')\n                .attr('href', entry[item])\n                .attr('class', 'btn btn-secondary btn-sm skinny-button')\n                .text(item.split(\"OSF link\").pop().toUpperCase())\n            }   \n        })\n    }\n\n\n\n\n\n\n\nfunction urlify(text) {\n        var urlRegex = /(([a-z]+:\\/\\/)?(([a-z0-9\\-]+\\.)+([a-z]{2}|aero|arpa|biz|com|coop|edu|gov|info|int|jobs|mil|museum|name|nato|net|org|pro|travel|local|internal))(:[0-9]{1,5})?(\\/[a-z0-9_\\-\\.~]+)*(\\/([a-z0-9_\\-\\.]*)(\\?[a-z0-9+_\\-\\.%=&amp;]*)?)?(#[a-zA-Z0-9!$&'()*+.=-_~:@/?]*)?)(\\s+|$)/gi;\n        return text.replace(urlRegex, function(url) {\n            return '&lt;a href=\"' + url + '\"&gt;' + url + '&lt;/a&gt;';\n        })\n    }\n\n\n\n\n\n\n\nshowdown = require('https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js')\n\n\n\n\n\n\n\nfunction getTextAfterBody(input) {\n        const lines = input.split('\\n');\n        let emptyLineCount = 0;\n        let text = '';\n\n        for (let i = 0; i &lt; lines.length; i++) {\n            const line = lines[i].trim();\n            \n            if (line === '# Body') {\n                text = lines.slice(i + 1).join('\\n');\n                // MathJax.typeset();\n            } \n        }\n        \n        return text;\n    }\n\n\n\n\n\n\n\ndict_of_graph_features_to_colors = {\n  let all_graph_features = [... new Set(benchmark_datasets.map(a =&gt; a[\"graph features handled\"].split(\",\").map(a =&gt; a.trim())).flat().filter(a =&gt; a != \"\"))]\n  let d = {}\n  let colorscheme = d3.interpolateRainbow;\n  let count = 0;\n  for (let f in all_graph_features){\n    d[all_graph_features[f]] = d3.color(colorscheme(count++/all_graph_features.length)).darker(0.7)\n  }\n  return d;\n}"
  },
  {
    "objectID": "index.html#random-generation",
    "href": "index.html#random-generation",
    "title": "Benchmark Datasets for Graph Layout Algorithms",
    "section": "3.5 Random generation",
    "text": "3.5 Random generation\nWe discussed above that in a few cases, authors have generated their own datasets to test their algorithms. We call these generated datasets synthetic or custom, as opposed to datasets found in the wild. Generating a synthetic dataset can be essential for several reasons, particularly in the context of algorithm development and validation:\n\nPrivacy and Publication Constraints: Imagine you’ve created an innovative algorithm using a dataset that, due to privacy concerns, cannot be shared publicly. To validate and share your work without compromising data confidentiality, creating a synthetic dataset that mirrors the essential features of the original data allows you to showcase your algorithm’s effectiveness while adhering to privacy restrictions.\nBenchmarking and Comparative Analysis: Suppose you have access to a single dataset that can be shared and wish to prove your algorithm’s robustness across various scenarios. Generating synthetic datasets with comparable characteristics provides a controlled environment to conduct benchmark studies. This approach enables scientists to demonstrate that your algorithm performs consistently well across datasets with analogous features, thereby reinforcing its applicability and reliability.\nAddressing Data Availability Issues: In certain situations, you might design an algorithm to process graphs with specific attributes only to discover the absence of publicly available datasets showcasing these features. Synthetic datasets become invaluable here, allowing you to create tailored data that incorporates the necessary characteristics. This approach not only facilitates the testing of your algorithm in a relevant context but also helps in illustrating its potential in hypothetical yet plausible scenarios.\n\nWe use the word synthetic too in cases where the dataset has been altered, sliced, or other modifications have been applied to it.\nThe following is a practical example of a case where you would need to edit a network:\nImagine you are building a visualization to deal with the entirety of the Enron Corpus dataset , which has hundreds of thousands of nodes and edges. Because of its size, you decide to slice up the large dataset in many smaller files, so you can run tests. This particular dataset, in addition to being a challenging problem because of its size, also has an interesting distribution of connection densities: some nodes are extremely well connected, while others are much less connected. Indeed, the dataset is comprised of a collection of emails sent by Enron executives - between themselves or between other employees of the company. Because of how the dataset is constructed - where only the emails from the executives are taken into account - it has a distinctive skew in the connectedness of the data: 158 nodes are extremely well connected, while the rest of the nodes are much less connected. Because of this, there’s uncountable mistakes that can be done through slicing this graph: for instance, slicing it so that the subset includes a less dense section of the entire graph will fail to provide a representative section.\nWhile the creation of a synthetic dataset is a perfectly viable way to produce a benchmark set, in addition to replicability criteria (as discussed above), we also have to pay particular attention to a number of statistics related to the structure of graphs — both when generating new datasets, and when slicing up existing datasets to reduce their size, or to create more graphs from a single, larger graph.\nThe list of features to take into account to claim that a synthetic graph is comparable to another one would be long, and perhaps out of the scope of this publication. These are just a few examples of what could be relevant:\n\nSize (nodes, edges): The total number of nodes and edges in the graph, indicating its overall scale.\nDiameter: The longest shortest path between any two nodes, showing the graph’s maximum extent.\nDensity: The ratio of existing edges to possible edges, reflecting how closely knit the graph is.\nMotifs: Recurring, significant subgraphs; identify which motifs occur more or less frequently than expected.\nConnectedness: Evaluates both the number and sizes of graph components, along with detailed analysis per component.\nCentrality Measures (betweenness, closeness, degree): Quantify the importance of nodes based on their position and connections within the graph.\nSpecial Cases:\n\nLayers: Characteristics like number of layers, nodes per layer, and inter-layer connections.\nDisjoint Groups: The count and size distribution of separate clusters, plus an analysis of each group’s properties.\nOverlapping Sets: Number and size distribution of intersecting groups, along with detailed features.\nAdditional Node/Edge Data: Information such as timestamps, attributes, or weights that add context to nodes/edges.\nDynamic: Describes changes in the graph over time, including the nature and frequency of node/edge modifications.\n\n\nThe generation of random graphs that accurately mimic specific features presents a complex challenge, that has been explored abundantly in the past, but has found no universal solution yet. Two examples of popular models used to generate synthetic datasets are the Erdős-Rényi (ER) and the Barabási-Albert (BA) models, each one with their distinct focus and limitations:\nThe ER model excels in creating graphs with uniform edge distribution, ideal for testing an algorithm’s ability to evenly space nodes and reduce edge crossings. However, it falls short in replicating the complex, non-uniform connections seen in real-world networks, limiting its applicability to scenarios requiring simplicity and randomness. Conversely, the BA model produces scale-free networks with a few highly connected nodes, reflecting the hierarchical structure of many natural and human-made systems. It challenges layout algorithms to effectively display these hubs without cluttering. The limitation here is its focus on growth and preferential attachment, which might not suit all types of networks, particularly those without clear hub structures.\nAs there is no universal solution for random graph generation, our recommendation is to try as much as possible to pay attention to research replicability criteria, such as redistributing the generated dataset as supplemental material in the paper."
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "Benchmark Datasets for Graph Layout Algorithms",
    "section": "References",
    "text": "References\n\n\nAdai, Alex T., Shailesh V. Date, Shannon Wieland, and Edward M. Marcotte. 2004. “LGL: Creating a Map of Protein Function with an Algorithm for Visualizing Very Large Biological Networks.” Journal of Molecular Biology 340 (1): 179–90. https://doi.org/https://doi.org/10.1016/j.jmb.2004.04.047.\n\n\nArleo, Alessio, Walter Didimo, Giuseppe Liotta, and Fabrizio Montecchiani. 2019. “A Distributed Multilevel Force-Directed Algorithm.” IEEE Transactions on Parallel and Distributed Systems 30 (4): 754–65. https://doi.org/10.1109/tpds.2018.2869805.\n\n\nBachmaier, Christian, Andreas Gleißner, and Andreas Hofmeier. 2012. “DAGmar: Library for DAGs.” https://www.infosun.fim.uni-passau.de/~chris/down/MIP-1202.pdf.\n\n\nBarth, Wilhelm, Michael Jünger, and Petra Mutzel. 2002. “Simple and Efficient Bilayer Cross Counting.” In Graph Drawing, edited by Michael T. Goodrich and Stephen G. Kobourov, 130–41. Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/10.1007/3-540-36151-0_13.\n\n\nBartolomeo, Sara di, Yixuan Zhang, Fangfang Sheng, and Cody Dunne. 2021. “Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes.” IEEE Transactions on Visualization and Computer Graphics 27 (2): 1353–63. https://doi.org/10.1109/tvcg.2020.3030442.\n\n\nBatagelj, Vladimir, and Andrej Mrvar. 2006. “Pajek Datasets.” In. http://vlado.fmf.uni-lj.si/pub/networks/data/.\n\n\nBattista, Giuseppe Di, Ashim Garg, Giuseppe Liotta, Armando Parise, Roberto Tamassia, Emanuele Tassinari, Francesco Vargiu, and Luca Vismara. 2000. “Drawing Directed Acyclic Graphs: An Experimental Study.” International Journal of Computational Geometry & Applications 10 (06): 623–48. https://doi.org/10.1142/s0218195900000358.\n\n\nBattista, Giuseppe Di, Ashim Garg, Giuseppe Liotta, Roberto Tamassia, Emanuele Tassinari, and Francesco Vargiu. 1997. “An Experimental Comparison of Four Graph Drawing Algorithms.” Computational Geometry 7 (5-6): 303–25. https://doi.org/10.1016/s0925-7721(96)00005-3.\n\n\nBaumert, Kevin A., Timothy Herzog, and Jonathan Pershing. 2005. “Navigating the Numbers: Greenhouse Gas Data and International Climate Policy.” World Resources Institute (WRI). https://files.wri.org/d8/s3fs-public/pdf/navigating_numbers.pdf.\n\n\nBekos, Michael A., Henry Förster, Christian Geckeler, Lukas Holländer, Michael Kaufmann, Amadäus M. Spallek, and Jan Splett. 2018. “A Heuristic Approach Towards Drawings of Graphs with High Crossing Resolution.” In Lecture Notes in Computer Science, 271–85. Springer International Publishing. https://doi.org/10.1007/978-3-030-04414-5_19.\n\n\nBinucci, Carla, Markus Chimani, Walter Didimo, Giuseppe Liotta, and Fabrizio Montecchiani. 2016. “Placing Arrows in Directed Graph Drawings.” In Lecture Notes in Computer Science, 44–51. Springer International Publishing. https://doi.org/10.1007/978-3-319-50106-2_4.\n\n\nBinucci, Carla, Walter Didimo, Michael Kaufmann, Giuseppe Liotta, and Fabrizio Montecchiani. 2022. “Placing Arrows in Directed Graph Layouts: Algorithms and Experiments.” Computer Graphics Forum 41 (1): 364–76. https://doi.org/https://doi.org/10.1111/cgf.14440.\n\n\nBörsig, Katharina, Ulrik Brandes, and Barna Pasztor. 2020. “Stochastic Gradient Descent Works Really Well for Stress Minimization.” In Lecture Notes in Computer Science, 18–25. Springer International Publishing. https://doi.org/10.1007/978-3-030-68766-3_2.\n\n\nBrandes, Ulrik, and Christian Pich. 2006. “Eigensolver Methods for Progressive Multidimensional Scaling of Large Data.” In Proceedings of the 14th International Conference on Graph Drawing, 42–53. GD’06. Berlin, Heidelberg: Springer-Verlag. https://doi.org/10.5555/1758612.1758620.\n\n\nBuchheim, Christoph, Markus Chimani, Dietmar Ebner, Carsten Gutwenger, Michael Jünger, Gunnar W. Klau, Petra Mutzel, and René Weiskircher. 2008. “A Branch-and-Cut Approach to the Crossing Number Problem.” Discrete Optimization 5 (2): 373–88. https://doi.org/10.1016/j.disopt.2007.05.006.\n\n\nCalamoneri, Tiziana, Valentino Di Donato, Diego Mariottini, and Maurizio Patrignani. 2018. “Visualizing Co-Phylogenetic Reconciliations.” In Lecture Notes in Computer Science, 334–47. Springer International Publishing. https://doi.org/10.1007/978-3-319-73915-1_27.\n\n\nChimani, Markus, and Carsten Gutwenger. 2012. “Advances in the Planarization Method: Effective Multiple Edge Insertions.” In Graph Drawing, 87–98. Springer Berlin Heidelberg. https://doi.org/10.1007/978-3-642-25878-7_10.\n\n\nChimani, Markus, Carsten Gutwenger, and Petra Mutzel. 2006. “Experiments on Exact Crossing Minimization Using Column Generation.” In Experimental Algorithms, edited by Carme Àlvarez and María Serna, 303–15. Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/10.1007/11764298_28.\n\n\nChimani, Markus, Carsten Gutwenger, Petra Mutzel, and Hoi-Ming Wong. 2010. “Layer-Free Upward Crossing Minimization.” ACM J. Exp. Algorithmics 15 (March). https://doi.org/10.1145/1671970.1671975.\n\n\nChimani, Markus, Max Ilsen, and Tilo Wiedera. 2021. “Star-Struck by Fixed Embeddings: Modern Crossing Number Heuristics.” In Lecture Notes in Computer Science, 41–56. Springer International Publishing. https://doi.org/10.1007/978-3-030-92931-2_3.\n\n\nChimani, Markus, Karsten Klein, and Tilo Wiedera. 2016. “A Note on the Practicality of Maximal Planar Subgraph Algorithms.” In Graph Drawing and Network Visualization, edited by Yifan Hu and Martin Nöllenburg, 357–64. Cham: Springer International Publishing.\n\n\nChimani, Markus, Petra Mutzel, and Immanuel Bomze. 2008. “A New Approach to Exact Crossing Minimization.” In Algorithms - ESA 2008, 284–96. Springer Berlin Heidelberg. https://doi.org/10.1007/978-3-540-87744-8_24.\n\n\nChimani, Markus, and Tilo Wiedera. 2016. “An ILP-Based Proof System for the Crossing Number Problem.” In 24th Annual European Symposium on Algorithms (ESA 2016), edited by Piotr Sankowski and Christos Zaroliagis, 57:29:1–13. Leibniz International Proceedings in Informatics (LIPIcs). Dagstuhl, Germany: Schloss Dagstuhl–Leibniz-Zentrum fuer Informatik. https://doi.org/10.4230/LIPIcs.ESA.2016.29.\n\n\nCivril, Ali, Malik Magdon-Ismail, and Eli Bocek-Rivele. 2006. “SDE: Graph Drawing Using Spectral Distance Embedding.” In Graph Drawing, edited by Patrick Healy and Nikola S. Nikolov, 512–13. Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/10.1007/11618058_48.\n\n\nClancy, Kieran, Michael Haythorpe, and Alex Newcombe. 2019a. “A Survey of Graphs with Known or Bounded Crossing Numbers.” Australas. J Comb. 78: 209–96. https://api.semanticscholar.org/CorpusID:119313173.\n\n\n———. 2019b. “An Effective Crossing Minimisation Heuristic Based on Star Insertion.” Journal of Graph Algorithms and Applications 23 (2): 135–66. https://doi.org/10.7155/jgaa.00487.\n\n\nDang, T. N., N. Pendar, and A. G. Forbes. 2016. “TimeArcs: Visualizing Fluctuations in Dynamic Networks.” Computer Graphics Forum 35 (3): 61–69. https://doi.org/10.1111/cgf.12882.\n\n\nDavis, Timothy A., and Yifan Hu. 2011. “The University of Florida Sparse Matrix Collection.” ACM Trans. Math. Softw. 38 (1). https://doi.org/10.1145/2049662.2049663.\n\n\nDemel, Almut, Dominik Dürrschnabel, Tamara Mchedlidze, Marcel Radermacher, and Lasse Wulf. 2018. “A Greedy Heuristic for Crossing-Angle Maximization.” In Lecture Notes in Computer Science, 286–99. Springer International Publishing. https://doi.org/10.1007/978-3-030-04414-5_20.\n\n\nDi Bartolomeo, Sara, Tarik Crnovrsanin, David Saffo, Eduardo Puerta, Connor Wilson, and Cody Dunne. 2024. “Evaluating Graph Layout Algorithms: A Systematic Review of Methods and Best Practices.” Computer Graphics Forum n/a (n/a): e15073. https://doi.org/10.1111/cgf.15073.\n\n\nDi Bartolomeo, Sara, Mirek Riedewald, Wolfgang Gatterbauer, and Cody Dunne. 2022. “STRATISFIMAL LAYOUT: A Modular Optimization Model for Laying Out Layered Node-Link Network Visualizations.” IEEE Transactions on Visualization and Computer Graphics 28 (1): 324–34. https://doi.org/10.1109/tvcg.2021.3114756.\n\n\nDi Battista, Giuseppe, Ashim Garg, and Giuseppe Liotta. 1995. “An Experimental Comparison of Three Graph Drawing Algorithms (Extended Abstract).” In Proceedings of the Eleventh Annual Symposium on Computational Geometry, 306–15. SCG ’95. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/220279.220312.\n\n\nDonati, Beatrice, Christian Baudet, Blerina Sinaimeri, Pierluigi Crescenzi, and Marie-France Sagot. 2015. “EUCALYPT: Efficient Tree Reconciliation Enumerator.” Algorithms for Molecular Biology 10: 3. https://doi.org/10.1186/s13015-014-0031-3.\n\n\nEades, Peter, Quan Nguyen, and Seok-Hee Hong. 2018. “Drawing Big Graphs Using Spectral Sparsification.” In Lecture Notes in Computer Science, 272–86. Springer International Publishing. https://doi.org/10.1007/978-3-319-73915-1_22.\n\n\nElzen, Stef van den, Danny Holten, Jorik Blaas, and Jarke J. van Wijk. 2013. “Reordering Massive Sequence Views: Enabling Temporal and Structural Analysis of Dynamic Networks.” In 2013 IEEE Pacific Visualization Symposium (PacificVis). IEEE. https://doi.org/10.1109/pacificvis.2013.6596125.\n\n\nFrishman, Yaniv, and Ayellet Tal. 2007. “Multi-Level Graph Layout on the GPU.” IEEE Transactions on Visualization and Computer Graphics 13 (6): 1310–19. https://doi.org/10.1109/TVCG.2007.70580.\n\n\nFrishman, Y., and A. Tal. 2008. “Online Dynamic Graph Drawing.” IEEE Transactions on Visualization and Computer Graphics 14 (4): 727–40. https://doi.org/10.1109/tvcg.2008.11.\n\n\nGange, Graeme, Peter J. Stuckey, and Kim Marriott. 2011. “Optimal k-Level Planarization and Crossing Minimization.” In Graph Drawing, 238–49. Springer Berlin Heidelberg. https://doi.org/10.1007/978-3-642-18469-7_22.\n\n\nGansner, E. R., Yifan Hu, and S. North. 2013. “A Maxent-Stress Model for Graph Layout.” IEEE Transactions on Visualization and Computer Graphics 19 (6): 927–40. https://doi.org/10.1109/tvcg.2012.299.\n\n\nGansner, E. R., Y. Koren, and S. C. North. 2005. “Topological Fisheye Views for Visualizing Large Graphs.” IEEE Transactions on Visualization and Computer Graphics 11 (4): 457–68. https://doi.org/10.1109/tvcg.2005.66.\n\n\nGansner, Emden R., and Yehuda Koren. 2006. “Improved Circular Layouts.” In Graph Drawing, 386–98. Springer Berlin Heidelberg. https://doi.org/10.1007/978-3-540-70904-6_37.\n\n\nGansner, Emden R., and Stephen C. North. 2000. “An Open Graph Visualization System and Its Applications to Software Engineering.” Softw. Pract. Exper. 30 (11): 1203–33.\n\n\nGiovannangeli, Loann, Frederic Lalanne, Romain Giot, and Romain Bourqui. 2023. “FORBID: Fast Overlap Removal by Stochastic GradIent Descent for Graph Drawing.” In Graph Drawing and Network Visualization, edited by Patrizio Angelini and Reinhard von Hanxleden, 61–76. Cham: Springer International Publishing. https://doi.org/10.1007/978-3-031-22203-0_6.\n\n\nGray, Kathryn, Mingwei Li, Reyan Ahmed, and Stephen Kobourov. 2023. “Visualizing Evolving Trees.” In Graph Drawing and Network Visualization, edited by Patrizio Angelini and Reinhard von Hanxleden, 319–35. Cham: Springer International Publishing. https://doi.org/10.1007/978-3-031-22203-0_23.\n\n\nGronemann, Martin, Michael Jünger, Frauke Liers, and Francesco Mambelli. 2016. “Crossing Minimization in Storyline Visualization.” In Lecture Notes in Computer Science, 367–81. Springer International Publishing. https://doi.org/10.1007/978-3-319-50106-2_29.\n\n\nGutwenger, Carsten. 2010. “Application of SPQR-Trees in the Planarization Approach for Drawing Graphs.” PhD thesis, Technische Universität Dortmund. https://eldorado.tu-dortmund.de/handle/2003/27430?mode=full.\n\n\nGutwenger, Carsten, and Petra Mutzel. 2004. “An Experimental Study of Crossing Minimization Heuristics.” In Graph Drawing, 13–24. Springer Berlin Heidelberg. https://doi.org/10.1007/978-3-540-24595-7_2.\n\n\nHachul, Stefan, and Michael Juenger. 2006. “An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs,” 235–50. https://doi.org/10.1007/11618058_22.\n\n\nHachul, Stefan, and Michael Jünger. 2005. “Drawing Large Graphs with a Potential-Field-Based Multilevel Algorithm.” In Graph Drawing, 285–95. Springer Berlin Heidelberg. https://doi.org/10.1007/978-3-540-31843-9_29.\n\n\nHeinsohn, Niklas, and Michael Kaufmann. 2018. “An Interactive Tool to Explore and Improve the Ply Number of Drawings.” In Lecture Notes in Computer Science, 38–51. Springer International Publishing. https://doi.org/10.1007/978-3-319-73915-1_4.\n\n\nHong, Seok-Hee, Peter Eades, Marnijati Torkel, Ziyang Wang, David Chae, Sungpack Hong, Daniel Langerenken, and Hassan Chafi. 2019. “Multi-Level Graph Drawing Using Infomap Clustering.” In Lecture Notes in Computer Science, 139–46. Springer International Publishing. https://doi.org/10.1007/978-3-030-35802-0_11.\n\n\nJabrayilov, Adalat, Sven Mallach, Petra Mutzel, Ulf Rüegg, and Reinhard von Hanxleden. 2016. “Compact Layered Drawings of General Directed Graphs.” In Lecture Notes in Computer Science, 209–21. Springer International Publishing. https://doi.org/10.1007/978-3-319-50106-2_17.\n\n\nJolly, Mitchell. 2017. “Chess Game Dataset (Lichess).” Kaggle. https://www.kaggle.com/datasets/datasnaek/chess?resource=download.\n\n\nJünger, Michael, and Petra Mutzel. 1996. “Exact and Heuristic Algorithms for 2-Layer Straightline Crossing Minimization.” In Graph Drawing, edited by Franz J. Brandenburg, 337–48. Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/10.1007/BFb0021817.\n\n\nJünger, Michael, Petra Mutzel, and Christiane Spisla. 2018. “A Flow Formulation for Horizontal Coordinate Assignment with Prescribed Width.” In Lecture Notes in Computer Science, 187–99. Springer International Publishing. https://doi.org/10.1007/978-3-030-04414-5_13.\n\n\nKindermann, Philipp, Wouter Meulemans, and André Schulz. 2018. “Experimental Analysis of the Accessibility of Drawings with Few Segments.” Journal of Graph Algorithms and Applications 22 (3): 501–18. https://doi.org/10.7155/jgaa.00474.\n\n\nKlammler, Moritz, Tamara Mchedlidze, and Alexey Pak. 2018. “Aesthetic Discrimination of Graph Layouts.” In Graph Drawing and Network Visualization, edited by Therese Biedl and Andreas Kerren, 169–84. Cham: Springer International Publishing. https://doi.org/10.1007/978-3-030-04414-5_12.\n\n\nKleinberg, Jon. 2002. “The Structure of Information Networks.” https://www.cs.cornell.edu/courses/cs685/2002fa/.\n\n\nKlimt, Bryan, and Yiming Yang. 2004. “Introducing the Enron Corpus.” In International Conference on Email and Anti-Spam.\n\n\nKnuth, Donald Ervin. 2009. The Stanford Graphbase: A Platform for Combinatorial Computing. Addison-Wesley.\n\n\nKoch, Thorsten, Alexander Martin, and Stefan Voß. 2001. “SteinLib: An Updated Library on Steiner Tree Problems in Graphs.” In Steiner Trees in Industry, edited by Xiu Zhen Cheng and Ding-Zhu Du, 285–325. Boston, MA: Springer US. https://doi.org/10.1007/978-1-4613-0255-1_9.\n\n\nKoren, Y. 2005. “Drawing Graphs by Eigenvectors: Theory and Practice.” Computers & Mathematics with Applications 49 (11): 1867–88. https://doi.org/10.1016/j.camwa.2004.08.015.\n\n\nKoren, Yehuda, L. Carmel, and D. Harel. 2002. “ACE: A Fast Multiscale Eigenvectors Computation for Drawing Huge Graphs.” In IEEE Symposium on Information Visualization, 2002. INFOVIS 2002., 137–44. https://doi.org/10.1109/INFVIS.2002.1173159.\n\n\nKruiger, J. F., P. E. Rauber, R. M. Martins, A. Kerren, S. Kobourov, and A. C. Telea. 2017. “Graph Layouts by t-SNE.” Computer Graphics Forum 36 (3): 283–94. https://doi.org/10.1111/cgf.13187.\n\n\nLeskovec, Jure, and Andrej Krevl. 2014. “SNAP Datasets: Stanford Large Network Dataset Collection.” http://snap.stanford.edu/data.\n\n\nLetunic, Ivica, and Peer Bork. 2021. “Interactive Tree Of Life (iTOL) v5: an online tool for phylogenetic tree display and annotation.” Nucleic Acids Research 49 (W1): W293–96. https://doi.org/10.1093/nar/gkab301.\n\n\nMaddison, David, Katja Schulz, and Wayne Maddison. 2007. “The Tree of Life Web Project*.” Zootaxa 1668 (December): 19–40. https://doi.org/10.11646/zootaxa.1668.1.4.\n\n\nMallach, Sven. 2019. “A Natural Quadratic Approach to the Generalized Graph Layering Problem.” In Lecture Notes in Computer Science, 532–44. Springer International Publishing. https://doi.org/10.1007/978-3-030-35802-0_40.\n\n\nMalone, D. W. 1975. “An Introduction to the Application of Interpretive Structural Modeling.” Proceedings of the IEEE 63 (3): 397–404. https://doi.org/10.1109/PROC.1975.9765.\n\n\nMeidiana, Amyra, Seok-Hee Hong, and Peter Eades. 2023. “Shape-Faithful Graph Drawings.” In Graph Drawing and Network Visualization, edited by Patrizio Angelini and Reinhard von Hanxleden, 93–108. Cham: Springer International Publishing. https://doi.org/10.1007/978-3-031-22203-0_8.\n\n\nMeidiana, Amyra, Seok-Hee Hong, Peter Eades, and Daniel Keim. 2019. “A Quality Metric for Visualization of Clusters in Graphs.” In Lecture Notes in Computer Science, 125–38. Springer International Publishing. https://doi.org/10.1007/978-3-030-35802-0_10.\n\n\nMeidiana, Amyra, Seok-Hee Hong, Marnijati Torkel, Shijun Cai, and Peter Eades. 2020. “Sublinear Time Force Computation for Big Complex Network Visualization.” Computer Graphics Forum 39 (3): 579–91. https://doi.org/https://doi.org/10.1111/cgf.14003.\n\n\nMiller, Jacob, Vahan Huroyan, and Stephen Kobourov. 2023. “Spherical Graph Drawing by Multi-Dimensional Scaling.” In Graph Drawing and Network Visualization, edited by Patrizio Angelini and Reinhard von Hanxleden, 77–92. Cham: Springer International Publishing. https://doi.org/10.1007/978-3-031-22203-0_7.\n\n\nMuelder, Chris, and Kwan Liu Ma. 2008a. “Rapid Graph Layout Using Space Filling Curves.” IEEE Transactions on Visualization and Computer Graphics 14 (6): 1301–8. https://doi.org/10.1109/TVCG.2008.158.\n\n\nMuelder, Chris, and Kwan-Liu Ma. 2008b. “A Treemap Based Method for Rapid Layout of Large Graphs.” In 2008 IEEE Pacific Visualization Symposium, 231–38. https://doi.org/10.1109/PACIFICVIS.2008.4475481.\n\n\nNachmanson, Lev, Arlind Nocaj, Sergey Bereg, Leishi Zhang, and Alexander Holroyd. 2017. “Node Overlap Removal by Growing a Tree.” Journal of Graph Algorithms and Applications 21 (5): 857–72. https://doi.org/10.7155/jgaa.00442.\n\n\nNickel, Soeren, Max Sondag, Wouter Meulemans, Markus Chimani, Stephen Kobourov, Jaakko Peltonen, and Martin Nöllenburg. 2019. “Computing Stable Demers Cartograms.” In Lecture Notes in Computer Science, 46–60. Springer International Publishing. https://doi.org/10.1007/978-3-030-35802-0_4.\n\n\nNiedermann, Benjamin, and Ignaz Rutter. 2020. “An Integer-Linear Program for Bend-Minimization in Ortho-Radial Drawings.” In Lecture Notes in Computer Science, 235–49. Springer International Publishing. https://doi.org/10.1007/978-3-030-68766-3_19.\n\n\nNoack, Andreas. 2004. “An Energy Model for Visual Graph Clustering.” In Graph Drawing, edited by Giuseppe Liotta, 425–36. Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/10.1007/978-3-540-24595-7_40.\n\n\nNocaj, Arlind, Mark Ortmann, and Ulrik Brandes. 2015. “Untangling the Hairballs of Multi-Centered, Small-World Online Social Media Networks.” Journal of Graph Algorithms and Applications : JGAA 19 (2): 595–618. https://doi.org/10.7155/jgaa.00370.\n\n\nOrtmann, Mark, Mirza Klimenta, and Ulrik Brandes. 2017. “A Sparse Stress Model.” Journal of Graph Algorithms and Applications 21 (5): 791–821. https://doi.org/10.7155/jgaa.00440.\n\n\nRaj, Mukund, and Ross T. Whitaker. 2018. “Anisotropic Radial Layout for Visualizing Centrality and Structure in Graphs.” In Lecture Notes in Computer Science, 351–64. Springer International Publishing. https://doi.org/10.1007/978-3-319-73915-1_28.\n\n\nRossi, Ryan A., and Nesreen K. Ahmed. 2015. “The Network Data Repository with Interactive Graph Analytics and Visualization.” In AAAI. http://networkrepository.com.\n\n\nRüegg, Ulf, Thorsten Ehlers, Miro Spönemann, and Reinhard von Hanxleden. 2016. “A Generalization of the Directed Graph Layering Problem.” In Lecture Notes in Computer Science, 196–208. Springer International Publishing. https://doi.org/10.1007/978-3-319-50106-2_16.\n\n\nSoper, A. J., C. Walshaw, and M. Cross. 2004. “A Combined Evolutionary Search and Multilevel Optimisation Approach to Graph-Partitioning.” Journal of Global Optimization 29 (2): 225–41. https://doi.org/10.1023/B:JOGO.0000042115.44455.f3.\n\n\nSubramanian, Arvind, and Shang-Jin Wei. 2007. “The WTO Promotes Trade, Strongly but Unevenly.” Journal of International Economics 72 (1): 151–75. https://doi.org/https://doi.org/10.1016/j.jinteco.2006.07.007.\n\n\nSugiyama, Kozo, Shojiro Tagawa, and Mitsuhiko Toda. 1981. “Methods for Visual Understanding of Hierarchical System Structures.” IEEE Transactions on Systems, Man, and Cybernetics 11 (2): 109–25. https://doi.org/10.1109/tsmc.1981.4308636.\n\n\nTanahashi, Yuzuru, Chien-Hsin Hsueh, and Kwan-Liu Ma. 2015. “An Efficient Framework for Generating Storyline Visualizations from Streaming Data.” IEEE Transactions on Visualization and Computer Graphics 21 (6): 730–42. https://doi.org/10.1109/tvcg.2015.2392771.\n\n\nWalshaw, C. 2001. “A Multilevel Algorithm for Force-Directed Graph Drawing.” In Graph Drawing, edited by Joe Marks, 171–82. Berlin, Heidelberg: Springer Berlin Heidelberg.\n\n\nWalshaw, C., and M. Cross. 2000. “Mesh Partitioning: A Multilevel Balancing and Refinement Algorithm.” SIAM J. Sci. Comput. 22 (1): 63–80. https://doi.org/10.1137/S1064827598337373.\n\n\nWelch, E., and S. Kobourov. 2017. “Measuring Symmetry in Drawings of Graphs.” Computer Graphics Forum 36 (3): 341–51. https://doi.org/https://doi.org/10.1111/cgf.13192.\n\n\nZarate, David Cheng, Pierre Le Bodic, Tim Dwyer, Graeme Gange, and Peter Stuckey. 2018. “Optimal Sankey Diagrams via Integer Programming.” In 2018 IEEE Pacific Visualization Symposium (PacificVis), 135–39. https://doi.org/10.1109/PacificVis.2018.00025.\n\n\nZheng, Jonathan X., Samraat Pawar, and Dan F. M. Goodman. 2019. “Graph Drawing by Stochastic Gradient Descent.” IEEE Transactions on Visualization and Computer Graphics 25 (9): 2738–48. https://doi.org/10.1109/TVCG.2018.2859997.\n\n\nZhong, Fahai, Mingliang Xue, Jian Zhang, Fan Zhang, Rui Ban, Oliver Deussen, and Yunhai Wang. 2023. “Force-Directed Graph Layouts Revisited: A New Force Based on the t-Distribution.” IEEE Transactions on Visualization and Computer Graphics, 1–14. https://doi.org/10.1109/TVCG.2023.3238821.\n\n\nZhu, Minfeng, Wei Chen, Yuanzhe Hu, Yuxuan Hou, Liangjun Liu, and Kaiyuan Zhang. 2021. “DRGraph: An Efficient Graph Layout Algorithm for Large-Scale Graphs by Dimensionality Reduction.” IEEE Transactions on Visualization and Computer Graphics 27 (2): 1666–76. https://doi.org/10.1109/TVCG.2020.3030447."
  },
  {
    "objectID": "env-home/lib/python3.11/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html",
    "href": "env-home/lib/python3.11/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html",
    "title": "1 Authors",
    "section": "",
    "text": "pyqode.qt: Colin Duquesnoy (@ColinDuquesnoy)\nspyderlib.qt: Pierre Raybaut (@PierreRaybaut)\nqt-helpers: Thomas Robitaille (@astrofrog)\n\n\n\n\n\nDaniel Althviz (@dalthviz)\nCarlos Cordoba (@ccordoba12)\nC.A.M. Gerlach (@CAM-Gerlach)\nSpyder Development Team (Spyder-IDE)\n\n\n\n\n\nThe QtPy Contributors"
  },
  {
    "objectID": "env-home/lib/python3.11/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html#original-authors",
    "href": "env-home/lib/python3.11/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html#original-authors",
    "title": "1 Authors",
    "section": "",
    "text": "pyqode.qt: Colin Duquesnoy (@ColinDuquesnoy)\nspyderlib.qt: Pierre Raybaut (@PierreRaybaut)\nqt-helpers: Thomas Robitaille (@astrofrog)"
  },
  {
    "objectID": "env-home/lib/python3.11/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html#current-maintainers",
    "href": "env-home/lib/python3.11/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html#current-maintainers",
    "title": "1 Authors",
    "section": "",
    "text": "Daniel Althviz (@dalthviz)\nCarlos Cordoba (@ccordoba12)\nC.A.M. Gerlach (@CAM-Gerlach)\nSpyder Development Team (Spyder-IDE)"
  },
  {
    "objectID": "env-home/lib/python3.11/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html#contributors",
    "href": "env-home/lib/python3.11/site-packages/QtPy-2.4.1.dist-info/AUTHORS.html#contributors",
    "title": "1 Authors",
    "section": "",
    "text": "The QtPy Contributors"
  },
  {
    "objectID": "env-home/lib/python3.11/site-packages/numpy/random/LICENSE.html",
    "href": "env-home/lib/python3.11/site-packages/numpy/random/LICENSE.html",
    "title": "1 NCSA Open Source License",
    "section": "",
    "text": "This software is dual-licensed under the The University of Illinois/NCSA Open Source License (NCSA) and The 3-Clause BSD License\n\n1 NCSA Open Source License\nCopyright (c) 2019 Kevin Sheppard. All rights reserved.\nDeveloped by: Kevin Sheppard (kevin.sheppard@economics.ox.ac.uk, kevin.k.sheppard@gmail.com) http://www.kevinsheppard.com\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal with the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimers.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimers in the documentation and/or other materials provided with the distribution.\nNeither the names of Kevin Sheppard, nor the names of any contributors may be used to endorse or promote products derived from this Software without specific prior written permission.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.\n\n\n2 3-Clause BSD License\nCopyright (c) 2019 Kevin Sheppard. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n3 Components\nMany parts of this module have been derived from original sources, often the algorithm’s designer. Component licenses are located with the component code."
  },
  {
    "objectID": "env-home/lib/python3.11/site-packages/httpx-0.27.0.dist-info/licenses/LICENSE.html",
    "href": "env-home/lib/python3.11/site-packages/httpx-0.27.0.dist-info/licenses/LICENSE.html",
    "title": "GD benchmark sets",
    "section": "",
    "text": "Copyright © 2019, Encode OSS Ltd. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/World Maps 99689f52cc854daba9c25be42de1cbe3.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/World Maps 99689f52cc854daba9c25be42de1cbe3.html",
    "title": "1 World Maps",
    "section": "",
    "text": "1 World Maps\nNote: Datasets contain various attributes for a few locations and their geographical adjacency, namely neighboring states, countries, and municipalities. Origin Notes: World Bank country information transformed into a weight-vectors dataset. Some of the incomplete data was filled from disparate sources mentioned in the paper’s supplemental materials: https://doi.org/10.48550/arXiv.1908.07291. graph features handled: categorical nodes, dynamic, node weighted, spatial Graph features in papers: dynamic,spatial Origin Paper: Computing Stable Demers Cartograms (https://www.notion.so/Computing-Stable-Demers-Cartograms-73ed6431833d49bba5807b76ca3b0fd4?pvs=21) Originally found at: https://data.worldbank.org/indicator https://github.com/loizuf/StableDemersLP/tree/main/code/StableDemers_TVCG/data Size: 48-514 nodes, 205-2428 edges Number of Graphs: 14 Appeared in years: 2019 Type of Collection: Uniform Benchmark is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Computing Stable Demers Cartograms (https://www.notion.so/Computing-Stable-Demers-Cartograms-852e6a1086c74936a3fbe7d9c25e365e?pvs=21) cleaned format?: No duplicate?: No link works?: Yes Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d94aca94a6be102f12e736 Origin paper plaintext: Computing Stable Demers Cartograms Page id: 99689f52cc854daba9c25be42de1cbe3 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d948f10c2b4d0e8d386217 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96dde0c2b4d0f653862e3 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d971f194a6be112a12eaaa first look: No sparkline data: {‘min’: 48, ‘max’: 514, ‘step_size’: 100, ‘num_bins’: 6, ‘bins’: [0, 100, 200, 300, 400, 500], ‘num_nodes’: [4, 4, 0, 0, 0, 6]} Related to Literature - Algorithm (Dataset tag relations) 1: Computing Stable Demers Cartograms (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Computing%20Stable%20Demers%20Cartograms%20fb418899e13f45f4b6b3c6296e07a599.md)\n\n\n2 Body\n\nStatistics\n\n\n\nfour_in_one.svg\n\n\n\n\nDescriptions from Literature\nFrom Computing Stable Demers Cartograms”:\n\nWe run experiments on real-world datasets. For time-series data, we expect a gradual change and strong correlation between the different values. For weight-vectors data, we expect more erratic changes and less correlation. We use two maps with rather different geographic structures: the first (World) is a map of world countries, having mixed region (country) sizes in a rather unstructured manner; the second (US) is a map of the 48 contiguous US states, having relatively high structure in sizes of its states, with large states in the middle and along the west coast and many smaller states along the east coast.\n\nFrom Supplemental Materials, Appendix C of *“Computing Stable Demers Cartograms*”:\n\n\n\nUntitled\n\n\n\n\nExample Figures\nFrom Computing Stable Demers Cartograms”:\n\n\n\nUntitled\n\n\n=== STOP RENDERING ===\nfrom Computing Stable Demers Cartograms\nWorld bank - bunch of references - all temporal datasets!\nMissing Data from the world bank was filled with following linked sources:\nhttps://en.wikipedia.org/wiki/Economy of North Korea#cite note-2\nhttps://tradingeconomics.com/kuwait/rural-population-wb-data.html\nhttp://www.efgs.info/wp-content/uploads/conferences/efgs/2016/S8-1 presentationV1 IdrizShala EFGS2016.pdf\nhttps://tradingeconomics.com/eritrea/rural-population-wb-data.html\nhttps://tradingeconomics.com/kuwait/forest-area-percent-of-land-area-wb-data. html\nhttps://tradingeconomics.com/kosovo/forest-area-percent-of-land-area-wb-data. html"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/World Bank Trade Data e6e54a00bc574c639cfa165458c71232.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/World Bank Trade Data e6e54a00bc574c639cfa165458c71232.html",
    "title": "1 World Bank Trade Data",
    "section": "",
    "text": "1 World Bank Trade Data\nOrigin Notes: Bilateral trade value in 1999 (total imports+exports), from https://wits.worldbank.org/module/ALL/sub-module/ALL/reporter/ALL/year/ALL/tradeflow/ALL/pagesize/50/page/1. graph features handled: categorical nodes, dense Graph features in papers: clusters (generated),generic,generic,large Origin Paper: The WTO promotes trade, strongly but unevenly (https://www.notion.so/The-WTO-promotes-trade-strongly-but-unevenly-96eaeaa0225747b98768579410b99ee5?pvs=21) Originally found at: https://wits.worldbank.org/module/ALL/sub-module/ALL/reporter/ALL/year/ALL/tradeflow/ALL/pagesize/50/page/1 Size: 194 nodes, 10,080 edges Number of Graphs: 1 Appeared in years: 2006,2015 Type of Collection: Single Graph is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Energy Models for Graph Clustering (https://www.notion.so/Energy-Models-for-Graph-Clustering-650b53a4f2f8488f9e5eab77f118aefe?pvs=21), Untangling the Hairballs of Multi-Centered Small-World Online Social Media Networks (https://www.notion.so/Untangling-the-Hairballs-of-Multi-Centered-Small-World-Online-Social-Media-Networks-8d6315c26f82480cb56a0256ef7ec569?pvs=21) cleaned format?: Yes duplicate?: No link works?: No Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90e390c2b4d0d2e386256 Origin paper plaintext: The WTO promotes trade, strongly but unevenly Page id: e6e54a00bc574c639cfa165458c71232 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d949494cf7481075055615 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96d610c2b4d0f6438622a OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d970654cf748115a0557d4 first look: No sparkline data: {‘min’: 6, ‘max’: 192, ‘step_size’: 10, ‘num_bins’: 20, ‘bins’: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190], ‘node_degree’: [1, 0, 4, 9, 9, 16, 20, 17, 21, 10, 9, 11, 10, 5, 5, 8, 5, 7, 15, 12]} Related to Literature - Algorithm (Dataset tag relations) 1: Energy Models for Graph Clustering (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Energy%20Models%20for%20Graph%20Clustering%20b2b82813b6124d1fbd17b1e84e8043fe.md), Untangling the Hairballs of Multi-Centered Small-World Online Social Media Networks (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Untangling%20the%20Hairballs%20of%20Multi-Centered%20Small-W%20690af12a963849cd80c0285d27221086.md)\n\n\n2 Body\n\nStatistics\n\n\n\ndegree_distr.svg\n\n\n\n\nDescriptions from Literature\nFrom “Energy Models for Graph Clustering”:\n\nThe difference between conventional energy models, node-repulsion LinLog, and edge-repulsion LinLog can be illustrated with a model of the trade between ten North American and European countries. The nodes of the graph correspond to the countries, and the edge weights specify the trade volume between each pair of countries. Because of geographical closeness and free trade agreements, countries on the same continent trade more intensively than countries on different continents. Figure 1 shows the minimum energy layouts of the trade graph for the three force and energy models. The layout of the widely used Fruchterman-Reingold model [20] does not show any clear groups at all. The layout of the node-repulsion LinLog energy model groups the countries (nodes) primarily according to their total trade volume (degree). Only the layout of the edge-repulsion LinLog energy model shows the expected grouping according to continents.\n\n\n\nExample Figures\nFrom “Untangling the Hairballs of Multi-Centered Small-World Online Social Media Networks”:\n\n\n\nScreen Shot 2023-08-17 at 5.17.54 PM.png\n\n\nFrom “Energy Models for Graph Clustering”:\n\n\n\nScreen Shot 2023-08-17 at 5.13.41 PM.png\n\n\n=== STOP RENDERING ===\nworld bank: www.worldbank.org"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Walshaw e40b37a1147942d89ff1d8dfad285256.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Walshaw e40b37a1147942d89ff1d8dfad285256.html",
    "title": "1 Walshaw",
    "section": "",
    "text": "1 Walshaw\nNote: We do not provide the the data ourselves. Walshaw requests to be emailed for the distribution of the data, and so we link to their site and to the graphs found in the SuiteSparse Matrix Collection. Origin Notes: C. Walshaw, collected for an archive of graph partitions which has been maintained since 2000. These are multilevel mesh partitions of heterogeneous networks from a variety of domains. graph features handled: edge weighted, mesh, node weighted, partition Graph features in papers: clusters (generated),generic,generic,generic,large,generic,high degree,large,dynamic,multilevel,large Origin Paper: A Combined Evolutionary Search and Multilevel Optimisation Approach to Graph Partitioning (https://www.notion.so/A-Combined-Evolutionary-Search-and-Multilevel-Optimisation-Approach-to-Graph-Partitioning-d58eded005d14e428a11b9ca02c64eb1?pvs=21), Mesh Partitioning: a Multilevel Balancing and Refinement Algorithm (https://www.notion.so/Mesh-Partitioning-a-Multilevel-Balancing-and-Refinement-Algorithm-97fff4a9a42b469cbd16a74d0a4aa48f?pvs=21) Originally found at: https://chriswalshaw.co.uk/partition/ where C. Walshaw requests to be emailed for the dataset at mailto:c.walshaw@gre.ac.uk. the individual graphs can also be found on the SuiteSparse Matrix Collection under different groups.\nSize: 34 graphs, 2395-448695 nodes, 6837-3314611 edges. Node-weighted, edge-weighted. Partitions of the 34 graphs are given with various partition sizes and imbalance percentages. Child collections: SuiteSparse Matrix Collection (SuiteSparse%20Matrix%20Collection%20b8772d6a2cbb456894b4673e32c6f956.md), Scotch Graph Collection (Scotch%20Graph%20Collection%20cfe6f105da3a4c699fa3e02ca1f6e88a.md) Appeared in years: 2002,2007,2005,2006,2004,2017,2008,2019,2020 Type of Collection: Subset of other collection is it stored properly?: No must be analyzed: Yes In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): Efficient and High Quality Force-Directed Graph Drawing (https://www.notion.so/Efficient-and-High-Quality-Force-Directed-Graph-Drawing-0690316942ef4c97bec1a11b26255410?pvs=21), Drawing graphs by eigenvectors: theory and practice (https://www.notion.so/Drawing-graphs-by-eigenvectors-theory-and-practice-1b5e3919d8c94ad18f29f20c7480b07a?pvs=21), Drawing Large Graphs with a Potential-Field-Based Multilevel Algorithm (https://www.notion.so/Drawing-Large-Graphs-with-a-Potential-Field-Based-Multilevel-Algorithm-27a6b266bb2c4c92976ed04d2afe9bed?pvs=21), ACE: A Fast Multiscale Eigenvectors Computation for Drawing Huge Graphs (https://www.notion.so/ACE-A-Fast-Multiscale-Eigenvectors-Computation-for-Drawing-Huge-Graphs-44f8183954f14ada944d642d9ff1298e?pvs=21), Drawing Big Graphs Using Spectral Sparsification (https://www.notion.so/Drawing-Big-Graphs-Using-Spectral-Sparsification-89da2043d0444f75a6c663b1fc999512?pvs=21), Multi-Level Graph Layout on the GPU (https://www.notion.so/Multi-Level-Graph-Layout-on-the-GPU-916f610d6b534e48a2478e5910bf085e?pvs=21), Drawing Large Graphs with a Potential-Field-Based Multilevel Algorithm (https://www.notion.so/Drawing-Large-Graphs-with-a-Potential-Field-Based-Multilevel-Algorithm-a4fe70c68ad64ed3849c47d95afc8798?pvs=21), SDE: Graph Drawing Using Spectral Distance Embedding (https://www.notion.so/SDE-Graph-Drawing-Using-Spectral-Distance-Embedding-a840905de8674a85a99706d2c17505aa?pvs=21), Multi-level Graph Drawing Using Infomap Clustering (https://www.notion.so/Multi-level-Graph-Drawing-Using-Infomap-Clustering-ad97d205cc804c748ab87d3012b18ebc?pvs=21), Online Dynamic Graph Drawing (https://www.notion.so/Online-Dynamic-Graph-Drawing-ae22e4cc10ec451bb95c2ba6cfc35499?pvs=21), Eigensolver methods for progressive multidimensional scaling of large data (https://www.notion.so/Eigensolver-methods-for-progressive-multidimensional-scaling-of-large-data-b5ab815edb48469192605e5ad31329c0?pvs=21), An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs (https://www.notion.so/An-Experimental-Comparison-of-Fast-Algorithms-for-Drawing-General-Large-Graphs-bbb7bb7d51d84d109030dee3c06d895d?pvs=21), A Multilevel Algorithm for Force-Directed Graph Drawing (https://www.notion.so/A-Multilevel-Algorithm-for-Force-Directed-Graph-Drawing-d1ebfc7319b04b66833d7e71c060d400?pvs=21), Large-Graph Layout with the Fast Multipole Multilevel Method (https://www.notion.so/Large-Graph-Layout-with-the-Fast-Multipole-Multilevel-Method-def1fdc467f441abb94868eccd8a5a34?pvs=21), Topological fisheye views for visualizing large graphs (https://www.notion.so/Topological-fisheye-views-for-visualizing-large-graphs-e2f5c279f5514a6da3a0241c978f564d?pvs=21) cleaned format?: No duplicate?: No link works?: No Added in paper: No Origin paper plaintext: A Combined Evolutionary Search and Multilevel Optimisation Approach to Graph Partitioning, Mesh Partitioning: a Multilevel Balancing and Refinement Algorithm Page id: e40b37a1147942d89ff1d8dfad285256 unavailable/skip: Yes Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: A Multilevel Algorithm for Force-Directed Graph Drawing (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Multilevel%20Algorithm%20for%20Force-Directed%20Graph%20Dr%20234ec1ad86724e0baed5830877d0c70d.md), Multi-Level Graph Layout on the GPU (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Multi-Level%20Graph%20Layout%20on%20the%20GPU%20f855194c9d8a40b8821fafe30add0699.md), ACE: A Fast Multiscale Eigenvectors Computation for Drawing Huge Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/ACE%20A%20Fast%20Multiscale%20Eigenvectors%20Computation%20for%205e8de72ea8d0436babf760ca379cc457.md), Drawing graphs by eigenvectors: theory and practice (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Drawing%20graphs%20by%20eigenvectors%20theory%20and%20practice%2039ccd4aeec6448f8a58d51b986c9d097.md), SDE: Graph Drawing Using Spectral Distance Embedding (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/SDE%20Graph%20Drawing%20Using%20Spectral%20Distance%20Embeddin%208ce58ef9bc5d4e1aa66f2935bf122f92.md), Efficient and High Quality Force-Directed Graph Drawing (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Efficient%20and%20High%20Quality%20Force-Directed%20Graph%20Dr%201e92a86c6b4f4577b1c2c30903173220.md), Large-Graph Layout with the Fast Multipole Multilevel Method (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Large-Graph%20Layout%20with%20the%20Fast%20Multipole%20Multile%20b88c56b7799741ccbbb9d4f05ea8df4b.md), Drawing Large Graphs with a Potential-Field-Based Multilevel Algorithm (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Drawing%20Large%20Graphs%20with%20a%20Potential-Field-Based%20%203c0831d7e44545b0894bb5b8a4aa8f54.md), Drawing Big Graphs Using Spectral Sparsification (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Drawing%20Big%20Graphs%20Using%20Spectral%20Sparsification%20e5d3efdca48541f2b1789ec74357ebf6.md), An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20Experimental%20Comparison%20of%20Fast%20Algorithms%20for%20%20190e5036cf974a879b50614cfff525f1.md), Eigensolver methods for progressive multidimensional scaling of large data (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Eigensolver%20methods%20for%20progressive%20multidimension%20b4b33cff0cf94e8db1fd3dcdab73f9e4.md), Topological fisheye views for visualizing large graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Topological%20fisheye%20views%20for%20visualizing%20large%20gr%2094f9c1efaeed4304bd4c6686d2962159.md), Online Dynamic Graph Drawing (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Online%20Dynamic%20Graph%20Drawing%203c5e54c02d0b473294442f7387ddb03d.md), Multi-level Graph Drawing Using Infomap Clustering (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Multi-level%20Graph%20Drawing%20Using%20Infomap%20Clustering%20eadf3605c6ed46ff93629fb92858fbd4.md), A Random Sampling O(n) Force-calculation Algorithm for Graph Layouts (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Random%20Sampling%20O(n)%20Force-calculation%20Algorithm%2086599a831f314d1cb8871a5a92420d0f.md), Sublinear Time Force Computation for Big Complex Network Visualization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Sublinear%20Time%20Force%20Computation%20for%20Big%20Complex%20N%20999af7d2d1c942628bada6371a87100f.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs”:\n\nThe rest of the test graphs are taken from real-world applications. In particular, we selected graphs from the AT&T graph library [1], from C. Walshaw’s graph collection [20], and a graph that describes a social network of 2113 people that we obtained from C. Lipp.\n\nFrom “A Combined Evolutionary Search and Multilevel Optimisation Approach to Graph-Partitioning”:\n\nThe test graphs have been chosen to be a representative sample of small to medium scale real-life problems (mostly mesh-based) and include both 2D and 3D examples of nodal graphs (where the mesh nodes are partitioned) and dual graphs (where the mesh elements are partitioned). In addition there is a 3D semi-structured graph, cti, which is unstructured in the x−y plane but extended regularly along the z-axis. Finally the test suite includes three non mesh-based graphs (add32, vibrobox, bcsstk32) which arise from various scientific computing applications2. None of the graphs have either vertex or edge weights; such graphs are not widely available since most applications do not accurately instrument costs and it is difficult to draw meaningful conclusions from the few examples that we have access to.\n\n\n\n\nUntitled\n\n\n\n\nExample Figures\nFrom “An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs”:\n\n\n\nUntitled\n\n\nFrom “Multi-Level Graph Layout on the GPU”:\n\n\n\nUntitled\n\n\nFig. 11. 4elt. Red: our layout, black: Kamada-Kawai layout\n\n\nOther\nFrom Group DIMACS10 in the SuiteSparse Matrix Collection:\nChris Walshaw's graph partitioning archive contains 34 graphs that\n    have been very popular as benchmarks for graph partitioning algorithms\n    ( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).\n\n    17 of them are already in the UF Collection.  Only the 17 new graphs\n    not yet in the collection are added here in the DIMACS10 set.\n\nDIMACS10 graph:                 new?   UF matrix:\n    ---------------                 ----   -------------\n    walshaw/144                      *     DIMACS10/144\n    walshaw/3elt                           AG-Monien/3elt\n    walshaw/4elt                           Pothen/barth5\n    walshaw/598a                     *     DIMACS10/598a\n    walshaw/add20                          Hamm/add20\n    walshaw/add32                          Hamm/add32\n    walshaw/auto                     *     DIMACS10/auto\n    walshaw/bcsstk29                       HB/bcsstk29\n    walshaw/bcsstk30                       HB/bcsstk30\n    walshaw/bcsstk31                       HB/bcsstk31\n    walshaw/bcsstk32                       HB/bcsstk32\n    walshaw/bcsstk33                       HB/bcsstk33\n    walshaw/brack2                         AG-Monien/brack2\n    walshaw/crack                          AG-Monient/crack\n    walshaw/cs4                      *     DIMACS10/cs4\n    walshaw/cti                      *     DIMACS10/cti\n    walshaw/data                     *     DIMACS10/data\n    walshaw/fe_4elt2                 *     DIMACS10/fe_4elt2\n    walshaw/fe_body                  *     DIMACS10/fe_body\n    walshaw/fe_ocean                 *     DIMACS10/fe_ocean\n    walshaw/fe_pwt                         Pothen/pwt\n    walshaw/fe_rotor                 *     DIMACS10/fe_rotor\n    walshaw/fe_sphere                *     DIMACS10/fe_sphere\n    walshaw/fe_tooth                 *     DIMACS10/fe_tooth\n    walshaw/finan512                       Mulvey/finan512\n    walshaw/m14b                     *     DIMACS10/m14b\n    walshaw/memplus                        Hamm/memplus\n    walshaw/t60k                     *     DIMACS10/t60k\n    walshaw/uk                       *     DIMACS10/uk\n    walshaw/vibrobox                       Cote/vibrobox\n    walshaw/wave                           AG-Monien/wave\n    walshaw/whitaker3                      AG-Monien/whitaker3\n    walshaw/wing                     *     DIMACS10/wing\n    walshaw/wing_nodal               *     DIMACS10/wing_nodal\n=== STOP RENDERING ===\nMade explicit that they want people to reach out to them for the dataset so we do not collect it. Also in Suite Sparse, and many of the graphs are included in the Scotch graph collection.\nFrom: An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs\n\n\n\nUntitled\n\n\nGraphs found on the Sparse Matrix Collection"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Untitled 3d7ae7d10d5c45b0b91f4c6163fa8bea.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Untitled 3d7ae7d10d5c45b0b91f4c6163fa8bea.html",
    "title": "1 Untitled",
    "section": "",
    "text": "1 Untitled\nis it stored properly?: No must be analyzed: No In repo?: No cleaned format?: No duplicate?: No link works?: No Added in paper: No Page id: 3d7ae7d10d5c45b0b91f4c6163fa8bea unavailable/skip: No Cleaned ALL data: No first look: No"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Transportation Networks 720a658bb1914b51910c480d86943e80.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Transportation Networks 720a658bb1914b51910c480d86943e80.html",
    "title": "1 Transportation Networks",
    "section": "",
    "text": "Note: DIMACS USA Road Network source notes that the data has errors, namely missing major highways and bridges. We currently include only the subway layout networks in our files. graph features handled: directed edges, spatial Graph features in papers: clusters (generated),generic,large,generic,large,spatial,labeled nodes,spatial,compound graphs,directed edges,hierarchical,spatial,weighted edges,generic,spatial,bundled edges (generated),spatial,generic,categorical nodes,generic,topological,trees,weighted edges,octilinear,port constraints,terminals,clusters (pre-existing),generic,large,spatial,clusters (pre-existing),categorical nodes Origin Paper: A Random Sampling O(n) Force-calculation Algorithm for Graph Layouts (https://www.notion.so/A-Random-Sampling-O-n-Force-calculation-Algorithm-for-Graph-Layouts-a0bc2ae6ebdb4e8cbddb924c0484cfad?pvs=21) Originally found at: http://www.diag.uniroma1.it//challenge9/download.shtml https://osf.io/dcz5h Size: 82-433 nodes, 158-950 edges Number of Graphs: 15 Appeared in years: 2008,2013,2011,2016,2009,1998,2019,2020,2018,2022 Type of Collection: Aggregate collection is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): KelpFusion: A Hybrid Set Visualization Technique (https://www.notion.so/KelpFusion-A-Hybrid-Set-Visualization-Technique-145828a44b7a437eb633075383f7cede?pvs=21), TrajGraph: A Graph-Based Visual Analytics Approach to Studying Urban Network Centralities Using Taxi Trajectory Data (https://www.notion.so/TrajGraph-A-Graph-Based-Visual-Analytics-Approach-to-Studying-Urban-Network-Centralities-Using-Taxi-21e339918ee44f5da7703535881936f8?pvs=21), Visualizing the evolution of compound digraphs with TimeArcTrees (https://www.notion.so/Visualizing-the-evolution-of-compound-digraphs-with-TimeArcTrees-2431c9f6f9c5440589c57f9a723b3ac4?pvs=21), Drawing and Labeling High-Quality Metro Maps by Mixed-Integer Programming (https://www.notion.so/Drawing-and-Labeling-High-Quality-Metro-Maps-by-Mixed-Integer-Programming-5a4b255a5dbd4f18a7f88d70212a2eff?pvs=21), A Treemap Based Method for Rapid Layout of Large Graphs (https://www.notion.so/A-Treemap-Based-Method-for-Rapid-Layout-of-Large-Graphs-7d9e14d48d9e452da4fcf8b64b007ea5?pvs=21), Rapid Graph Layout Using Space Filling Curves (https://www.notion.so/Rapid-Graph-Layout-Using-Space-Filling-Curves-847c46047b5c400bb9dcf339c8d42f12?pvs=21), Using Graph Layout to Visualize Train Interconnection Data (https://www.notion.so/Using-Graph-Layout-to-Visualize-Train-Interconnection-Data-b96db45ca8e94e75bf9a65ee15658ebf?pvs=21) cleaned format?: No duplicate?: No link works?: No Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90f1394a6be0ec012e916 Origin paper plaintext: A Random Sampling O(n) Force-calculation Algorithm for Graph Layouts Page id: 720a658bb1914b51910c480d86943e80 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d9498894a6be103212e712 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d94d990c2b4d0e9c386231 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d970f894a6be112a12ea21 first look: No sparkline data: {‘min’: 82, ‘max’: 433, ‘step_size’: 25, ‘num_bins’: 18, ‘bins’: [0, 25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425], ‘num_nodes’: [0, 0, 0, 1, 2, 5, 1, 0, 2, 0, 1, 1, 0, 0, 0, 1, 0, 1]} Related to Literature - Algorithm (Dataset tag relations) 1: A Treemap Based Method for Rapid Layout of Large Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Treemap%20Based%20Method%20for%20Rapid%20Layout%20of%20Large%20G%20f96d2a808a5f4df2a781d9a890e2b266.md), Rapid Graph Layout Using Space Filling Curves (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Rapid%20Graph%20Layout%20Using%20Space%20Filling%20Curves%2010601cd6078a4ea18b17c7d40eda0041.md), KelpFusion: A Hybrid Set Visualization Technique (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/KelpFusion%20A%20Hybrid%20Set%20Visualization%20Technique%2031a567279ecc4c3980caf078144017db.md), Drawing and Labeling High-Quality Metro Maps by Mixed-Integer Programming (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Drawing%20and%20Labeling%20High-Quality%20Metro%20Maps%20by%20Mi%2096459aa8ab3641978c6a93e1bd4447a2.md), TrajGraph: A Graph-Based Visual Analytics Approach to Studying Urban Network Centralities Using Taxi Trajectory Data (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/TrajGraph%20A%20Graph-Based%20Visual%20Analytics%20Approach%20%20a8a60bf2c8d34198b967636b64e97be6.md), Visualizing the evolution of compound digraphs with TimeArcTrees (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Visualizing%20the%20evolution%20of%20compound%20digraphs%20wit%20e3c6f596c3644af2a9be28dd3f7d57c5.md), Using Graph Layout to Visualize Train Interconnection Data (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Using%20Graph%20Layout%20to%20Visualize%20Train%20Interconnect%20d1e747efa23d469496dc7e73249d49d9.md), Route-Aware Edge Bundling for Visualizing Origin-Destination Trails in Urban Traffic (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Route-Aware%20Edge%20Bundling%20for%20Visualizing%20Origin-D%2063f378f25262476cbf983d569ca1af95.md), A Random Sampling O(n) Force-calculation Algorithm for Graph Layouts (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Random%20Sampling%20O(n)%20Force-calculation%20Algorithm%2086599a831f314d1cb8871a5a92420d0f.md), Augmenting Node-Link Diagrams with Topographic Attribute Maps (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Augmenting%20Node-Link%20Diagrams%20with%20Topographic%20Att%205995a73c463c49db8ee966cc9db41ec5.md), Metro Maps on Octilinear Grid Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Metro%20Maps%20on%20Octilinear%20Grid%20Graphs%20a8834ec2af3f40aab051ef1bfb5ddb1a.md), Graph Drawing by Stochastic Gradient Descent (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Graph%20Drawing%20by%20Stochastic%20Gradient%20Descent%20c829549f150044628d68b79584273c19.md), Structure-aware Fisheye Views for Efficient Large Graph Exploration (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Structure-aware%20Fisheye%20Views%20for%20Efficient%20Large%20%20690c77bbfc7647c098c21827e4491457.md), Revisiting Stress Majorization as a Unified Framework for Interactive Constrained Graph Visualization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Revisiting%20Stress%20Majorization%20as%20a%20Unified%20Framew%200765ea891e9e403593025430656f35f3.md), Shape-Guided Mixed Metro Map Layout (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Shape-Guided%20Mixed%20Metro%20Map%20Layout%20e1bb181a68304d8bac8dd8167081c028.md)"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Transportation Networks 720a658bb1914b51910c480d86943e80.html#subways",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Transportation Networks 720a658bb1914b51910c480d86943e80.html#subways",
    "title": "1 Transportation Networks",
    "section": "2.1 Subways",
    "text": "2.1 Subways\n\nStatistics\n\n\n\nfour_in_one.svg\n\n\n\n\nDescription from Literature\n\nApart from the example of Sydney presented in Section 6, we have evaluated our method for two additional real-world networks: Vienna, which is a rather small network, and London, the oldest and still one of the most complex metro systems in the world. These networks have not been used as examples for previous metro map layout methods, so we can compare only against the official maps of Vienna and London. The size of the metro graphs (including Sydney) is given in Table 3 and ranges from 84 vertices and 8 faces (Vienna) to 308 vertices and 55 faces (London). The table further shows how the removal of degree-2 vertices described in Section 5.1 effectively reduces the number of vertices and edges.\n\n\n\n\nUntitled\n\n\n\n\nExample Figures\nFrom “Drawing and Labeling High-Quality Metro Maps by Mixed-Integer Programming”:\n\n\n\nUntitled\n\n\nFig. 16. Unlabeled layout of the London Underground network produced by our method."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Transportation Networks 720a658bb1914b51910c480d86943e80.html#dimacs-usa-road-networks",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Transportation Networks 720a658bb1914b51910c480d86943e80.html#dimacs-usa-road-networks",
    "title": "1 Transportation Networks",
    "section": "2.2 DIMACS USA Road Networks",
    "text": "2.2 DIMACS USA Road Networks\n\nDescription from Literature\nFrom “A Treemap Based Method for Rapid Layout of Large Graphs”:\n\nThe other graphs used in this paper are: a graph of network scans, which is a complete graph with edge weights between 0 and 1, but for clarity, edges with weights less than a certain threshold are not shown (Figures 3 and 4, |V|=878,|E|=385003, [19]), a small artificial graph of a grid topology (Figure 5, |V|=16,|E|=24), a large graph of streets in the San Francisco Bay Area (Figure 7, |V|=321,270,|E|=800,172, [8]).\n\nFrom “Rapid Graph Layout Using Space Filling Curves”:\n\nFinally, the “usafla” dataset (shown in Figure 7) is of the intersections and the streets between them in the state of Florida\n\n\n\nExample Figures\nFrom “A Treemap Based Method for Rapid Layout of Large Graphs”:\n\n\n\nUntitled\n\n\nFig. 7. Scalability. Our approach can scale to very large networks while still maintaining interactivity. |V|=321,270,|E|=800,172\nFrom “Rapid Graph Layout Using Space Filling Curves”:\n\n\n\nUntitled\n\n\nFig. 7. Scalability. Our approach can scale to large graphs. This graph is of the streets in the state of Florida, |V| = 1,070,376,|E| = 2,712,798 One small region is expanded to show detail.\n=== STOP RENDERING ===\nhttp://www.diag.uniroma1.it//challenge9/download.shtml"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956.html",
    "title": "1 SuiteSparse Matrix Collection",
    "section": "",
    "text": "1 SuiteSparse Matrix Collection\nNote: All graphs in SuitSparse belong to groups which will have more information about the graphs and the sub-collections they belong to. In our Descriptions from the Literature section we also highlight a few tables with the specific graphs used in a couple of papers. Origin Notes: From “The university of Florida Sparse Matrix Collection”, Davis and Hu describe the origin of this network repository. Namely they cite the Harwell-Boeing collection as the starting point for SuiteSparse, then called the University of Florida (UF) Sparse matrix collection, back in 1991. Other groups, or collections, have then been added to SuitseSparse through the years, mainly focusing on real-world matrices and other relevant problems related to them. graph features handled: bipartite, categorical nodes, dense, directed edges, dynamic, edge weighted, generic, hierarchical, large, mesh, multigraph, node weighted, sparse, spatial, temporal Graph features in papers: generic,large,weighted edges,generic,large,multilevel,clusters (generated),generic,planar,spatial,almost proximity drawable graphs,mesh graphs,scale-free graphs,strong proximity drawable graphs,weak proximity drawable graphs Origin Paper: The University of Florida Sparse Matrix Collection (https://www.notion.so/The-University-of-Florida-Sparse-Matrix-Collection-b861824a77d94175af99b7b367768cb3?pvs=21) Originally found at: https://sparse.tamu.edu/ Size: 2893 Child collections: Walshaw (Walshaw%20e40b37a1147942d89ff1d8dfad285256.md), Pajek (Pajek%20e323e05a735d4151a0bccfec08aa3bd6.md) Appeared in years: 2013,2016,2017,2019,2020,2021,2023 Type of Collection: Established Network Repo (No report) is it stored properly?: No must be analyzed: Yes In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): Graph Layouts by t-SNE (https://www.notion.so/Graph-Layouts-by-t-SNE-6adb46473eb2415294b0d797ad86b077?pvs=21), Drawing Big Graphs Using Spectral Sparsification (https://www.notion.so/Drawing-Big-Graphs-Using-Spectral-Sparsification-89da2043d0444f75a6c663b1fc999512?pvs=21), A Maxent-Stress Model for Graph Layout (https://www.notion.so/A-Maxent-Stress-Model-for-Graph-Layout-8da4fc24a7c7438c9d10c3113841b7fd?pvs=21), Multi-level Graph Drawing Using Infomap Clustering (https://www.notion.so/Multi-level-Graph-Drawing-Using-Infomap-Clustering-ad97d205cc804c748ab87d3012b18ebc?pvs=21), A Sparse Stress Model (https://www.notion.so/A-Sparse-Stress-Model-ba603193aa4c49a8a55e1d23068def6f?pvs=21), Stochastic Gradient Descent Works Really Well for Stress Minimization (https://www.notion.so/Stochastic-Gradient-Descent-Works-Really-Well-for-Stress-Minimization-e1cb81e542004fdf848c5a303e9e43e5?pvs=21) cleaned format?: No duplicate?: No link works?: No Added in paper: No Origin paper plaintext: The University of Florida Sparse Matrix Collection Page id: b8772d6a2cbb456894b4673e32c6f956 unavailable/skip: Yes Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: A Maxent-Stress Model for Graph Layout (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Maxent-Stress%20Model%20for%20Graph%20Layout%2000c097ef77dd46d6a2df74869581a5c9.md), A Sparse Stress Model (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Sparse%20Stress%20Model%2096e7e209fadc468f9156cb44d0c8e59b.md), Drawing Big Graphs Using Spectral Sparsification (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Drawing%20Big%20Graphs%20Using%20Spectral%20Sparsification%20e5d3efdca48541f2b1789ec74357ebf6.md), Multi-level Graph Drawing Using Infomap Clustering (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Multi-level%20Graph%20Drawing%20Using%20Infomap%20Clustering%20eadf3605c6ed46ff93629fb92858fbd4.md), Stochastic Gradient Descent Works Really Well for Stress Minimization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Stochastic%20Gradient%20Descent%20Works%20Really%20Well%20for%20%20af084ad735564f1da5f20c16773572d0.md), Graph Layouts by t-SNE (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Graph%20Layouts%20by%20t-SNE%203af4ccbc89b547a38748745511744997.md), Graph Drawing by Stochastic Gradient Descent (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Graph%20Drawing%20by%20Stochastic%20Gradient%20Descent%20c829549f150044628d68b79584273c19.md), DRGraph: An Efficient Graph Layout Algorithm for Large-scale Graphs by Dimensionality Reduction (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/DRGraph%20An%20Efficient%20Graph%20Layout%20Algorithm%20for%20La%203e38c2bb01724b70be45cb8d19695051.md), Force-Directed Graph Layouts Revisited: A New Force Based on the T-Distribution (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Force-Directed%20Graph%20Layouts%20Revisited%20A%20New%20Force%208c79f21b6f2a41fca20311b3ba1ab644.md), Spherical Graph Drawing by Multi-dimensional Scaling (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Spherical%20Graph%20Drawing%20by%20Multi-dimensional%20Scali%20f12cabb0ee2d48d398492f62af07404b.md), Shape-Faithful Graph Drawings (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Shape-Faithful%20Graph%20Drawings%209551555e517f400ea733e3e3c56c8686.md)\n\n\n2 Body\n\nDescriptions From Literature\nFrom “A Sparse Stress Model”:\n\nWe conducted our experiments on a series of different graphs, see Tab. 1, most of them taken from the sparse matrix collection [9]. We selected these graphs as they differ in their structure and size, and are large enough to compare the results of different techniques. Two of the graphs, LeHavre and commanche, have predefined edge lengths that were derived from the node coordinates. We did not modify the graphs in any way, except for those that were disconnected, in which case we only kept the largest component.\n\n\n\n\nUntitled\n\n\nFrom “A Maxent-Stress Model for Graph Layout”:\n\nWith the exception of graph gd, which is an author collaboration graph of the International Symposium on Graph Drawing between 1994 and 2007, the graphs used are from the University of Florida Sparse Matrix Collection [9]. Our selection covers a range of graph sizes, and includes mesh-like and other nonmesh graphs, and graphs from Brandes and Pich’s experimental study of distance scaling [5].\n\n\n\n\nUntitled\n\n\nTable 2. Test Graphs\nFrom “DRGraph: An Efficient Graph Layout Algorithm for Large-scale Graphs by Dimensionality Reduction”:\n\nWe perform experiments on a broad range of datasets selected from the University of Florida Sparse Matrix Collection [10] and tsNET [34] (Table 1).\n\n\n\n\nUntitled\n\n\nTable 1. Test Datasets\n\n\nExample Figures\nFrom “The university of Florida sparse matrix collection”:\n\n\n\nUntitled\n\n\nFig. 13. A sample of matrices from the Collection, for the purpose of illustrating the complexity and diversity of matrices arising in real applications\nFrom “DRGraph: An Efficient Graph Layout Algorithm for Large-scale Graphs by Dimensionality Reduction”:\n\n\n\nUntitled\n\n\nFig. 8. Visualizations of selected graph datasets using FR, KK, S.M., FM3, SFDP, PMDS, tsNET and DRGraph.\n=== STOP RENDERING ===\nit was originally named “University of Florida Sparse Matrix collection”\nChildren of SuiteSparse Matrix collection\nDavis, T.A., Hu, Y.: The University of Florida sparse matrix collection. ACM\nTrans. Math. Softw. 38(1), 1 (2011). https://doi.org/10.1145/2049662.2049663"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Zhao 435e122238614776bafb4e4dee00a882.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Zhao 435e122238614776bafb4e4dee00a882.html",
    "title": "1 Zhao",
    "section": "",
    "text": "1 Zhao\nKind: Electromagnetics Problem Max Nonzeros: 166453 Number of Graphs: 2 Number of Nodes (Median): 33861 Number of Nodes (Range): 33861"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/YZhou 0480ecc59155456b90809e316683a074.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/YZhou 0480ecc59155456b90809e316683a074.html",
    "title": "1 YZhou",
    "section": "",
    "text": "1 YZhou\nKind: Circuit Simulation Problem Max Nonzeros: 5883 Number of Graphs: 1 Number of Nodes (Median): 1020 Number of Nodes (Range): 1020"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/YCheng c669593b5e1c4ceabe9535b7c8306352.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/YCheng c669593b5e1c4ceabe9535b7c8306352.html",
    "title": "1 YCheng",
    "section": "",
    "text": "1 YCheng\nKind: Power Network Problem Max Nonzeros: 115262 Number of Graphs: 3 Number of Nodes (Median): 26722 Number of Nodes (Range): 14318 - 28634"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Williams d58cdc9f98c44397b6396f0fd28b7efe.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Williams d58cdc9f98c44397b6396f0fd28b7efe.html",
    "title": "1 Williams",
    "section": "",
    "text": "1 Williams\nKind: 2D/3D Problem, Economic Problem, Weighted Directed Graph, Weighted Undirected Graph Max Nonzeros: 6010480 Number of Graphs: 7 Number of Nodes (Median): 121192 Number of Nodes (Range): 36417 - 1000005"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Wang 4ea8127bd9744cee85e1c6d4addd495f.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Wang 4ea8127bd9744cee85e1c6d4addd495f.html",
    "title": "1 Wang",
    "section": "",
    "text": "1 Wang\nKind: Semiconductor Device Problem, Semiconductor Device Problem Sequence, Subsequent Semiconductor Device Problem Max Nonzeros: 177196 Number of Graphs: 6 Number of Nodes (Median): 3169 Number of Nodes (Range): 2903 - 26068"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/VDOL 7e8bf1c1ddea4cf8989656756f516717.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/VDOL 7e8bf1c1ddea4cf8989656756f516717.html",
    "title": "1 VDOL",
    "section": "",
    "text": "1 VDOL\nKind: Optimal Control Problem Max Nonzeros: 224897 Number of Graphs: 91 Number of Nodes (Median): 2513 Number of Nodes (Range): 99 - 18476"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/VanVelzen e2c31754272f472893b5c80df08aba50.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/VanVelzen e2c31754272f472893b5c80df08aba50.html",
    "title": "1 VanVelzen",
    "section": "",
    "text": "1 VanVelzen\nKind: Chemical Process Simulation Problem Max Nonzeros: 1915726 Number of Graphs: 10 Number of Nodes (Median): 22835 Number of Nodes (Range): 21982 - 22835"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/UTEP 16754d13bd314cceb50e6e1fbea48f39.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/UTEP 16754d13bd314cceb50e6e1fbea48f39.html",
    "title": "1 UTEP",
    "section": "",
    "text": "1 UTEP\nKind: 2D/3D Problem Max Nonzeros: 3636643 Number of Graphs: 3 Number of Nodes (Median): 65025 Number of Nodes (Range): 16129 - 146689"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Untitled 6b9f78d7dffb459bb60b819061df8654.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Untitled 6b9f78d7dffb459bb60b819061df8654.html",
    "title": "1 Untitled",
    "section": "",
    "text": "1 Untitled"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Um f8ee7b72c1fc45d3a0bf7ce6b9da41b8.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Um f8ee7b72c1fc45d3a0bf7ce6b9da41b8.html",
    "title": "1 Um",
    "section": "",
    "text": "1 Um\nKind: Electromagnetics Problem Max Nonzeros: 4242673 Number of Graphs: 2 Number of Nodes (Median): 180640.5 Number of Nodes (Range): 101492 - 259789"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Tromble 37989e31ae6d4f859cac0f3d7caff0be.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Tromble 37989e31ae6d4f859cac0f3d7caff0be.html",
    "title": "1 Tromble",
    "section": "",
    "text": "1 Tromble\nKind: Directed Weighted Graph Max Nonzeros: 1216334 Number of Graphs: 1 Number of Nodes (Median): 399130 Number of Nodes (Range): 399130"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/TOKAMAK a21b1e2083bb4486a59105ac62175c2c.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/TOKAMAK a21b1e2083bb4486a59105ac62175c2c.html",
    "title": "1 TOKAMAK",
    "section": "",
    "text": "1 TOKAMAK\nKind: Electromagnetics Problem Max Nonzeros: 83842 Number of Graphs: 4 Number of Nodes (Median): 2380 Number of Nodes (Range): 300 - 5940"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/TAMU_SmartGridCenter d2fb4be68eef455aa468326719451c78.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/TAMU_SmartGridCenter d2fb4be68eef455aa468326719451c78.html",
    "title": "1 TAMU_SmartGridCenter",
    "section": "",
    "text": "1 TAMU_SmartGridCenter\nKind: Power Network Problem Max Nonzeros: 238627 Number of Graphs: 3 Number of Nodes (Median): 20000 Number of Nodes (Range): 4000 - 69999"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Sybrandt 2e11761d2b5e47ed99908ec44121a646.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Sybrandt 2e11761d2b5e47ed99908ec44121a646.html",
    "title": "1 Sybrandt",
    "section": "",
    "text": "1 Sybrandt\nKind: Undirected Graph, Undirected Weighted Graph Max Nonzeros: 11588725964 Number of Graphs: 2 Number of Nodes (Median): 107101882 Number of Nodes (Range): 30239687 - 183964077"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Stevenson c1db7c649b624c2988091c0b0065f9fd.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Stevenson c1db7c649b624c2988091c0b0065f9fd.html",
    "title": "1 Stevenson",
    "section": "",
    "text": "1 Stevenson\nKind: Circuit Simulation Problem Max Nonzeros: 4944201 Number of Graphs: 1 Number of Nodes (Median): 2111154 Number of Nodes (Range): 2111154"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Sorensen 1fc25c64a1c64755819c4e7219a75b8a.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Sorensen 1fc25c64a1c64755819c4e7219a75b8a.html",
    "title": "1 Sorensen",
    "section": "",
    "text": "1 Sorensen\nKind: Directed Weighted Graph Max Nonzeros: 1208908 Number of Graphs: 1 Number of Nodes (Median): 324085 Number of Nodes (Range): 324085"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Sinclair 297b2e9ec6a147f9ae98b059f97d3196.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Sinclair 297b2e9ec6a147f9ae98b059f97d3196.html",
    "title": "1 Sinclair",
    "section": "",
    "text": "1 Sinclair\nKind: Materials Problem Max Nonzeros: 30290827 Number of Graphs: 2 Number of Nodes (Median): 486475.5 Number of Nodes (Range): 292008 - 680943"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Shyy bdee8e2dee1940c8a6a310108083c90a.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Shyy bdee8e2dee1940c8a6a310108083c90a.html",
    "title": "1 Shyy",
    "section": "",
    "text": "1 Shyy\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 329762 Number of Graphs: 2 Number of Nodes (Median): 40600 Number of Nodes (Range): 4720 - 76480"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Schulthess 4eb84f238ba846b19f4dde85d0e7fe31.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Schulthess 4eb84f238ba846b19f4dde85d0e7fe31.html",
    "title": "1 Schulthess",
    "section": "",
    "text": "1 Schulthess\nKind: Biochemical Network Max Nonzeros: 43816 Number of Graphs: 3 Number of Nodes (Median): 3923 Number of Nodes (Range): 1996 - 16559"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Schenk_ISEI 2948ce705d854604b4c29b7a19bd11c6.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Schenk_ISEI 2948ce705d854604b4c29b7a19bd11c6.html",
    "title": "1 Schenk_ISEI",
    "section": "",
    "text": "1 Schenk_ISEI\nKind: Semiconductor Device Problem, Semiconductor Device Problem Sequence, Subsequent Semiconductor Device Problem Max Nonzeros: 6869939 Number of Graphs: 18 Number of Nodes (Median): 115625 Number of Nodes (Range): 10938 - 181343"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Schenk_IBMNA 0759a0bbae2b4c8781b58339ac49e8ff.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Schenk_IBMNA 0759a0bbae2b4c8781b58339ac49e8ff.html",
    "title": "1 Schenk_IBMNA",
    "section": "",
    "text": "1 Schenk_IBMNA\nKind: Optimization Problem, Optimization Problem Sequence, Subsequent Optimization Problem Max Nonzeros: 2340859 Number of Graphs: 52 Number of Nodes (Median): 10926.5 Number of Nodes (Range): 2169 - 345241"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Schenk 5010874ba2ac464fa0ef1e533bd7593e.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Schenk 5010874ba2ac464fa0ef1e533bd7593e.html",
    "title": "1 Schenk",
    "section": "",
    "text": "1 Schenk\nKind: Optimization Problem Max Nonzeros: 760648352 Number of Graphs: 5 Number of Nodes (Median): 8345600 Number of Nodes (Range): 1062400 - 27993600"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Sandia 2a65585cbefd4e878200840ba5cd73ad.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Sandia 2a65585cbefd4e878200840ba5cd73ad.html",
    "title": "1 Sandia",
    "section": "",
    "text": "1 Sandia\nKind: Circuit Simulation Problem, Circuit Simulation Problem Sequence, Subsequent Circuit Simulation Problem Max Nonzeros: 2638997 Number of Graphs: 192 Number of Nodes (Median): 1220 Number of Nodes (Range): 430 - 682862\nCircuit simulation matrices from Sandia National Laboratory."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Rucci dd4d96400a034738920a4869c48e8c6a.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Rucci dd4d96400a034738920a4869c48e8c6a.html",
    "title": "1 Rucci",
    "section": "",
    "text": "1 Rucci\nKind: Least Squares Problem Max Nonzeros: 7791168 Number of Graphs: 1 Number of Nodes (Median): 1977885 Number of Nodes (Range): 1977885"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Rost ca4d8825be264ba8a32b523dcaee0dc1.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Rost ca4d8825be264ba8a32b523dcaee0dc1.html",
    "title": "1 Rost",
    "section": "",
    "text": "1 Rost\nKind: Semiconductor Device Problem Max Nonzeros: 365580 Number of Graphs: 1 Number of Nodes (Median): 74104 Number of Nodes (Range): 74104"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Rommes 4950c44aff584ba98b32e1b9d199a8f1.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Rommes 4950c44aff584ba98b32e1b9d199a8f1.html",
    "title": "1 Rommes",
    "section": "",
    "text": "1 Rommes\nKind: Eigenvalue/Model Reduction Problem Max Nonzeros: 145019 Number of Graphs: 35 Number of Nodes (Median): 7135 Number of Nodes (Range): 66 - 40366"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Rajat ba9c94a6953943979d7d60fd23b7bdcd.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Rajat ba9c94a6953943979d7d60fd23b7bdcd.html",
    "title": "1 Rajat",
    "section": "",
    "text": "1 Rajat\nKind: Circuit Simulation Problem Max Nonzeros: 20316253 Number of Graphs: 32 Number of Nodes (Median): 33731.5 Number of Nodes (Range): 135 - 4690002"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Quaglino fefc77f06e7a41f7bffe4d90ebc0789e.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Quaglino fefc77f06e7a41f7bffe4d90ebc0789e.html",
    "title": "1 Quaglino",
    "section": "",
    "text": "1 Quaglino\nKind: Materials Problem Max Nonzeros: 381326 Number of Graphs: 2 Number of Nodes (Median): 18547.5 Number of Nodes (Range): 4326 - 32769"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/QCD 6025fa8e3d874923a0b5d24a4caeb06b.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/QCD 6025fa8e3d874923a0b5d24a4caeb06b.html",
    "title": "1 QCD",
    "section": "",
    "text": "1 QCD\nKind: Theoretical/Quantum Chemistry Problem Max Nonzeros: 1916928 Number of Graphs: 14 Number of Nodes (Median): 26112 Number of Nodes (Range): 3072 - 49152"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Puri 754862720bce450f894991037bf15b12.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Puri 754862720bce450f894991037bf15b12.html",
    "title": "1 Puri",
    "section": "",
    "text": "1 Puri\nKind: Model Reduction Problem Max Nonzeros: 218484 Number of Graphs: 4 Number of Nodes (Median): 23412 Number of Nodes (Range): 23412"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Precima 52a58b8bf2b84558bfdcd61df37be545.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Precima 52a58b8bf2b84558bfdcd61df37be545.html",
    "title": "1 Precima",
    "section": "",
    "text": "1 Precima\nKind: Data Analytics Problem Max Nonzeros: 2006126 Number of Graphs: 1 Number of Nodes (Median): 303813 Number of Nodes (Range): 303813"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Pothen ada6a29d06864c159254d1665f695576.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Pothen ada6a29d06864c159254d1665f695576.html",
    "title": "1 Pothen",
    "section": "",
    "text": "1 Pothen\nKind: Structural Problem Max Nonzeros: 460493 Number of Graphs: 22 Number of Nodes (Median): 7305.5 Number of Nodes (Range): 48 - 94069"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Pereyra 069575485ed04541880df6945a4bfa52.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Pereyra 069575485ed04541880df6945a4bfa52.html",
    "title": "1 Pereyra",
    "section": "",
    "text": "1 Pereyra\nKind: Least Squares Problem Max Nonzeros: 1146848 Number of Graphs: 1 Number of Nodes (Median): 71952 Number of Nodes (Range): 71952"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Pajek f262dd72b88649928fd5e073da62971b.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Pajek f262dd72b88649928fd5e073da62971b.html",
    "title": "1 Pajek",
    "section": "",
    "text": "1 Pajek\nKind: Bipartite Graph, Directed Graph, Directed Multigraph, Directed Weighted Graph, Undirected Graph, Undirected Multigraph, Undirected Weighted Graph, Undirected Weighted Graph Sequence, Weighted Bipartite Graph Max Nonzeros: 14970767 Number of Graphs: 76 Number of Nodes (Median): 462 Number of Nodes (Range): 10 - 3774768\n================================================================================\nSummary:\n================================================================================\n\nCSphd:      PhD's in computer science\n        1882-by-1882 with 1740 nonzeros\n        kind: directed graph with auxiliary node data\n\nCalifornia: Kleinberg's web search of \"California\"\n        9664-by-9664 with 16150 nonzeros\n        kind: directed graph\n\nCities:     www.lboro.ac.uk/gawc, data set 6\n        55-by-46 with 1342 nonzeros\n        kind: weighted bipartite graph with auxiliary node data\n\nEAT_RS:     Edinburgh Associative Thesaurus (response-stimulus)\n        23219-by-23219 with 325592 nonzeros\n        kind: directed weighted graph\n\nEAT_SR:     Edinburgh Associative Thesaurus (stimulus-response)\n        23219-by-23219 with 325589 nonzeros\n        kind: directed weighted graph\n\nEPA:        Kleinberg, pages linking to www.epa.gov\n        4772-by-4772 with 8965 nonzeros\n        kind: directed graph\n\nEVA:        EVA, corporate inter-relationships\n        8497-by-8497 with 6726 nonzeros\n        kind: directed graph\n\nErdos02:    Erdos collaboration network\n        6927-by-6927 with 16944 nonzeros\n        kind: undirected graph\n\nErdos971:   Erdos collaboration network\n        472-by-472 with 2628 nonzeros\n        kind: undirected graph\n\nErdos972:   Erdos collaboration network\n        5488-by-5488 with 14170 nonzeros\n        kind: undirected graph with auxiliary node data\n\nErdos981:   Erdos collaboration network\n        485-by-485 with 2762 nonzeros\n        kind: undirected graph\n\nErdos982:   Erdos collaboration network\n        5822-by-5822 with 14750 nonzeros\n        kind: undirected graph with auxiliary node data\n\nErdos991:   Erdos collaboration network\n        492-by-492 with 2834 nonzeros\n        kind: undirected graph\n\nErdos992:   Erdos collaboration network\n        6100-by-6100 with 15030 nonzeros\n        kind: undirected graph with auxiliary node data\n\nFA:     USF Free (word) Association Norms\n        10617-by-10617 with 72176 nonzeros\n        kind: directed weighted graph with auxiliary node data\n\nGD00_a:     Graph Drawing contest 2000\n        352-by-352 with 458 nonzeros\n        kind: directed graph\n\nGD00_c:     Graph Drawing contest 2000\n        638-by-638 with 1041 nonzeros\n        kind: directed multigraph\n\nGD01_A:     Graph Drawing contest 2001\n        953-by-953 with 645 nonzeros\n        kind: directed multigraph\n\nGD01_a:     Graph Drawing contest 2000\n        311-by-311 with 645 nonzeros\n        kind: directed weighted graph\n\nGD01_b:     Graph Drawing contest 2001\n        18-by-18 with 37 nonzeros\n        kind: directed graph\n\nGD01_c:     Graph Drawing contest 2001\n        33-by-33 with 135 nonzeros\n        kind: directed multigraph with auxiliary node data\n\nGD02_a:     Graph Drawing contest 2002\n        23-by-23 with 87 nonzeros\n        kind: directed graph\n\nGD02_b:     Graph Drawing contest 2002\n        80-by-80 with 232 nonzeros\n        kind: directed graph\n\nGD06_Java:  Graph Drawing contest 2006\n        1538-by-1538 with 8032 nonzeros\n        kind: directed graph\n\nGD06_theory:    Graph Drawing contest 2006\n        101-by-101 with 380 nonzeros\n        kind: undirected graph\n\nGD95_a:     Graph Drawing contest 1995\n        36-by-36 with 57 nonzeros\n        kind: directed graph\n\nGD95_b:     Graph Drawing contest 1995\n        73-by-73 with 96 nonzeros\n        kind: directed graph\n\nGD95_c:     Graph Drawing contest 1995\n        62-by-62 with 287 nonzeros\n        kind: directed graph\n\nGD96_a:     Graph Drawing contest 1996\n        1096-by-1096 with 1677 nonzeros\n        kind: directed multigraph\n\nGD96_b:     Graph Drawing contest 1996\n        111-by-111 with 193 nonzeros\n        kind: directed graph\n\nGD96_c:     Graph Drawing contest 1996\n        65-by-65 with 250 nonzeros\n        kind: undirected graph\n\nGD96_d:     Graph Drawing contest 1996\n        180-by-180 with 229 nonzeros\n        kind: directed graph\n\nGD97_a:     Graph Drawing contest 1997\n        84-by-84 with 332 nonzeros\n        kind: directed graph\n\nGD97_b:     Graph Drawing contest 1997\n        47-by-47 with 264 nonzeros\n        kind: undirected weighted graph\n\nGD97_c:     Graph Drawing contest 1997\n        452-by-452 with 460 nonzeros\n        kind: directed multigraph\n\nGD98_a:     Graph Drawing contest 1998\n        38-by-38 with 50 nonzeros\n        kind: directed graph\n\nGD98_b:     Graph Drawing contest 1998\n        121-by-121 with 207 nonzeros\n        kind: directed graph\n\nGD98_c:     Graph Drawing contest 1998\n        112-by-112 with 336 nonzeros\n        kind: undirected graph\n\nGD99_b:     Graph Drawing contest 1999\n        64-by-64 with 252 nonzeros\n        kind: undirected multigraph\n\nGD99_c:     Graph Drawing contest 1999\n        105-by-105 with 149 nonzeros\n        kind: directed graph with auxiliary node data\n\nGlossGT:    graph and digraph glossary\n        72-by-72 with 122 nonzeros\n        kind: directed graph\n\nHEP-th-new: High Energy Physics literature\n        27770-by-27770 with 352807 nonzeros\n        kind: directed graph with auxiliary node data\n\nHEP-th:     High Energy Physics literature\n        27240-by-27240 with 342437 nonzeros\n        kind: directed graph\n\nIMDB:       IMDB movie/actor network, www.imdb.com\n        428440-by-896308 with 3782463 nonzeros\n        kind: bipartite graph with auxiliary node data\n\nJournals:   Slovenian journals 1999-2000\n        124-by-124 with 12068 nonzeros\n        kind: undirected weighted graph with auxiliary node data\n\nKohonen:    Kohonen citation network\n        4470-by-4470 with 12731 nonzeros\n        kind: directed graph with auxiliary node data\n\nLederberg:  Lederberg citation network\n        8843-by-8843 with 41601 nonzeros\n        kind: directed multigraph with auxiliary node data\n\nNotreDame_actors:   Barabasi's actor network (of www.imdb.com)\n        392400-by-127823 with 1470404 nonzeros\n        kind: bipartite multigraph\n\nNotreDame_www:  Barabasi's web page network of nd.edu\n        325729-by-325729 with 929849 nonzeros\n        kind: directed graph\n\nNotreDame_yeast:    Barabasi's yeast protein interaction\n        2114-by-2114 with 4480 nonzeros\n        kind: undirected graph\n\nODLIS:      online dictionary of library & inf. sci\n        2909-by-2909 with 18246 nonzeros\n        kind: directed multigraph\n\nRagusa16:   Ragusa set\n        24-by-24 with 81 nonzeros\n        kind: directed weighted graph\n\nRagusa18:   Ragusa set\n        23-by-23 with 64 nonzeros\n        kind: directed weighted graph\n\nReuters911: Reuters news, Sept 11 to Nov 15, 2001\n        13332-by-13332 with 296076 nonzeros\n        kind: temporal undirected weighted graph\n\nRoget:      Roget's Thesaurus, 1879\n        1022-by-1022 with 5075 nonzeros\n        kind: directed graph\n\nSandi_authors:  Klavzar bibliography\n        86-by-86 with 248 nonzeros\n        kind: undirected weighted graph\n\nSandi_sandi:    Klavzar bibliography\n        314-by-360 with 613 nonzeros\n        kind: bipartite graph\n\nSciMet:     SciMet citation network\n        3084-by-3084 with 10413 nonzeros\n        kind: directed multigraph with auxiliary node data\n\nSmaGri:     SmaGri citation network\n        1059-by-1059 with 4919 nonzeros\n        kind: directed multigraph with auxiliary node data\n\nSmallW:     SmallW citation network\n        396-by-396 with 994 nonzeros\n        kind: directed multigraph with auxiliary node data\n\nStranke94:  Slovene Parliamentary Parties 1994\n        10-by-10 with 90 nonzeros\n        kind: undirected weighted graph\n\nTina_AskCal:    student govt, Univ. Ljubljana, 1992 (ask opin., recall)\n        11-by-11 with 29 nonzeros\n        kind: directed graph\n\nTina_AskCog:    student govt, Univ. Ljubljana, 1992 (ask, recognized)\n        11-by-11 with 36 nonzeros\n        kind: directed graph\n\nTina_DisCal:    student govt, Univ. Ljubljana, 1992 (discuss, recall)\n        11-by-11 with 41 nonzeros\n        kind: directed graph\n\nTina_DisCog:    student govt, Univ. Ljubljana, 1992 (discuss, recog.)\n        11-by-11 with 48 nonzeros\n        kind: directed graph\n\nUSAir97:    US Air flights, 1997\n        332-by-332 with 4252 nonzeros\n        kind: undirected weighted graph\n\nUSpowerGrid:    US power grid\n        4941-by-4941 with 13188 nonzeros\n        kind: undirected multigraph\n\nWordnet3:   Wordnet3 dictionary network\n        82670-by-82670 with 132964 nonzeros\n        kind: directed weighted graph with auxiliary node data\n\nWorldCities:    world city network\n        315-by-100 with 7518 nonzeros\n        kind: weighted bipartite graph with auxiliary node data\n\nZewail:     Zewail citation network\n        6752-by-6752 with 54233 nonzeros\n        kind: directed multigraph with auxiliary node data\n\ndictionary28:   dictionary\n        52652-by-52652 with 178076 nonzeros\n        kind: undirected graph\n\ndivorce:    divorce laws in the 50 US states\n        50-by-9 with 225 nonzeros\n        kind: bipartite graph\n\nfoldoc:     free on-line dictionary of computing\n        13356-by-13356 with 120238 nonzeros\n        kind: directed weighted graph\n\nfootball:   World Soccer, Paris 1998\n        35-by-35 with 118 nonzeros\n        kind: directed weighted graph\n\ngeom:       collaboration in computational geometry\n        7343-by-7343 with 23796 nonzeros\n        kind: undirected weighted graph\n\ninternet:   connectivity of internet routers\n        124651-by-124651 with 207214 nonzeros\n        kind: directed weighted graph\n\npatents:    NBER US Patent Citations, 1963-1999, cites 1975-1999\n        3774768-by-3774768 with 14970767 nonzeros\n        kind: directed graph with auxiliary node data\n\npatents_main:   main NBER US Patent Citations, 1963-1999, cites 1975-1999\n        240547-by-240547 with 560943 nonzeros\n        kind: directed weighted graph with auxiliary node data\n\nyeast:      yeast protein interaction network\n        2361-by-2361 with 13828 nonzeros\n        kind: undirected graph with auxiliary node data"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Oberwolfach febdb565c4cf470cbb064329694b6e1f.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Oberwolfach febdb565c4cf470cbb064329694b6e1f.html",
    "title": "1 Oberwolfach",
    "section": "",
    "text": "1 Oberwolfach\nKind: Duplicate Model Reduction Problem, Model Reduction Problem Max Nonzeros: 47851783 Number of Graphs: 38 Number of Nodes (Median): 17361 Number of Nodes (Range): 14 - 986703"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Norris ca097e1b84624141a0d5d83cbcfcde8b.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Norris ca097e1b84624141a0d5d83cbcfcde8b.html",
    "title": "1 Norris",
    "section": "",
    "text": "1 Norris\nKind: 2D/3D Problem, Computational Fluid Dynamics Problem Max Nonzeros: 8516500 Number of Graphs: 12 Number of Nodes (Median): 9801 Number of Nodes (Range): 1650 - 259156"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Nemeth 0cd3a71bfde548efb4d58baf5218acf5.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Nemeth 0cd3a71bfde548efb4d58baf5218acf5.html",
    "title": "1 Nemeth",
    "section": "",
    "text": "1 Nemeth\nKind: Subsequent Theoretical/Quantum Chemistry Problem, Theoretical/Quantum Chemistry Problem Sequence Max Nonzeros: 1511760 Number of Graphs: 26 Number of Nodes (Median): 9506 Number of Nodes (Range): 9506"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/ND fdda2a16dc44481194a72a262ffa6b5a.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/ND fdda2a16dc44481194a72a262ffa6b5a.html",
    "title": "1 ND",
    "section": "",
    "text": "1 ND\nKind: 2D/3D Problem Max Nonzeros: 28715634 Number of Graphs: 4 Number of Nodes (Median): 27000 Number of Nodes (Range): 9000 - 72000"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Mycielski 9115457baf4b49a48a8bae4f71b178b1.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Mycielski 9115457baf4b49a48a8bae4f71b178b1.html",
    "title": "1 Mycielski",
    "section": "",
    "text": "1 Mycielski\nKind: Undirected Graph Max Nonzeros: 2710370560 Number of Graphs: 19 Number of Nodes (Median): 1535 Number of Nodes (Range): 2 - 786431"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Muite 9524f09a4d4d4f678740399faeb07e6d.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Muite 9524f09a4d4d4f678740399faeb07e6d.html",
    "title": "1 Muite",
    "section": "",
    "text": "1 Muite\nKind: Structural Problem Max Nonzeros: 5377761 Number of Graphs: 4 Number of Nodes (Median): 3077 Number of Nodes (Range): 261 - 68121"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Moqri 7c8808b7721c412f9264bcd630b22e1d.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Moqri 7c8808b7721c412f9264bcd630b22e1d.html",
    "title": "1 Moqri",
    "section": "",
    "text": "1 Moqri\nKind: Undirected Weighted Graph Max Nonzeros: 57022 Number of Graphs: 1 Number of Nodes (Median): 2427 Number of Nodes (Range): 2427"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/MKS c1459b90eb8b468e97f7deddc65a12bb.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/MKS c1459b90eb8b468e97f7deddc65a12bb.html",
    "title": "1 MKS",
    "section": "",
    "text": "1 MKS\nKind: Electromagnetics Problem Max Nonzeros: 834222 Number of Graphs: 1 Number of Nodes (Median): 7548 Number of Nodes (Range): 7548"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Meszaros 00c8ade878ef4dc38c235e5af525a806.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Meszaros 00c8ade878ef4dc38c235e5af525a806.html",
    "title": "1 Meszaros",
    "section": "",
    "text": "1 Meszaros\nKind: Linear Programming Problem, Linear Programming Problem Sequence Max Nonzeros: 11537419 Number of Graphs: 166 Number of Nodes (Median): 9495 Number of Nodes (Range): 16 - 1113780\nLinear programming problems from C. Me'sza'ros\nemail: mcsaba at oplab.sztaki.hu\nhttp://www.sztaki.hu/~meszaros/\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset\n\nhttp://www.sztaki.hu/~meszaros/bpmpd/"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/McRae 9bb67c12a4b048baa69ffe44dbc6ab10.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/McRae 9bb67c12a4b048baa69ffe44dbc6ab10.html",
    "title": "1 McRae",
    "section": "",
    "text": "1 McRae\nKind: 2D/3D Problem Max Nonzeros: 4996000 Number of Graphs: 2 Number of Nodes (Median): 999999.5 Number of Nodes (Range): 999999 - 1e+06"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/MaxPlanck d0da56c60dbe447d956f33f91223a8ee.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/MaxPlanck d0da56c60dbe447d956f33f91223a8ee.html",
    "title": "1 MaxPlanck",
    "section": "",
    "text": "1 MaxPlanck\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 327680 Number of Graphs: 2 Number of Nodes (Median): 81920 Number of Nodes (Range): 81920"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/MathWorks 2ef96f21549644cca20e069ab17e5676.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/MathWorks 2ef96f21549644cca20e069ab17e5676.html",
    "title": "1 MathWorks",
    "section": "",
    "text": "1 MathWorks\nKind: Computer Graphics/Vision Problem, Counter Example Problem, Directed Graph, Statistical/Mathematical Problem, Structural Problem Max Nonzeros: 340200 Number of Graphs: 11 Number of Nodes (Median): 2290 Number of Nodes (Range): 102 - 12406"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Marini 4bfc071045c344b48f6ae68f66bf0cdd.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Marini 4bfc071045c344b48f6ae68f66bf0cdd.html",
    "title": "1 Marini",
    "section": "",
    "text": "1 Marini\nKind: Economic Problem Max Nonzeros: 46142 Number of Graphs: 1 Number of Nodes (Median): 7245 Number of Nodes (Range): 7245"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Mallya 438026e620094502bedffbff2e538d12.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Mallya 438026e620094502bedffbff2e538d12.html",
    "title": "1 Mallya",
    "section": "",
    "text": "1 Mallya\nKind: Chemical Process Simulation Problem Max Nonzeros: 1528092 Number of Graphs: 18 Number of Nodes (Median): 10964 Number of Nodes (Range): 1477 - 70304"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Lucifora 27c93c6f6bc547bdae055f22ca9714fb.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Lucifora 27c93c6f6bc547bdae055f22ca9714fb.html",
    "title": "1 Lucifora",
    "section": "",
    "text": "1 Lucifora\nKind: Directed Weighted Graph Max Nonzeros: 30082 Number of Graphs: 2 Number of Nodes (Median): 7055 Number of Nodes (Range): 7055"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Lourakis c38b1acc761b4ccbb7c78eed2c582cbc.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Lourakis c38b1acc761b4ccbb7c78eed2c582cbc.html",
    "title": "1 Lourakis",
    "section": "",
    "text": "1 Lourakis\nKind: Computer Graphics/Vision Problem Max Nonzeros: 770811 Number of Graphs: 1 Number of Nodes (Median): 10581 Number of Nodes (Range): 10581"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Lin 8f5bb5bb4e4140bd88976b39ea098a85.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Lin 8f5bb5bb4e4140bd88976b39ea098a85.html",
    "title": "1 Lin",
    "section": "",
    "text": "1 Lin\nKind: Structural Problem Max Nonzeros: 1766400 Number of Graphs: 1 Number of Nodes (Median): 256000 Number of Nodes (Range): 256000"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/LeGresley 926d8973e85046e297734602c0dcee8a.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/LeGresley 926d8973e85046e297734602c0dcee8a.html",
    "title": "1 LeGresley",
    "section": "",
    "text": "1 LeGresley\nKind: Power Network Problem Max Nonzeros: 593276 Number of Graphs: 3 Number of Nodes (Median): 4908 Number of Nodes (Range): 2508 - 87936"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/LAW 4667106181d14a8ca4c53bee37cbdcd9.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/LAW 4667106181d14a8ca4c53bee37cbdcd9.html",
    "title": "1 LAW",
    "section": "",
    "text": "1 LAW\nKind: Directed Graph, Undirected Graph Max Nonzeros: 1949412601 Number of Graphs: 15 Number of Nodes (Median): 5363260 Number of Nodes (Range): 69244 - 118142155"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Koutsovasilis aaa663ceb91849a5ac52bcd27a914598.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Koutsovasilis aaa663ceb91849a5ac52bcd27a914598.html",
    "title": "1 Koutsovasilis",
    "section": "",
    "text": "1 Koutsovasilis\nKind: Structural Problem Max Nonzeros: 26837113 Number of Graphs: 2 Number of Nodes (Median): 207648 Number of Nodes (Range): 71505 - 343791"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Kemelmacher c0e148693d5e46359b359842a32fc82e.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Kemelmacher c0e148693d5e46359b359842a32fc82e.html",
    "title": "1 Kemelmacher",
    "section": "",
    "text": "1 Kemelmacher\nKind: Computer Graphics/Vision Problem Max Nonzeros: 100875 Number of Graphs: 1 Number of Nodes (Median): 28452 Number of Nodes (Range): 28452"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Trefethen 761e9866e98c48899a5ab92cedc89d36.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Trefethen 761e9866e98c48899a5ab92cedc89d36.html",
    "title": "1 JGD_Trefethen",
    "section": "",
    "text": "1 JGD_Trefethen\nKind: Combinatorial Problem Max Nonzeros: 554466 Number of Graphs: 11 Number of Nodes (Median): 300 Number of Nodes (Range): 19 - 20000"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_SPG 7f9a00fcaff442fc855b7fcef15e3a1b.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_SPG 7f9a00fcaff442fc855b7fcef15e3a1b.html",
    "title": "1 JGD_SPG",
    "section": "",
    "text": "1 JGD_SPG\nKind: Combinatorial Problem Max Nonzeros: 295680 Number of Graphs: 7 Number of Nodes (Median): 2600 Number of Nodes (Range): 300 - 6545"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Relat 655abad51707467f9f7688dbe145c71e.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Relat 655abad51707467f9f7688dbe145c71e.html",
    "title": "1 JGD_Relat",
    "section": "",
    "text": "1 JGD_Relat\nKind: Combinatorial Problem Max Nonzeros: 38955420 Number of Graphs: 15 Number of Nodes (Median): 2340 Number of Nodes (Range): 12 - 12360060"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Kocay 93a2c16eafd844b6810e796d452d3ce5.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Kocay 93a2c16eafd844b6810e796d452d3ce5.html",
    "title": "1 JGD_Kocay",
    "section": "",
    "text": "1 JGD_Kocay\nKind: Combinatorial Problem Max Nonzeros: 2872265 Number of Graphs: 12 Number of Nodes (Median): 142.5 Number of Nodes (Range): 2 - 15905"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Groebner 53f39eafc0c54fc395d1705c05aba5a1.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Groebner 53f39eafc0c54fc395d1705c05aba5a1.html",
    "title": "1 JGD_Groebner",
    "section": "",
    "text": "1 JGD_Groebner\nKind: Combinatorial Problem Max Nonzeros: 2462970 Number of Graphs: 8 Number of Nodes (Median): 2511 Number of Nodes (Range): 404 - 5761"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_GL6 47bdf63c5dd943ac8d8554ab89ac81da.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_GL6 47bdf63c5dd943ac8d8554ab89ac81da.html",
    "title": "1 JGD_GL6",
    "section": "",
    "text": "1 JGD_GL6\nKind: Combinatorial Problem Max Nonzeros: 6153 Number of Graphs: 5 Number of Nodes (Median): 545 Number of Nodes (Range): 341 - 637"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Franz f11812e4fd9840beab96777d5ba864cd.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Franz f11812e4fd9840beab96777d5ba864cd.html",
    "title": "1 JGD_Franz",
    "section": "",
    "text": "1 JGD_Franz\nKind: Combinatorial Problem Max Nonzeros: 329728 Number of Graphs: 11 Number of Nodes (Median): 7576 Number of Nodes (Range): 2240 - 47104"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_CAG 3e5170146d2842c1aba25843fc3b9ae6.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_CAG 3e5170146d2842c1aba25843fc3b9ae6.html",
    "title": "1 JGD_CAG",
    "section": "",
    "text": "1 JGD_CAG\nKind: Combinatorial Problem Max Nonzeros: 195985 Number of Graphs: 3 Number of Nodes (Median): 364 Number of Nodes (Range): 72 - 1916"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Janna c32dfc0c12514a0481b1c422ebd72112.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Janna c32dfc0c12514a0481b1c422ebd72112.html",
    "title": "1 Janna",
    "section": "",
    "text": "1 Janna\nKind: 2D/3D Problem, Computational Fluid Dynamics Problem, Structural Problem Max Nonzeros: 316548962 Number of Graphs: 18 Number of Nodes (Median): 1470152 Number of Nodes (Range): 377002 - 4147110"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/INPRO 86c35721533047f1907cf86158cd9dd2.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/INPRO 86c35721533047f1907cf86158cd9dd2.html",
    "title": "1 INPRO",
    "section": "",
    "text": "1 INPRO\nKind: Structural Problem Max Nonzeros: 19173163 Number of Graphs: 1 Number of Nodes (Median): 415863 Number of Nodes (Range): 415863"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/IBM_Austin 5f38ee92402c4c50a067ed97718d8669.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/IBM_Austin 5f38ee92402c4c50a067ed97718d8669.html",
    "title": "1 IBM_Austin",
    "section": "",
    "text": "1 IBM_Austin\nKind: Circuit Simulation Problem Max Nonzeros: 97193 Number of Graphs: 1 Number of Nodes (Median): 11341 Number of Nodes (Range): 11341"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Hollinger 9f869d13a9ba44c48b858438a958c30b.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Hollinger 9f869d13a9ba44c48b858438a958c30b.html",
    "title": "1 Hollinger",
    "section": "",
    "text": "1 Hollinger\nKind: Economic Problem Max Nonzeros: 717620 Number of Graphs: 49 Number of Nodes (Median): 27534 Number of Nodes (Range): 2880 - 64089"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/HB 629ef140da9a45c09e659eb3d9ed52fa.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/HB 629ef140da9a45c09e659eb3d9ed52fa.html",
    "title": "1 HB",
    "section": "",
    "text": "1 HB\nKind: 2D/3D Problem, 2D/3D Problem Sequence, Acoustics Problem, Chemical Process Simulation Problem, Computational Fluid Dynamics Problem, Counter Example Problem, Directed Graph, Directed Weighted Graph, Duplicate Acoustics Problem, Duplicate Structural Problem, Duplicate Thermal Problem, Economic Problem, Least Squares Problem, Materials Problem, Optimization Problem, Optimization Problem Sequence, Power Network Problem, Power Network Problem Sequence, Semiconductor Device Problem, Statistical/Mathematical Problem, Structural Problem, Subsequent 2D/3D Problem, Subsequent Optimization Problem, Subsequent Power Network Problem, Thermal Problem Max Nonzeros: 2043492 Number of Graphs: 292 Number of Nodes (Median): 680 Number of Nodes (Range): 9 - 44609\nThe original Harwell-Boeing collection. Iain Duff, Roger Grimes, and John Lewis.\n\nDuff, I. S. and R. G. Grimes and J. G. Lewis,\nSparse Matrix Problems, ACM Trans. on Mathematical Software,\nvol 14, no. 1, pp 1-14, 1989.\nSparse matrix test problems | ACM Transactions on Mathematical Software"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Hardesty 2593fb1af05a4e03906e3e5070579dcc.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Hardesty 2593fb1af05a4e03906e3e5070579dcc.html",
    "title": "1 Hardesty",
    "section": "",
    "text": "1 Hardesty\nKind: Computer Graphics/Vision Problem Max Nonzeros: 40451632 Number of Graphs: 3 Number of Nodes (Median): 938905 Number of Nodes (Range): 929901 - 8217820"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Hamm 565885904beb42bcad164af44118492c.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Hamm 565885904beb42bcad164af44118492c.html",
    "title": "1 Hamm",
    "section": "",
    "text": "1 Hamm\nKind: Circuit Simulation Problem Max Nonzeros: 958936 Number of Graphs: 6 Number of Nodes (Median): 43330 Number of Nodes (Range): 2395 - 170998"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Guettel ed63957db62c4a72a91440fcad262b81.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Guettel ed63957db62c4a72a91440fcad262b81.html",
    "title": "1 Guettel",
    "section": "",
    "text": "1 Guettel\nKind: Electromagnetics Problem Max Nonzeros: 7839010 Number of Graphs: 3 Number of Nodes (Median): 152078 Number of Nodes (Range): 27623 - 181302"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Grund 93c0ded809b84e6591f64c3653fcc0d3.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Grund 93c0ded809b84e6591f64c3653fcc0d3.html",
    "title": "1 Grund",
    "section": "",
    "text": "1 Grund\nKind: Chemical Process Simulation Problem, Circuit Simulation Problem, Economic Problem Max Nonzeros: 275094 Number of Graphs: 22 Number of Nodes (Median): 3268 Number of Nodes (Range): 7 - 57735"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Graham 3cee8b11cbdc48e69bee25d961c7ce0d.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Graham 3cee8b11cbdc48e69bee25d961c7ce0d.html",
    "title": "1 Graham",
    "section": "",
    "text": "1 Graham\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 335472 Number of Graphs: 1 Number of Nodes (Median): 9035 Number of Nodes (Range): 9035"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Gleich 20b1e90dfdb848d2a10b020013444a5b.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Gleich 20b1e90dfdb848d2a10b020013444a5b.html",
    "title": "1 Gleich",
    "section": "",
    "text": "1 Gleich\nKind: Directed Graph, Undirected Graph Max Nonzeros: 57156537 Number of Graphs: 10 Number of Nodes (Median): 1227933.5 Number of Nodes (Range): 2642 - 9845725"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/GHS_indef 3c6f4d92cb7a4e45a705bcfbfc2cf687.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/GHS_indef 3c6f4d92cb7a4e45a705bcfbfc2cf687.html",
    "title": "1 GHS_indef",
    "section": "",
    "text": "1 GHS_indef\nKind: 2D/3D Problem, Computational Fluid Dynamics Problem, Duplicate 2D/3D Problem, Materials Problem, Optimization Problem, Statistical/Mathematical Problem, Structural Problem, Subsequent Optimization Problem Max Nonzeros: 11288630 Number of Graphs: 60 Number of Nodes (Median): 46950 Number of Nodes (Range): 3002 - 466316"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Garon 1089a22cecd448ecaff872d2dd62ae1b.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Garon 1089a22cecd448ecaff872d2dd62ae1b.html",
    "title": "1 Garon",
    "section": "",
    "text": "1 Garon\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 373235 Number of Graphs: 2 Number of Nodes (Median): 8355 Number of Nodes (Range): 3175 - 13535"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Gaertner 745dc1eba35d41ffb293392723d69b77.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Gaertner 745dc1eba35d41ffb293392723d69b77.html",
    "title": "1 Gaertner",
    "section": "",
    "text": "1 Gaertner\nKind: Directed Weighted Graph, Undirected Weighted Graph Max Nonzeros: 91465 Number of Graphs: 3 Number of Nodes (Median): 11738 Number of Nodes (Range): 10774 - 13209"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/FreeFieldTechnologies 2590023f0d8349beb520b464216f77d8.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/FreeFieldTechnologies 2590023f0d8349beb520b464216f77d8.html",
    "title": "1 FreeFieldTechnologies",
    "section": "",
    "text": "1 FreeFieldTechnologies\nKind: Acoustics Problem Max Nonzeros: 5033796 Number of Graphs: 1 Number of Nodes (Median): 169410 Number of Nodes (Range): 169410"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/FIDAP 8f024dd82a304afda5ec2840b1c6a238.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/FIDAP 8f024dd82a304afda5ec2840b1c6a238.html",
    "title": "1 FIDAP",
    "section": "",
    "text": "1 FIDAP\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 1096948 Number of Graphs: 35 Number of Nodes (Median): 2410 Number of Nodes (Range): 27 - 19716"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Engwirda baea6989070b4aa888de5f88b92f0c03.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Engwirda baea6989070b4aa888de5f88b92f0c03.html",
    "title": "1 Engwirda",
    "section": "",
    "text": "1 Engwirda\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 259688 Number of Graphs: 1 Number of Nodes (Median): 14214 Number of Nodes (Range): 14214"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Dziekonski 6a9af72927e34cff9c486ce0cd88e179.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Dziekonski 6a9af72927e34cff9c486ce0cd88e179.html",
    "title": "1 Dziekonski",
    "section": "",
    "text": "1 Dziekonski\nKind: Electromagnetics Problem Max Nonzeros: 89306020 Number of Graphs: 5 Number of Nodes (Median): 607232 Number of Nodes (Range): 420408 - 1157456"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/DNVS f9e0657a7da04d6093c4fa0c5e4cdd41.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/DNVS f9e0657a7da04d6093c4fa0c5e4cdd41.html",
    "title": "1 DNVS",
    "section": "",
    "text": "1 DNVS\nKind: Structural Problem Max Nonzeros: 12387821 Number of Graphs: 15 Number of Nodes (Median): 114919 Number of Nodes (Range): 18010 - 224617"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Dehghani 458745ab7f7f4fb193d081a9b3c972a0.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Dehghani 458745ab7f7f4fb193d081a9b3c972a0.html",
    "title": "1 Dehghani",
    "section": "",
    "text": "1 Dehghani\nKind: Electromagnetics Problem Max Nonzeros: 406084 Number of Graphs: 1 Number of Nodes (Median): 29282 Number of Nodes (Range): 29282"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Dattorro 00a1cb47a6a742bcb7ceaf7462de97dc.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Dattorro 00a1cb47a6a742bcb7ceaf7462de97dc.html",
    "title": "1 Dattorro",
    "section": "",
    "text": "1 Dattorro\nKind: Optimization Problem Max Nonzeros: 1503732 Number of Graphs: 3 Number of Nodes (Median): 204304 Number of Nodes (Range): 150638 - 262144"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Cunningham ba5b27da004249a283d21826618d80ba.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Cunningham ba5b27da004249a283d21826618d80ba.html",
    "title": "1 Cunningham",
    "section": "",
    "text": "1 Cunningham\nKind: Acoustics Problem Max Nonzeros: 1660579 Number of Graphs: 4 Number of Nodes (Median): 38617 Number of Nodes (Range): 11107 - 66127"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Cote e1cc80823fd24111af574b6c38e279fd.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Cote e1cc80823fd24111af574b6c38e279fd.html",
    "title": "1 Cote",
    "section": "",
    "text": "1 Cote\nKind: Acoustics Problem Max Nonzeros: 301700 Number of Graphs: 2 Number of Nodes (Median): 9145 Number of Nodes (Range): 5962 - 12328"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Chevron f19365bd3dde4848af4f2ffd00e6a568.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Chevron f19365bd3dde4848af4f2ffd00e6a568.html",
    "title": "1 Chevron",
    "section": "",
    "text": "1 Chevron\nKind: 2D/3D Problem Max Nonzeros: 6376412 Number of Graphs: 4 Number of Nodes (Median): 235815 Number of Nodes (Range): 37365 - 711450"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/CEMW 6c2a9b45fe704868ad4fb28227ae259f.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/CEMW 6c2a9b45fe704868ad4fb28227ae259f.html",
    "title": "1 CEMW",
    "section": "",
    "text": "1 CEMW\nKind: Electromagnetics Problem Max Nonzeros: 5080961 Number of Graphs: 4 Number of Nodes (Median): 822269 Number of Nodes (Range): 93476 - 921632"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Cannizzo f51a26f2e7ca4939adb80c454d6a40e7.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Cannizzo f51a26f2e7ca4939adb80c454d6a40e7.html",
    "title": "1 Cannizzo",
    "section": "",
    "text": "1 Cannizzo\nKind: Structural Problem Max Nonzeros: 72356 Number of Graphs: 1 Number of Nodes (Median): 4098 Number of Nodes (Range): 4098"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Buss 262cbb3e387c4332ab2ce76b2dabe46e.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Buss 262cbb3e387c4332ab2ce76b2dabe46e.html",
    "title": "1 Buss",
    "section": "",
    "text": "1 Buss\nKind: Undirected Bipartite Graph Max Nonzeros: 22624727 Number of Graphs: 2 Number of Nodes (Median): 633707 Number of Nodes (Range): 394792 - 872622"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Brogan 2a3e463e208b473d9e52476806075d6a.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Brogan 2a3e463e208b473d9e52476806075d6a.html",
    "title": "1 Brogan",
    "section": "",
    "text": "1 Brogan\nKind: Computer Vision Problem Max Nonzeros: 7647040 Number of Graphs: 1 Number of Nodes (Median): 477976 Number of Nodes (Range): 477976"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bova 119849f48d4542eda9e13cae689581c3.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bova 119849f48d4542eda9e13cae689581c3.html",
    "title": "1 Bova",
    "section": "",
    "text": "1 Bova\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 2329092 Number of Graphs: 1 Number of Nodes (Median): 46835 Number of Nodes (Range): 46835"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Botonakis dab268785b554971930537459761eb5c.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Botonakis dab268785b554971930537459761eb5c.html",
    "title": "1 Botonakis",
    "section": "",
    "text": "1 Botonakis\nKind: Thermal Problem Max Nonzeros: 3489300 Number of Graphs: 6 Number of Nodes (Median): 125029 Number of Nodes (Range): 17880 - 204316"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Boeing 9e59936b02124e7e8e41389c3b0d3088.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Boeing 9e59936b02124e7e8e41389c3b0d3088.html",
    "title": "1 Boeing",
    "section": "",
    "text": "1 Boeing\nKind: Duplicate Materials Problem, Duplicate Structural Problem, Materials Problem, Structural Problem Max Nonzeros: 11524432 Number of Graphs: 32 Number of Nodes (Median): 13965 Number of Nodes (Range): 588 - 217918"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bindel 6101371478d94db9b56b465bc9931a5d.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bindel 6101371478d94db9b56b465bc9931a5d.html",
    "title": "1 Bindel",
    "section": "",
    "text": "1 Bindel\nKind: Thermal Problem Max Nonzeros: 522387 Number of Graphs: 6 Number of Nodes (Median): 10605 Number of Nodes (Range): 10605"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Belcastro 547bf6a0ea3b486a9377a8a7d5d62243.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Belcastro 547bf6a0ea3b486a9377a8a7d5d62243.html",
    "title": "1 Belcastro",
    "section": "",
    "text": "1 Belcastro\nKind: Undirected Weighted Graph Max Nonzeros: 28967291 Number of Graphs: 3 Number of Nodes (Median): 22283 Number of Nodes (Range): 14340 - 45101"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Barabasi 58d9be275a404c9fab75e3b1debf1c23.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Barabasi 58d9be275a404c9fab75e3b1debf1c23.html",
    "title": "1 Barabasi",
    "section": "",
    "text": "1 Barabasi\nKind: Bipartite Graph, Directed Graph, Undirected Graph Max Nonzeros: 1470404 Number of Graphs: 3 Number of Nodes (Median): 325729 Number of Nodes (Range): 2114 - 392400"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Averous 55dab540b74945d3894785bfa035647d.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Averous 55dab540b74945d3894785bfa035647d.html",
    "title": "1 Averous",
    "section": "",
    "text": "1 Averous\nKind: Thermal Problem Max Nonzeros: 463625 Number of Graphs: 4 Number of Nodes (Median): 19981 Number of Nodes (Range): 1794 - 84617"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Arenas 5c2646e04b7b4cf98d5dce53411aa477.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Arenas 5c2646e04b7b4cf98d5dce53411aa477.html",
    "title": "1 Arenas",
    "section": "",
    "text": "1 Arenas\nKind: Undirected Graph, Undirected Multigraph Max Nonzeros: 48632 Number of Graphs: 4 Number of Nodes (Median): 793 Number of Nodes (Range): 198 - 10680"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Andrianov a7d62b9aa5f64505944f306f04fba23b.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Andrianov a7d62b9aa5f64505944f306f04fba23b.html",
    "title": "1 Andrianov",
    "section": "",
    "text": "1 Andrianov\nKind: Optimization Problem Max Nonzeros: 10352819 Number of Graphs: 16 Number of Nodes (Median): 26520 Number of Nodes (Range): 5026 - 534388"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/AMD 92c7f5c5dd674217aee6bd5052360b43.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/AMD 92c7f5c5dd674217aee6bd5052360b43.html",
    "title": "1 AMD",
    "section": "",
    "text": "1 AMD\nKind: Circuit Simulation Problem Max Nonzeros: 7660826 Number of Graphs: 2 Number of Nodes (Median): 867790 Number of Nodes (Range): 150102 - 1585478"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/AG-Monien 10826a5bc1ce4fd2b959d274b9a6d322.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/AG-Monien 10826a5bc1ce4fd2b959d274b9a6d322.html",
    "title": "1 AG-Monien",
    "section": "",
    "text": "1 AG-Monien\nKind: 2D/3D Problem, Undirected Graph Sequence Max Nonzeros: 4194298 Number of Graphs: 32 Number of Nodes (Median): 9400 Number of Nodes (Range): 224 - 1048576"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Storylines (Movie Plots) 5d9ea7cbfc2c4a6c88a7ca1bf32c67d7.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Storylines (Movie Plots) 5d9ea7cbfc2c4a6c88a7ca1bf32c67d7.html",
    "title": "1 Storylines (Movie Plots)",
    "section": "",
    "text": "1 Storylines (Movie Plots)\nOrigin Notes: This dataset was initially collected by Yuzuru Tanahashi, then stored on his homepage at UC Davis which was lost. Through the help of personal connections at UC Davis, we were luckily able to recover the dataset. graph features handled: clusters, dynamic, layered graphs, many layers, temporal event sequence Graph features in papers: dynamic,dynamic (discrete),layered graphs,n-layers,clusters (pre-existing),dynamic,dynamic (discrete),layered graphs,n-layers,clusters (pre-existing),dynamic (discrete),layered graphs,n-layers,clusters (pre-existing),compound graphs,layered graphs,n-layers Origin Paper: Design Considerations for Optimizing Storyline Visualizations (https://www.notion.so/Design-Considerations-for-Optimizing-Storyline-Visualizations-8a8056ac18c748dd9cdbcd1766addd3f?pvs=21) Originally found at: UC Davis’ website, personal page Size: 698-24056 nodes, 357-23088 edges Number of Graphs: 6 format: NA Appeared in years: 2015,2013,2012,2016,2017,2020,2022 Type of Collection: Uniform Benchmark is it stored properly?: No must be analyzed: Yes In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Crossing Minimization in Storyline Visualization (https://www.notion.so/Crossing-Minimization-in-Storyline-Visualization-2953ec267f7f468bb4b306faee452952?pvs=21), Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes (https://www.notion.so/Sequence-Braiding-Visual-Overviews-of-Temporal-Event-Sequences-and-Attributes-54be1011c0324f04bcc2bafa58b89859?pvs=21), Stratisfimal Layout: A modular optimization model for laying out layered node-link network visualizations (https://www.notion.so/Stratisfimal-Layout-A-modular-optimization-model-for-laying-out-layered-node-link-network-visualiza-77fd27b418d64ef6ab570cffd0ec4a24?pvs=21), Design Considerations for Optimizing Storyline Visualizations (https://www.notion.so/Design-Considerations-for-Optimizing-Storyline-Visualizations-7d26fa762ce44baa96b51c7361bfed17?pvs=21), StoryFlow: Tracking the Evolution of Stories (https://www.notion.so/StoryFlow-Tracking-the-Evolution-of-Stories-a5e01c41d9ce44769f4cd154d4c293e3?pvs=21), Computing Storyline Visualizations with Few Block Crossings (https://www.notion.so/Computing-Storyline-Visualizations-with-Few-Block-Crossings-cb4a181c2cb0461f9cb01232dda5f19d?pvs=21), An Efficient Framework for Generating Storyline Visualizations from Streaming Data (https://www.notion.so/An-Efficient-Framework-for-Generating-Storyline-Visualizations-from-Streaming-Data-d06da0be3b5244b791f30c22ff2b7277?pvs=21) cleaned format?: Yes duplicate?: No link works?: No Added in paper: Yes OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90e9794a6be0ec012e7cb Origin paper plaintext: Design Considerations for Optimizing Storyline Visualizations Page id: 5d9ea7cbfc2c4a6c88a7ca1bf32c67d7 unavailable/skip: Yes Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d948c6803e0c0bf6558be7 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96e0b1101aa0ea36a0bd4 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d971960c2b4d0f64386417 first look: No sparkline data: {‘min’: 698, ‘max’: 24056, ‘step_size’: 5000, ‘num_bins’: 5, ‘bins’: [0, 5000, 10000, 15000, 20000], ‘num_nodes’: [4, 0, 0, 0, 1]} Related to Literature - Algorithm (Dataset tag relations) 1: An Efficient Framework for Generating Storyline Visualizations from Streaming Data (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20Efficient%20Framework%20for%20Generating%20Storyline%20Vi%200a3f35ebac3f468cb9c3adee03f62a06.md), StoryFlow: Tracking the Evolution of Stories (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/StoryFlow%20Tracking%20the%20Evolution%20of%20Stories%2085d6352e70a54f3e8840adcfea70363a.md), Design Considerations for Optimizing Storyline Visualizations (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Design%20Considerations%20for%20Optimizing%20Storyline%20Vis%200a518ed402154bdcb136759d50e09b1b.md), Crossing Minimization in Storyline Visualization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Crossing%20Minimization%20in%20Storyline%20Visualization%20adc579d114c9412e8dad9e068e18d960.md), Computing Storyline Visualizations with Few Block Crossings (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Computing%20Storyline%20Visualizations%20with%20Few%20Block%20%20852c12c9b8674d4482a281a689b27496.md), Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Sequence%20Braiding%20Visual%20Overviews%20of%20Temporal%20Eve%204dfe62dc294b4ef1b453ecf09be2ea0f.md), Stratisfimal Layout: A modular optimization model for laying out layered node-link network visualizations (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Stratisfimal%20Layout%20A%20modular%20optimization%20model%20f%20ad2a312108774bad92f36064f5fd59ed.md)\n\n\n2 Body\n\nStatistics\n\n\n\nfour_in_one.svg\n\n\n\n\nDescriptions from Literature\nFrom “An efficient Framework for Generating Storyline Visualizations from Streaming Data”:\n\nThe datasets we used for this study were the three movie datasets (Star Wars, The Matrix, and Inception) [25] which have been used in previous research as benchmark datasets for measuring layout legibilities. Star Wars consists of 14 entities and 200 time steps. The Matrix consists of 14 entities and 100 time steps. Inception consists of 8 entities and 490 time steps.\n\nFrom “Design Considerations for Optimizing Storyline Visualizations” (origin paper):\n\nThe basic form of the data applied in this visualization is simply a chronological list of interactions between various characters. These interactions between characters can be separated into a series of interaction sessions, each session representing the time span of a set of interacting characters. More precisely, we define an interaction session as a unit which holds three attributes: • initiation time, • duration, and • members. Initiation time corresponds to the time when the interaction session begins. Duration corresponds to the duration of the interaction session. Members corresponds to the set of characters involved in the interaction session. Each interaction session represents a time slot in the data where its members are interacting. Note that any change in the formation of members (e.g., a character leaving or joining) indicates a separate interaction session.\n\n\n\nExample Figures\nFrom “An Efficient Framework for Generating Storyline Visualizations from Streaming Data”:\n\n\n\nUntitled\n\n\nFrom “StoryFlow: Tracking the Evolution of Stories”:\n\n\n\nUntitled\n\n\nFrom “Crossing Minimization in Storyline Visualizations”:\n\n\n\nUntitled"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Stanford GraphBase effff4b40e9d4a79b6f33825ccca7401.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Stanford GraphBase effff4b40e9d4a79b6f33825ccca7401.html",
    "title": "1 Stanford GraphBase",
    "section": "",
    "text": "1 Stanford GraphBase\nNote: We do not currently provide this dataset for download. Origin Notes: Compiled by (the) Donald Knuth, the https://www-cs-faculty.stanford.edu/~knuth/sgb.html consists of programs and datasets for network analysis. The datasets accompany a textbook, “The Stanford GraphBase: A Platform for Combinatorial Computing”. graph features handled: labeled nodes, temporal event sequence Graph features in papers: clusters (generated),generic,planar,spatial,clusters (generated),weighted edges,dynamic,dynamic (discrete),layered graphs,n-layers,bipartite,layered graphs,generic Origin Paper: The Stanford GraphBase: A Platform for Combinatorial Computing (https://www.notion.so/The-Stanford-GraphBase-A-Platform-for-Combinatorial-Computing-f28a00500d684add8b0de06339dfd128?pvs=21) Originally found at: https://www-cs-faculty.stanford.edu/~knuth/sgb.html Appeared in years: 2017,2016,1997,2004,2019 Type of Collection: Missed it is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): Crossing Minimization in Storyline Visualization (https://www.notion.so/Crossing-Minimization-in-Storyline-Visualization-2953ec267f7f468bb4b306faee452952?pvs=21), Graph Layouts by t-SNE (https://www.notion.so/Graph-Layouts-by-t-SNE-6adb46473eb2415294b0d797ad86b077?pvs=21), Simple and Efficient Bilayer Cross Counting (https://www.notion.so/Simple-and-Efficient-Bilayer-Cross-Counting-6f978d8b0ceb4a6eb7df52ed82999861?pvs=21), 2-Layer Straightline Crossing Minimization (https://www.notion.so/2-Layer-Straightline-Crossing-Minimization-99889f8092bf47c7973040551b298d28?pvs=21), Anisotropic Radial Layout for Visualizing Centrality and Structure in Graphs (https://www.notion.so/Anisotropic-Radial-Layout-for-Visualizing-Centrality-and-Structure-in-Graphs-c604b563b3594a69b6c8e57b5ce9f02f?pvs=21) cleaned format?: No duplicate?: Yes link works?: No Added in paper: No Origin paper plaintext: The Stanford GraphBase: A Platform for Combinatorial Computing Page id: effff4b40e9d4a79b6f33825ccca7401 unavailable/skip: Yes Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: Graph Layouts by t-SNE (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Graph%20Layouts%20by%20t-SNE%203af4ccbc89b547a38748745511744997.md), Anisotropic Radial Layout for Visualizing Centrality and Structure in Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Anisotropic%20Radial%20Layout%20for%20Visualizing%20Centrali%20c964c73e1c2946f992cb72bac2b19c42.md), Crossing Minimization in Storyline Visualization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Crossing%20Minimization%20in%20Storyline%20Visualization%20adc579d114c9412e8dad9e068e18d960.md), 2-Layer Straightline Crossing Minimization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/2-Layer%20Straightline%20Crossing%20Minimization%209f4d9dc9520e495ba5a1ef31fdd34760.md), Simple and Efficient Bilayer Cross Counting (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Simple%20and%20Efficient%20Bilayer%20Cross%20Counting%20f879285ff264423cb974db4969614248.md), A Random Sampling O(n) Force-calculation Algorithm for Graph Layouts (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Random%20Sampling%20O(n)%20Force-calculation%20Algorithm%2086599a831f314d1cb8871a5a92420d0f.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “Crossing Minimization in Storyline Visualizations”:\n\nSince the instances “Anna Karenina” and “Les Miserables” are very big, we have split them into chapters and sequences of chapters. The resulting test-bed is made of eight chapters, seven pairs of chapters, six triples of chapters and five quadruples of chapters from “Anna Karenina”, and five chapters, four pairs of chapters and three triples of chapters from “Les Mis ́erables”, plus the entire “Adventures of Huckleberry Finn”, “Inception-sf”, “Inception”, “Star Wars”, “The Matrix-sf”, and “The Matrix”.\n\nFrom “Anisotropic Radial Layout for Visualizing Centrality and Structure in Graphs”:\n\nThe third dataset is a graph of character associations in the famous French novel Les Miserables (Fig. 5) [18]. This graph consists of 77 nodes, each representing a character in the novel, and 254 weighted edges where the weights represent the number of chapters that feature both characters associated with an edge. We see the that the main protagonist Valjean (marked in red) is placed prominently in all three visualizations (Fig. 5). However, other key characters in the plot such as Inspector Javert (blue) and Cosett (orange), who do not appear often with characters other than the protagonist (and thus have low betweenness centrality) are treated differently. While the radial layout relegates them to the periphery (far from Valjean) (Fig. 5b), MDS (Fig. 5a) paints a conflicting picture with regard to their centrality, e.g., Cosett’s node almost overlaps with Valjean despite its low centrality. In contrast, the proposed ARL (Fig.5c) is able to coherently convey the low centrality of the Inspector Javert and Cosett, as well as, their closeness to Valjean. The above issue of distance distortion appears to be a frequent occurrence in the radial layout due to many characters who have a low centrality value causing them to end up being packed in the outer periphery. A case of contrast is that of the character Bishop Myriel (green) who despite being associated with several characters, is only seen with Valjean once.\n\n\n\nExample Figures\nFrom “Crossing Minimization in Storyline Visualizations”:\n\n\n\nScreen Shot 2023-08-17 at 4.29.43 PM.png\n\n\nFrom “Graph Layouts by t-SNE”:\n\n\n\nScreen Shot 2023-08-17 at 4.21.24 PM.png\n\n\nlesmis is the GraphBase Les Miserables graph\nFrom “Anisotropic Radial Layout for Visualizing Centrality and Structure in Graphs”:\n\n\n\nScreen Shot 2023-08-17 at 4.23.56 PM.png"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c.html",
    "title": "1 SNAP (Stanford Network Analysis Platform)",
    "section": "",
    "text": "1 SNAP (Stanford Network Analysis Platform)\nNote: Well-known, widely used graph repository. Note that BioSNAP, which consists of similar datasets for medical applications, exists under the same umbrella project. While BioSNAP was not as relevant in the literature, it may still prove useful for future researchers. Origin Notes: The SNAP library is the collection of datasets assembled as part of the Stanford Network Analysis Platform, which started in 2004 and launched their website in 2009. The group attributes the dataset preparation to Ana Pavlisic. graph features handled: bipartite, categorical nodes, dense, directed edges, edge weighted, hierarchical, large, node weighted, signed, sparse, temporal Graph features in papers: generic,large,clusters (generated),generic,almost proximity drawable graphs,mesh graphs,scale-free graphs,strong proximity drawable graphs,weak proximity drawable graphs Origin Paper: SNAP Datasets: Stanford Large Network Dataset Collection (https://www.notion.so/SNAP-Datasets-Stanford-Large-Network-Dataset-Collection-b5f4bd2e98834a638a5c4ab563047d28?pvs=21) Originally found at: http://snap.stanford.edu/data/index.html Size: 1008 unique graphs (excluding graph classification tasks consisting of 352,536 graphs) Child collections: Amazon (Amazon%201b39a766deb747b8a3b51fc41cfc2e20.md), Enron (Enron%20ed3c62b92cf14a7b86c691ac3651dab3.md) Appeared in years: 2016,2019,2014,2023 Type of Collection: Established Network Repo (No report) is it stored properly?: No must be analyzed: Yes In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): A Quality Metric for Visualization of Clusters in Graphs (https://www.notion.so/A-Quality-Metric-for-Visualization-of-Clusters-in-Graphs-4f55f6f5086243d4bcda73e4aa3e2454?pvs=21), A Distributed Multilevel Force-Directed Algorithm (https://www.notion.so/A-Distributed-Multilevel-Force-Directed-Algorithm-9d7a1734402948ecba4995ca617489ff?pvs=21), ForceAtlas2, a Continuous Graph Layout Algorithm for Handy Network Visualization Designed for the Gephi Software (https://www.notion.so/ForceAtlas2-a-Continuous-Graph-Layout-Algorithm-for-Handy-Network-Visualization-Designed-for-the-Ge-b6bd99a7b65c4d33848c967db9b6f3f6?pvs=21) cleaned format?: No duplicate?: No link works?: Yes Added in paper: Yes Origin paper plaintext: SNAP Datasets: Stanford Large Network Dataset Collection Page id: 1cd77eaee57147ce8263b2f9eaa2589c unavailable/skip: Yes Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: A Distributed Multilevel Force-Directed Algorithm (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Distributed%20Multilevel%20Force-Directed%20Algorithm%200a5a2af21adb4edbbc41684e61b3db32.md), A Quality Metric for Visualization of Clusters in Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Quality%20Metric%20for%20Visualization%20of%20Clusters%20in%20%20a1c61d2b87b4457ca462ce04f80b4720.md), ForceAtlas2, a Continuous Graph Layout Algorithm for Handy Network Visualization Designed for the Gephi Software (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/ForceAtlas2,%20a%20Continuous%20Graph%20Layout%20Algorithm%20f%205c542416cf334ae8943f1420c1e5c0e3.md), A Random Sampling O(n) Force-calculation Algorithm for Graph Layouts (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Random%20Sampling%20O(n)%20Force-calculation%20Algorithm%2086599a831f314d1cb8871a5a92420d0f.md), Force-Directed Graph Layouts Revisited: A New Force Based on the T-Distribution (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Force-Directed%20Graph%20Layouts%20Revisited%20A%20New%20Force%208c79f21b6f2a41fca20311b3ba1ab644.md), Shape-Faithful Graph Drawings (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Shape-Faithful%20Graph%20Drawings%209551555e517f400ea733e3e3c56c8686.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “ForceAtlas2, a Continuous Graph Layout Algorithm for Handy Network Visualization Designed for the Gephi Software”:\n\nWe benchmarked our algorithm with a dataset of 68 networks from 5 to 23,133 nodes. We tried to gather varied networks corresponding to the actual use of Gephi (a lot of social networks, and scale-free networks in general). Most of these networks are from the Stanford Large Network Dataset Collection (http://snap. stanford.edu/data/) and include social networks (Facebook and Twitter ego-networks), collaboration networks (from Arxiv) and autonomous systems (peering information inferred from Oregon route-views).\n\n\n\nExample Figures\nFrom “ForceAtlas2, a Continuous Graph Layout Algorithm for Handy Network Visualization Designed for the Gephi Software”:\n\n\n\nScreen Shot 2023-08-02 at 11.20.12 AM.png\n\n\n=== STOP RENDERING ===\nChildren of SNAP"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Web graphs 13a8ef78b9a844cd9fa038ace8d23022.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Web graphs 13a8ef78b9a844cd9fa038ace8d23022.html",
    "title": "1 Web graphs",
    "section": "",
    "text": "1 Web graphs\nDescription: nodes represent webpages and edges are hyperlinks Features: Directed Number of Graphs: 4"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Twitter and Memetracker 96da1c970dbe4e0eb95652d97e67d02e.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Twitter and Memetracker 96da1c970dbe4e0eb95652d97e67d02e.html",
    "title": "1 Twitter and Memetracker",
    "section": "",
    "text": "1 Twitter and Memetracker\nDescription: memetracker phrases, links and 467 million Tweets Features: Memes, Time Series, Tweets Number of Graphs: 4"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Social networks bcc55988f97e4f7aa8877d168be1484e.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Social networks bcc55988f97e4f7aa8877d168be1484e.html",
    "title": "1 Social networks",
    "section": "",
    "text": "1 Social networks\nDescription: online social networks, edges represent interactions between people Features: Attributed, Bipartite, Directed, Signed, Temporal, Weighted, undirected Number of Graphs: 23"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Road networks cd1bdd90b1134d408d1684be2a1726ab.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Road networks cd1bdd90b1134d408d1684be2a1726ab.html",
    "title": "1 Road networks",
    "section": "",
    "text": "1 Road networks\nDescription: nodes represent intersections and edges roads connecting the intersections Features: undirected Number of Graphs: 3"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Online communities 0a58d1ff8fc94a0692e056586dd30295.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Online communities 0a58d1ff8fc94a0692e056586dd30295.html",
    "title": "1 Online communities",
    "section": "",
    "text": "1 Online communities\nDescription: data from online communities such as Reddit and Flickr Features: Images, Reddit Embeddings, Reddit requests, Reddit submissions, Subreddit hyperlinks Number of Graphs: 5"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Location-based online social networks ac905342d60e41a5b2cb87ffebdc0e4d.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Location-based online social networks ac905342d60e41a5b2cb87ffebdc0e4d.html",
    "title": "1 Location-based online social networks",
    "section": "",
    "text": "1 Location-based online social networks\nDescription: social networks with geographic check-ins Features: Geo-Location, Unirected, undirected Number of Graphs: 2"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Graph classification datasets 2e27026177d844d2852a34943f4ccf65.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Graph classification datasets 2e27026177d844d2852a34943f4ccf65.html",
    "title": "1 Graph classification datasets",
    "section": "",
    "text": "1 Graph classification datasets\nDescription: disjoint graphs from different classes Features: Unattributed, undirected Number of Graphs: 352536"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Computer Communication Networks f0b14d2de1784398bf484d4f463dd3cd.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Computer Communication Networks f0b14d2de1784398bf484d4f463dd3cd.html",
    "title": "1 Computer Communication Networks",
    "section": "",
    "text": "1 Computer Communication Networks\nDescription: communications among computers running distributed applications Features: Attributed, Directed Number of Graphs: 22"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Collaboration networks d7695abd46c544fc89acd9a848ab04c3.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Collaboration networks d7695abd46c544fc89acd9a848ab04c3.html",
    "title": "1 Collaboration networks",
    "section": "",
    "text": "1 Collaboration networks\nDescription: nodes represent scientists, edges represent collaborations (co-authoring a paper) Features: undirected Number of Graphs: 5"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Autonomous systems 9952032ca7a649198f8e5c24fbd1a4e3.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Autonomous systems 9952032ca7a649198f8e5c24fbd1a4e3.html",
    "title": "1 Autonomous systems",
    "section": "",
    "text": "1 Autonomous systems\nDescription: graphs of the internet Features: Directed, undirected Number of Graphs: 874"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Scotch Graph Collection cfe6f105da3a4c699fa3e02ca1f6e88a.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Scotch Graph Collection cfe6f105da3a4c699fa3e02ca1f6e88a.html",
    "title": "1 Scotch Graph Collection",
    "section": "",
    "text": "1 Scotch Graph Collection\nNote: Collection consisting of graphs from various sources including topological meshes, meshes related to physical problems (fluid dynamics, structural mechanics, combinatorial optimization), and interprocess communication graphs for a parallel computing implementation of a factorization solver. Origin Notes: The https://gitlab.inria.fr/scotch/scotch is produced by the https://www.labri.fr/perso/pelegrin/scotch/ whose goal is to study static mapping by the means of graph theory, using “divide and conquer’’ graph bipartitioning heuristics. The original link to the data http://www.labri.u-bordeaux.fr/Equipe/PARADIS/Member/pelegrin/graph is broken. graph features handled: large, mesh Graph features in papers: generic,large Origin Paper: Scotch and PT-Scotch Graph Partitioning Software: An Overview (https://www.notion.so/Scotch-and-PT-Scotch-Graph-Partitioning-Software-An-Overview-2845b7c5cbc14fa8a02acfbc1e3a28ef?pvs=21), PT-Scotch: A tool for efficient parallel graph ordering (https://www.notion.so/PT-Scotch-A-tool-for-efficient-parallel-graph-ordering-bb06d1044c6b4029a1216c60eb23de18?pvs=21) Originally found at: https://wotug.org/parallel/libraries/communication/scotch/Graphs/ Size: The graphs range from 7 to 144649 nodes, and 10 to 1074393 edges. Number of Graphs: 39 format: Scotch (.src files) - first line is the number of vertices followed by . number of arcs (2 time |E|). Then each line represents a vertex with the following format: id load degree adjencency list(load to_id)\nChild collections: Walshaw (Walshaw%20e40b37a1147942d89ff1d8dfad285256.md) Appeared in years: 2002 Type of Collection: Uniform Benchmark is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): ACE: A Fast Multiscale Eigenvectors Computation for Drawing Huge Graphs (https://www.notion.so/ACE-A-Fast-Multiscale-Eigenvectors-Computation-for-Drawing-Huge-Graphs-44f8183954f14ada944d642d9ff1298e?pvs=21), A Fast Multi-Scale Method for Drawing Large Graphs (https://www.notion.so/A-Fast-Multi-Scale-Method-for-Drawing-Large-Graphs-a49d7ec5808945baae7a5246a191c986?pvs=21) cleaned format?: Yes duplicate?: No link works?: Yes Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90eda803e0c0b00558bc8 Origin paper plaintext: Scotch and PT-Scotch Graph Partitioning Software: An Overview, PT-Scotch: A tool for efficient parallel graph ordering Page id: cfe6f105da3a4c699fa3e02ca1f6e88a unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d94897803e0c0bfb558d06 OSF link gml: https://osf.io/download/w37bv/ OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d971ca94a6be112a12ea97 first look: No sparkline data: {‘min’: 7, ‘max’: 144649, ‘step_size’: 10000, ‘num_bins’: 15, ‘bins’: [0, 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000, 110000, 120000, 130000, 140000], ‘num_nodes’: [24, 4, 1, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 2]} Related to Literature - Algorithm (Dataset tag relations) 1: A Fast Multi-Scale Method for Drawing Large Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Fast%20Multi-Scale%20Method%20for%20Drawing%20Large%20Graphs%20fdc9e1d148bc4fcd848d8b4cc959cdfd.md), ACE: A Fast Multiscale Eigenvectors Computation for Drawing Huge Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/ACE%20A%20Fast%20Multiscale%20Eigenvectors%20Computation%20for%205e8de72ea8d0436babf760ca379cc457.md)\n\n\n2 Body\n\nStatistics\n\n\n\nfour_in_one.svg\n\n\n\n\nDescriptions from Literature\nFrom “ACE: A Fast Multiscale Eigenvectors Computation for Drawing Huge Graphs”:\n\nFigure 10c, the 4elt graph, is yet another example of a graph with inherent diversity of distance scales.\n\n\n\nExample Figures\nFrom “A Fast Multi-Scale Method for Drawing Large Graphs”:\n\n\n\nScreen Shot 2023-08-04 at 8.14.10 AM.png\n\n\n\n\n\nScreen Shot 2023-08-04 at 8.14.29 AM.png\n\n\nFrom “ACE: A Fast Multiscale Eigenvectors Computation for Drawing Huge Graphs”:\n\n\n\nScreen Shot 2023-08-04 at 8.30.54 AM.png\n\n\n=== STOP RENDERING ===\n\n            ===========================\n\n            The SCOTCH graph collection\n\n            ===========================\n\nThe graphs that comprise this collection have been gathered from various\nsites and people (Steve Hammond, the Harwell-Boeing collection, Bruce\nHendrickson, and Horst Simon). They are all stored in SCOTCH source graph\nformat (.src), and are accompanied with their geometry file (.xyz) whenever\navailable.\n\nThis directory contains:\n\nar_*        : Architecture graphs for classical topologies, mostly meshes.\n\nfe_*        : Triangular and quadrangular unstructured meshes related to\n          fluid dynamics, structural mechanics, or combinatorial\n          optimization problems.\n\nnd_*        : Valuated interprocess communication graphs issued from a\n          parallel implementation of a sparse block Cholesky\n          factorization solver, which represent partitions of the\n          unknowns induced by a nested dissection method.\n          The nd_ref0, nd_ref1, nd_ref2, nd_ref3, and nd_ref4 graphs\n          are aliases for the nd_2047.7750, nd_2453.47659,\n          nd_2815.84406, nd_3093.105713, and nd_3470.135148 graphs,\n          respectively.\nAuthor: Francois Pellegrini (pelegrin@labri.u-bordeaux.fr)"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/RandDAG 54b6ed8fdecb4256b2cca6298f09965e.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/RandDAG 54b6ed8fdecb4256b2cca6298f09965e.html",
    "title": "1 RandDAG",
    "section": "",
    "text": "1 RandDAG\nNote: Uniformly sampled from set of level graphs with certain graph parameters, such as number of nodes and number of edges. Origin Notes: http://graphdrawing.org highlights the DAGmar graph generator, and provides a benchmark set of randomly generated directed acyclic graphs. While not explicit, it is implied this benchmark comes from the DAGmar generator. graph features handled: acyclic, directed edges Graph features in papers: generic Origin Paper: DAGmar: Library for DAGs (https://www.notion.so/DAGmar-Library-for-DAGs-b0b5183f927e4983b7e9ef0d729674d4?pvs=21) Originally found at: http://www.graphdrawing.org/data.html Size: 10-100 nodes, 15-167 edges Number of Graphs: 909 format: GraphML Appeared in years: 2018 Type of Collection: Uniform Benchmark is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): ? Aesthetic Discrimination of Graph Layouts (https://www.notion.so/Aesthetic-Discrimination-of-Graph-Layouts-98cc70abc7424e7895cf73e988563219?pvs=21) cleaned format?: Yes duplicate?: No link works?: No Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90eff803e0c0b04558ca3 Origin paper plaintext: DAGmar: Library for DAGs Page id: 54b6ed8fdecb4256b2cca6298f09965e unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d948061101aa0dc66a0c55 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96dec94a6be112512e706 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d97088803e0c0cb6558d7e first look: No sparkline data: {‘min’: 10, ‘max’: 100, ‘step_size’: 5, ‘num_bins’: 21, ‘bins’: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], ‘num_nodes’: [0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 9]} Related to Literature - Algorithm (Dataset tag relations) 1: Aesthetic Discrimination of Graph Layouts (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Aesthetic%20Discrimination%20of%20Graph%20Layouts%2025f75d8fd4b44bd99006e2316d28f6cd.md)\n\n\n2 Body\n\nStatistics\n\n\n\nfour_in_one.svg\n\n\n\n\nDescriptions from the Literature\nFrom “Aesthetic Discrimination of Graph Layouts”:\n\nWe have assembled such a dataset using two types of sources. First, we used the collections of the well-known graph archives ROME, NORTH and RANDDAG which are published on graphdrawing.org as well as the NIST’s “Matrix Market” [2].\n\n\n\nExample Figures\nFrom “Aesthetic Discrimination of Graph Layouts (Appendix)”:\n\n\n\nUntitled\n\n\nFig. 5. (cropped)… All graphs are visualized using the \\(FM^3\\) algorithm.\n=== STOP RENDERING ===\nMight be same as DAGmar graphs? looked at internet archive to see what the GD data website looked like in 2018 and there is no mention of RAndDAG as a thing, but there are the randomly generated DAGs which makes sense tto believe it is those."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Pert DAG 96b0f23e2c66409c928697e247c77d7c.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Pert DAG 96b0f23e2c66409c928697e247c77d7c.html",
    "title": "1 Pert DAG",
    "section": "",
    "text": "1 Pert DAG\nNote: Refer to Rome-Lib Origin Notes: Name used for Rome-Lib in “Drawing Directed Acyclic Graphs: An Experimental Study” which cites Di Battista et al.’s 1995 An experimental comparison of three graph drawing algorithms (Extended Abstract)” Graph features in papers: directed edges,layered graphs,n-layers Origin Paper: An experimental comparison of three graph drawing algorithms (extended abstract) (https://www.notion.so/An-experimental-comparison-of-three-graph-drawing-algorithms-extended-abstract-85bcd0ec675440fab9ba0c4f187b9e02?pvs=21) Originally found at: see Rome-Lib Size: see Rome-Lib Number of Graphs: 0 Child collections: Rome-Lib (Rome-Lib%20c2f20984de724f4c89764b0bc494e99e.md) Appeared in years: 1996 Type of Collection: Subset of other collection is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): Drawing Directed Acyclic Graphs: An Experimental Study (https://www.notion.so/Drawing-Directed-Acyclic-Graphs-An-Experimental-Study-a1a382e468f74a14902ad4249f2eae6a?pvs=21) cleaned format?: No duplicate?: No link works?: No Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90ec4803e0c0b00558bc1 Origin paper plaintext: An experimental comparison of three graph drawing algorithms (extended abstract) Page id: 96b0f23e2c66409c928697e247c77d7c unavailable/skip: Yes Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d947f91101aa0dc66a0c4d OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96db0803e0c0cb7558c0f OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d971aa4cf748115a055897 first look: No Related to Literature - Algorithm (Dataset tag relations) 1: Drawing Directed Acyclic Graphs: An Experimental Study (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Drawing%20Directed%20Acyclic%20Graphs%20An%20Experimental%20St%201677531652194663b7fdf25025c61cc6.md)\n\n\n2 Body\n=== STOP RENDERING ===\nCANDIDATE FOR REMOVALK (JOIN WWITH ROMELIB)\nFrom “An experimental comparison of three graph drawing algorithms” (note: it’s talking about Rome-lib):\n\n\n\nScreen Shot 2023-05-09 at 1.22.31 PM.png"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Padia Stories c02a38b9ea5e40bfb682ae77e2ac23af.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Padia Stories c02a38b9ea5e40bfb682ae77e2ac23af.html",
    "title": "1 Padia Stories",
    "section": "",
    "text": "1 Padia Stories\nOrigin Notes: These consist of fabricated narratives for characters of popular culture franchises, namely “The Witcher” and “Friends”. They were proposed by Kapesh Padia et al. as case studies for “https://doi.org/10.20380/GI2018.05”. graph features handled: layered graphs, temporal event sequence Graph features in papers: clusters (pre-existing),dynamic (discrete),layered graphs,n-layers Origin Paper: Yarn: Generating Storyline Visualizations Using HTN Planning (https://www.notion.so/Yarn-Generating-Storyline-Visualizations-Using-HTN-Planning-f5cd3d96b99046ecb2936a12fc1ad0d8?pvs=21) Appeared in years: 2018,2019 Type of Collection: Skip is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): Yarn: generating storyline visualizations using HTN planning (https://www.notion.so/Yarn-generating-storyline-visualizations-using-HTN-planning-76a49c2b1f2541628c6971986bceb008?pvs=21), A system for generating storyline visualizations using hierarchical task network planning (https://www.notion.so/A-system-for-generating-storyline-visualizations-using-hierarchical-task-network-planning-ec16ce5ae8bd43db972e2f77ae829ce3?pvs=21) cleaned format?: Yes duplicate?: No link works?: No Added in paper: No Origin paper plaintext: Yarn: Generating Storyline Visualizations Using HTN Planning Page id: c02a38b9ea5e40bfb682ae77e2ac23af unavailable/skip: Yes Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: Yarn: generating storyline visualizations using HTN planning (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Yarn%20generating%20storyline%20visualizations%20using%20HTN%20c2613f33ff704f2eb5092e8db9ab9c28.md), A system for generating storyline visualizations using hierarchical task network planning (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20system%20for%20generating%20storyline%20visualizations%20u%202223a30b41a04953890d0d91ecb036c7.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom ’’Yarn: Generating Storyline Visualizations Using HTN Planning”:\n\nFor our first example we use a narrative adapted from the video game Witcher 2 to show the capabilities of Yarn. In our example narrative, the hero, Geralt of Rivia needs to rescue his friend, Triss Merigold, who has mysteriously disappeared. On his journey to find her he must first determine where she was seen last, talk to multiple friends, and resolve a conflict between a troll couple before he can meet her. There are two choice points in this narrative: first, Margot can either choose to help Geralt or refuse to provide help; second, the troll couple can either accept or reject Geralt’s solution to their conflict. Each of these choices affects the outcome of the narrative creating three possible timelines. The first timeline contains events favorable to Geralt. In this timeline, Margot agrees to help Geralt and the troll couple accept Geralt’s solution leading him to find Triss. Fig. 5 shows a visualization of this outcome as the reality timeline for our narrative. We can see that Geralt was able to successfully track Triss’s last known location, gather information from friends, resolve a conflict between the trolls, and meet Triss. Note that in this visualization we are showing the default, reality timeline and all links are drawn with 100% opacity. We can also observe all single-entity events in the narrative in this visualization. In the second timeline, the trolls reject Geralt’s solution to their conflict. Fig. 6 shows a visualization of this unfavorable outcome as diegetic timeline overlaid on top of the reality timeline. While most of the events are same in both timelines, the diegetic timeline ends at the event “Speak to She-Troll.” The reduced opacity of the reality timeline allows the user to compare common sections of the two timelines, even when one of them is smaller than the other. In the third timeline, Margot refuses to help Geralt preventing him from progressing further on his quest. This is the shortest timeline in our narrative.\n\nFrom ’’Yarn: Generating Storyline Visualizations Using HTN Planning”:\n\nFor our second example we use a fictional narrative scenario based on the popular sitcom Friends. In this narrative, Ross’s plan is to take Rachel on a date. To do so, he must acquire more information about her, find some way of talking to her, ensure she is positively disposed towards him, and eventually ask her out. He can acquire more information about her in a number of ways including calling her mother, or asking Phoebe about her by either call or text. To ensure she is in a positive mood, he can either give her a gift or say nice things to her, and finally he can either ask her out himself or ask for Phoebe’s help. To illustrate causality of events in the narrative timeline, we have set up the operator functions for Rachel such that she is more inclined to say yes to Ross if he talks to her mother rather than requesting Phoebe’s help. Additionally, Rachel’s probability of accepting Ross’s proposal is also dependent on how impressed she is by him when he asks her. There are four choice points in this narrative: three for Ross, and one for Rachel. The choices made by Ross create 12 alternate timelines, each illustrating a different way in which he can ask Rachel out. Towards the end of each timeline Rachel can decide to either reply yes to Ross, or reply no, creating a total of 24 timelines. Fig. 7 shows a visualization where Rachel agrees to go out with Ross in both timelines. While the timelines result in the same outcome, and visually look the same, we can inspect the labels on top of the events in Ross’s timeline to identify the differences. Lighter labels correspond to the reality timeline, while darker labels correspond to the diegetic timeline. In the reality timeline, Ross decided to give a gift to Rachel after talking to her mom, while in the diegetic timeline he decided to act friendly with her. Fig. 8 shows another visualization for the same narrative. In this example we can see the effect of causal conditions set in the operator functions for Rachel. In the reality timeline, Rachel decided not to go out with Ross because he asked Phoebe for help by messaging her. On the other hand, she agreed to go out with him in the diegetic timeline because in this case Ross decided to talk to her mother.\n\n\n\nExample Figures\nFrom ’’Yarn: Generating Storyline Visualizations Using HTN Planning”:\n\n\n\nUntitled"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Neural Network badcd1335be24b1e8acee792794d84a4.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Neural Network badcd1335be24b1e8acee792794d84a4.html",
    "title": "1 Neural Network",
    "section": "",
    "text": "1 Neural Network\nNote: The datasets are architecture graphs of trained machine learning networks. We do not provide the graphs corresponding to these models, as their structures are not fully described in the literature. Origin Notes: The cifar and mnist_simple models are provided by http://tensorflow.org/. The authors of “https://doi.org/10.1109/TVCG.2016.2598831” use a trained convolutional neural network of their own design which they call BaseCNN. Graph features in papers: bundled edges (generated),clusters (generated),directed edges,hierarchical,high degree,labeled edges,labeled nodes,layered graphs,multivariate,n-layers,bundled edges (generated),clusters (generated),directed edges,layered graphs,n-layers Appeared in years: 2018,2017 Type of Collection: Skip is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): Towards Better Analysis of Deep Convolutional Neural Networks (https://www.notion.so/Towards-Better-Analysis-of-Deep-Convolutional-Neural-Networks-5faa94b80ecb4f389583b05dd5aaa317?pvs=21), Visualizing Dataflow Graphs of Deep Learning Models in TensorFlow (https://www.notion.so/Visualizing-Dataflow-Graphs-of-Deep-Learning-Models-in-TensorFlow-b2022ee0e0464bc68c47b8a86262b212?pvs=21) cleaned format?: No duplicate?: No link works?: No Added in paper: No Page id: badcd1335be24b1e8acee792794d84a4 unavailable/skip: Yes Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: Visualizing Dataflow Graphs of Deep Learning Models in TensorFlow (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Visualizing%20Dataflow%20Graphs%20of%20Deep%20Learning%20Model%20b7f88659be534c84b6a37226f945c66a.md), Towards Better Analysis of Deep Convolutional Neural Networks (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Towards%20Better%20Analysis%20of%20Deep%20Convolutional%20Neur%2024912d7e869548a591e8fa8cba0417fe.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “Towards Better Analysis of Deep Convolutional Neural Networks”:\n\n\n\nScreen Shot 2023-08-17 at 3.07.46 PM.png\n\n\n\n\nExample Figures\nFrom “Towards Better Analysis of Deep Convolutional Neural Networks”:\n\n\n\nUntitled\n\n\nFrom “Visualizing Dataflow Graphs of Deep Learning Models in TensorFlow”:\n\n\n\nScreen Shot 2023-08-17 at 3.04.44 PM.png"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Militarized Interstate Disputes (MID) 27d9df7d11e44a9596267bb930bc6f03.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Militarized Interstate Disputes (MID) 27d9df7d11e44a9596267bb930bc6f03.html",
    "title": "1 Militarized Interstate Disputes (MID)",
    "section": "",
    "text": "1 Militarized Interstate Disputes (MID)\nOrigin Notes: Collected as part of the https://correlatesofwar.org/data-sets/MIDs/ project. graph features handled: dynamic, temporal event sequence Graph features in papers: dynamic,dynamic (discrete),layered graphs,n-layers,clusters (pre-existing),dynamic,dynamic (discrete),layered graphs,n-layers Origin Paper: The MID5 Dataset, 2011–2014: Procedures, coding rules, and description (https://www.notion.so/The-MID5-Dataset-2011-2014-Procedures-coding-rules-and-description-68e2449950584fdeb99e5d016704b585?pvs=21) Originally found at: https://correlatesofwar.org/data-sets/MIDs/ Size: The dataset consists of 2 disconnected temporal event sequence graphs, one with 11,766 nodes and 5,883 edges, and the other with 9,619 nodes and 8,017 edges. Number of Graphs: 2 Appeared in years: 2012,2013 Type of Collection: Uniform Benchmark is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Design Considerations for Optimizing Storyline Visualizations (https://www.notion.so/Design-Considerations-for-Optimizing-Storyline-Visualizations-7d26fa762ce44baa96b51c7361bfed17?pvs=21), StoryFlow: Tracking the Evolution of Stories (https://www.notion.so/StoryFlow-Tracking-the-Evolution-of-Stories-a5e01c41d9ce44769f4cd154d4c293e3?pvs=21) cleaned format?: Yes duplicate?: No link works?: Yes Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90e8f0c2b4d0d2e38626d Origin paper plaintext: The MID5 Dataset, 2011–2014: Procedures, coding rules, and description Page id: 27d9df7d11e44a9596267bb930bc6f03 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d9481e4cf7481059055704 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96e2a1101aa0e9f6a0bd5 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d971de0c2b4d0f6438644d first look: Yes sparkline data: {‘min’: 156, ‘max’: 199, ‘step_size’: 50, ‘num_bins’: 4, ‘bins’: [0, 50, 100, 150], ‘num_nodes’: [0, 0, 0, 2]} Related to Literature - Algorithm (Dataset tag relations) 1: Design Considerations for Optimizing Storyline Visualizations (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Design%20Considerations%20for%20Optimizing%20Storyline%20Vis%200a518ed402154bdcb136759d50e09b1b.md), StoryFlow: Tracking the Evolution of Stories (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/StoryFlow%20Tracking%20the%20Evolution%20of%20Stories%2085d6352e70a54f3e8840adcfea70363a.md)\n\n\n2 Body\n\nDescription From Literature\nFrom Design Considerations for Optimizing Storyline Visualizations:\n\nFor the time-varying network, we use the Militarized Interstate Dispute (MID) network dataset [19].\n\n\nFor example, in the MID network dataset, which consists of 196 nations and 740 time steps, the genome length was reduced from 1714 to 432, allowing the algorithm to gain a considerable speedup.\n\nFrom StoryFlow: Tracking the Evolution of Stories:\n\nWe conducted the experiment based on three movie datasets and a network dataset: Star Wars, Inception, The Matrix, and the MID network dataset (from 1817 to 1947).\n\n\n\nExample Figures\nFrom Design Considerations for Optimizing Storyline Visualization:\n\n\n\nScreen Shot 2023-01-21 at 2.41.34 PM.png\n\n\n== STOP RENDERING ==\nEarliest Citation on Website for version 2.1: Jones, Daniel M., Stuart A. Bremer and J. David Singer. 1996 .”Militarized Interstate Disputes, 1816-1992: Rationale, Coding Rules, and Empirical Patterns.” Conflict Management and Peace Science 15 :163-213\nWas originally here:\nhttp://psfaculty.ucdavis.edu/zmaoz/dyadmid.html\nDesign Considerations for Optimizing Storyline Visualizations\nOr here: https://correlatesofwar.org/COW2 Data/MIDs/MID310.html from StoryFlow: Tracking the Evolution of Stories\nNow it’s here: https://correlatesofwar.org/data-sets/MIDs/\nAnd linked to by Z. Maoz’s website: https://zmaoz.faculty.ucdavis.edu/data-sets/\nStoryFlow: Tracking Evolution of Stories had no visualization-\n“We failed to generate the storyline layout of the MID data, so we used the results provided by Tanahashi.”\nVersion 5 Bibliography entry:\nPalmer, Glenn, Roseanne W. McManus, Vito D’Orazio, Michael R. Kenwick, Mikaela Karstens, Chase Bloch, Nick Dietrich, Kayla Kahn, Kellan Ritter, Michael J. Soules. 2020. “The MID5 Dataset, 2011-2014: Procedures, Coding Rules, and Description.” Conflict Management and Peace Science , 39(4): 470-482. DOI: https://journals.sagepub.com/doi/full/10.1177/0738894221995743\nPart of Storylines data\n=== STOP RENDERING ==="
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Matrix Market 80bd4320417342458aefa031cf65db1f.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Matrix Market 80bd4320417342458aefa031cf65db1f.html",
    "title": "1 Matrix Market",
    "section": "",
    "text": "1 Matrix Market\nNote: A repository of test data for use in comparative studies of algorithms for numerical linear algebra, featuring nearly 500 sparse matrices from a variety of applications, as well as matrix generation tools and services. Origin Notes: Compiled by the https://math.nist.gov/mcsd/ of the http://www.itl.nist.gov/ of the http://www.nist.gov/ graph features handled: dense, edge weighted, large, sparse Graph features in papers: generic,generic,large,generic,weighted edges,large Origin Paper: Matrix Market: a web resource for test matrix collections (https://www.notion.so/Matrix-Market-a-web-resource-for-test-matrix-collections-53a2935e0af842bf86971553c4f823dc?pvs=21) Originally found at: https://math.nist.gov/MatrixMarket/index.html Appeared in years: 2018,2005,2006,2020 Type of Collection: Established Network Repo (No report) is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): Drawing graphs by eigenvectors: theory and practice (https://www.notion.so/Drawing-graphs-by-eigenvectors-theory-and-practice-1b5e3919d8c94ad18f29f20c7480b07a?pvs=21), ? Aesthetic Discrimination of Graph Layouts (https://www.notion.so/Aesthetic-Discrimination-of-Graph-Layouts-98cc70abc7424e7895cf73e988563219?pvs=21), Eigensolver methods for progressive multidimensional scaling of large data (https://www.notion.so/Eigensolver-methods-for-progressive-multidimensional-scaling-of-large-data-b5ab815edb48469192605e5ad31329c0?pvs=21), Graph Drawing by Stress Majorization (https://www.notion.so/Graph-Drawing-by-Stress-Majorization-bb89493301a244b78710704ffd727140?pvs=21) cleaned format?: No duplicate?: No link works?: Yes Added in paper: No Origin paper plaintext: Matrix Market: a web resource for test matrix collections Page id: 80bd4320417342458aefa031cf65db1f unavailable/skip: Yes Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: Aesthetic Discrimination of Graph Layouts (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Aesthetic%20Discrimination%20of%20Graph%20Layouts%2025f75d8fd4b44bd99006e2316d28f6cd.md), Drawing graphs by eigenvectors: theory and practice (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Drawing%20graphs%20by%20eigenvectors%20theory%20and%20practice%2039ccd4aeec6448f8a58d51b986c9d097.md), Eigensolver methods for progressive multidimensional scaling of large data (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Eigensolver%20methods%20for%20progressive%20multidimension%20b4b33cff0cf94e8db1fd3dcdab73f9e4.md), Graph Drawing by Stress Majorization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Graph%20Drawing%20by%20Stress%20Majorization%20041a912bda5f47cfb88a71f980f4f8d9.md), Sublinear Time Force Computation for Big Complex Network Visualization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Sublinear%20Time%20Force%20Computation%20for%20Big%20Complex%20N%20999af7d2d1c942628bada6371a87100f.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “Graph Drawing by Stress Majorization”:\n\nThe first example is the 1138Bus graph (|V|=1138, |E|=1458) from the Matrix Market repository [1]. This graph models a network of high-voltage power distribution lines. Figure 4 shows two layouts of this graph.\n\n\n\nExample Figures\nFrom “Drawing graphs by eigenvectors: theory and practice” (top two layouts are a Matrix Market graph):\n\n\n\nScreen Shot 2023-08-17 at 9.59.19 AM.png\n\n\nFrom “Graph Drawing by Stress Majorization”:\n\n\n\nScreen Shot 2023-08-17 at 11.13.32 AM.png"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/KnownCR ed33d600c65e4c52a1506a905b774335.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/KnownCR ed33d600c65e4c52a1506a905b774335.html",
    "title": "1 KnownCR",
    "section": "",
    "text": "1 KnownCR\nNote: The papers in our literature search did not show graph layouts in their evaluations. Hence, we do not show example figures. Origin Notes: The graphs themselves do not appear to exist online elsewhere, but the method by which they can be created is fully described in https://eldorado.tu-dortmund.de/handle/2003/27430?mode=full. graph features handled: known crossing number, nonplanar Graph features in papers: generic Origin Paper: Application of SPQR-Trees in the Planarization Approach for Drawing Graphs (https://www.notion.so/Application-of-SPQR-Trees-in-the-Planarization-Approach-for-Drawing-Graphs-bb599af3f78d4be292c6bfdb643235c7?pvs=21) Size: 9-250 nodes, 18-750 edges Appeared in years: 2021,2019,2011 Type of Collection: Uniform Benchmark is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): An effective crossing minimisation heuristic based on star insertion (https://www.notion.so/An-effective-crossing-minimisation-heuristic-based-on-star-insertion-888933e03a604489ada5360688abe597?pvs=21), Advances in the Planarization Method: Effective Multiple Edge Insertions (https://www.notion.so/Advances-in-the-Planarization-Method-Effective-Multiple-Edge-Insertions-c518ce875daa4fe7b003ad506eb9a347?pvs=21), Star-Struck by Fixed Embeddings: Modern Crossing Number Heuristics (https://www.notion.so/Star-Struck-by-Fixed-Embeddings-Modern-Crossing-Number-Heuristics-d8f0e972b962439d8b368e8a28a7046a?pvs=21) cleaned format?: Yes duplicate?: No link works?: No Added in paper: Yes OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90ef60c2b4d0d2e3862be Origin paper plaintext: Application of SPQR-Trees in the Planarization Approach for Drawing Graphs Page id: ed33d600c65e4c52a1506a905b774335 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d948121101aa0dc76a0c94 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96dce0c2b4d0f653862d7 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d9715c0c2b4d0f65386577 first look: No sparkline data: {‘min’: 9, ‘max’: 250, ‘step_size’: 10, ‘num_bins’: 26, ‘bins’: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250], ‘num_nodes’: [1, 27, 101, 103, 105, 103, 106, 105, 104, 106, 105, 104, 106, 104, 105, 105, 106, 103, 107, 104, 104, 106, 105, 104, 106, 45]} Related to Literature - Algorithm (Dataset tag relations) 1: Star-Struck by Fixed Embeddings: Modern Crossing Number Heuristics (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Star-Struck%20by%20Fixed%20Embeddings%20Modern%20Crossing%20Nu%20f31c2a6c7b8d4683a1820d8101f89448.md), An effective crossing minimisation heuristic based on star insertion (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20effective%20crossing%20minimisation%20heuristic%20based%205fde465c129249599b79396bf3d3ae04.md), Advances in the Planarization Method: Effective Multiple Edge Insertions (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Advances%20in%20the%20Planarization%20Method%20Effective%20Mul%20884c2bc419eb4197be261c1f1b3898ce.md)\n\n\n2 Body\n\nStatistics\n\n\n\nfour_in_one.svg\n\n\n\n\nDescription from Literature\nFrom “An effective crossing minimisation heuristic based on star insertion”:\n\nKnownCR graphs- these are a set of instances containing between 9 and 250 vertices, first collected by Gutwenger [22], which can be further partitioned into four families of graphs as follows:\n\\(C_i \\times C_j\\): The Cartesian product of the cycle on \\(i\\) vertices with the cycle on \\(j\\) vertices. The instances contain graphs with \\(3 \\leq i \\leq 7\\) and \\(j \\geq i\\) such that \\(ij \\leq 250\\).\n\\(G_i \\times P_j\\): The Cartesian product of the path on \\(j+1\\) vertices with one of the 21 non-isomorphic connected graphs on 5 vertices, where \\(i\\) denotes which of the 21. The instances contain graphs with \\(3 \\leq j \\leq 49\\).\n\\(G_i \\times C_j\\): The Cartesian product of the cycle on \\(j\\) vertices with one of the 21 non-isomorphic connected graphs on 5 vertices, where \\(i\\) denotes which of the 21. The crossing number of these graphs is only known for some of the \\(G_i\\) and only these cases are included. The instances contain graphs with \\(3 \\leq j \\leq 50\\).\nThe Generalised Petersen graphs \\(P(j,2)\\) and \\(P(j,3)\\), on \\(2j\\) vertices. We shall only use those of type \\(P(j,3)\\) as \\(P(j,2)\\) (studied in [20]) are easy for heuristics to solve, as has already been observed in [9]. The instances contain graphs with \\(9 \\leq j \\leq 125\\).\n\nFrom “Advances in the Planarization Method: Effective Multiple Edge Insertions”:\n\nFinally, the KnownCR graphs [11] are a collection of 1946 graphs with known crossing numbers (by proofs), consisting of generalized Petersen graphs (P(m, 2), P(m, 3)) and products of cycles \\(C_n\\), paths \\(P_n\\), and 5-vertex graphs \\(G_i (C_m \\times C_n, G_i \\times P_n, G_i \\times C_n)\\); these graphs have between 9 and 250 nodes.\n\n\n\nExample Figures\nFrom “Application of SPQR-Trees in the Planarization Approach for Drawing Graphs”:\n\n\n\nScreen Shot 2023-01-28 at 2.42.42 PM.png\n\n\n=== STOP RENDERING ===\nEldorado: Application of SPQR-trees in the planarization approach for drawing graphs\nFrom An effective crossing minimisation heuristic based on star insertion, “KnownCR graphs- these are a set of instances containing between 9 and 250 vertices, first collected by Gutwenger [22], which can be further partitioned into four families of graphs as follows:\n\nCi ×Cj: the Cartesian product of the cycle on i vertices with the cycle on j vertices. The instances contain graphs with 3 ≤ i ≤ 7 and j ≥i such that ij ≤ 250.\nGi×Pj: the cartesian product of the path on j+1 vertices with one of the 21 non-isomorphic connected graphs on 5 vertices, where i denotes which of the 21. The instances contain graphs with 3 ≤ j ≤ 49.\nGi ×Cj: the cartesian product of the cycle on j vertices with one of the 21 non-isomorphic connected graphs on 5 vertices, where i denotes which of the 21. The crossing number of these graphs are only known for some of the Gi and only these cases are included. The instances contain graphs with 3 ≤ j ≤ 50\nThe Generalised Petersen graphs P(j,2) and P(j,3), on 2j vertices. We shall only use those of type P(j,3) as P(j,2) (studied in [20]) are154 Clancy et al. An effective crossing minimisation heuristic easy for heuristics to solve as has already been observed in [9]. The instances contain graphs with 9 ≤ j ≤ 125.” from (An effective crossing minimisation heuristic based on star insertion, Clancy et al. )\n\nHow to construct a cartesian product graph:\n\n\n\nScreen Shot 2023-01-28 at 2.42.31 PM.png\n\n\nExample of construction:\nImages showing each Gi, and the known crossing number of Gi x Pn:\n\n\n\nScreen Shot 2023-01-28 at 2.50.06 PM.png"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Internet Mapping Project fe59286f353d4841a2a328fdd6160b2f.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Internet Mapping Project fe59286f353d4841a2a328fdd6160b2f.html",
    "title": "1 Internet Mapping Project",
    "section": "",
    "text": "1 Internet Mapping Project\nOrigin Notes: The original Internet Mapping Project started at Bell lab in 1998. It was then transferred to the Lumeta Corporation, however, links to this corporation are broken. A gallery of images still remains publicly available, hosted by Bill Cheswick on this personal website. graph features handled: dynamic, large, trees Graph features in papers: generic,high degree,large Origin Paper: Mapping the Internet (https://www.notion.so/Mapping-the-Internet-33d6bcbd3fee4c879758f276ce38c107?pvs=21) Originally found at: http://www.cheswick.com/ches/map/ http://www.lumeta.com/company/mapping.html (broken) Appeared in years: 2005 Type of Collection: Lost/Unavailable is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): Topological fisheye views for visualizing large graphs (https://www.notion.so/Topological-fisheye-views-for-visualizing-large-graphs-e2f5c279f5514a6da3a0241c978f564d?pvs=21) cleaned format?: No duplicate?: No link works?: No Added in paper: No Origin paper plaintext: Mapping the Internet Page id: fe59286f353d4841a2a328fdd6160b2f unavailable/skip: Yes Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: Topological fisheye views for visualizing large graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Topological%20fisheye%20views%20for%20visualizing%20large%20gr%2094f9c1efaeed4304bd4c6686d2962159.md)\n\n\n2 Body\n\nDescription from Literature\nFrom “Topological fisheye views for visualizing large graphs”:\n\nFig. 7 shows two topological fisheye views of a published Internet map [4]. It is a large tree (|V|=87,931, |E|=87,930) made by tracing connections from a central probe to all reachable IP subnets. The full layout of this graph in Fig. 7a is too dense to read. In contrast, our approach, seen in Fig. 7b and Fig. 7c, yields useful views by focusing on different portions of the graph.\n\n\n\nExample Figures\nFrom “Internet Mapping Project: Map Gallery”:\n\n\n\nisp-ss.gif\n\n\nLayout showing the major ISPs.\n\n\n\nUntitled\n\n\nFrom “Topological fisheye views for visualizing large graphs”:\n\n\n\nUntitled\n\n\nFig. 7. This Internet map ((|V|=87,931, |E|=87,930)) is too large to visualize as a flat structure. Two topological fisheye views are shown. The focused sections in orange are the original graph. Peripheral areas, in blue, are simplified."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/GION fb235f160e504395a884f5a18fca6f17.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/GION fb235f160e504395a884f5a18fca6f17.html",
    "title": "1 GION",
    "section": "",
    "text": "1 GION\nOrigin Notes: The data was originally collected for a Bioinformatics paper, “https://doi.org/10.1186/1471-2105-11-378”. It was then used in “https://link.springer.com/chapter/10.1007/978-3-662-45803-7_10” as a benchmark for their layout and experiment. However, the links to the original data no longer work. graph features handled: dense, large, sparse Graph features in papers: generic,large Origin Paper: GION: Interactively Untangling Large Graphs on Wall-Sized Displays (https://www.notion.so/GION-Interactively-Untangling-Large-Graphs-on-Wall-Sized-Displays-2992d3da3efa4626b5a0384500f54a4e?pvs=21), Graph-based clustering and characterization of repetitive sequences in next-generation sequencing data (https://www.notion.so/Graph-based-clustering-and-characterization-of-repetitive-sequences-in-next-generation-sequencing-da-e3dd4bdceaec4781b3d0c70693df40e0?pvs=21) Originally found at: http://wcl.ml.unisa.edu.au/graph-untangling/graphs.zip Size: 8 graphs, 1159-7885 nodes, 6424-427406 edges Number of Graphs: 8 Appeared in years: 2017,2014 Type of Collection: Lost/Unavailable is it stored properly?: No must be analyzed: Yes In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): GION: Interactively Untangling Large Graphs on Wall-Sized Displays (https://www.notion.so/GION-Interactively-Untangling-Large-Graphs-on-Wall-Sized-Displays-875925d42ff445e38ffef123e4ce771c?pvs=21), Drawing Big Graphs Using Spectral Sparsification (https://www.notion.so/Drawing-Big-Graphs-Using-Spectral-Sparsification-89da2043d0444f75a6c663b1fc999512?pvs=21) cleaned format?: No duplicate?: No link works?: No Added in paper: Yes Origin paper plaintext: GION: Interactively Untangling Large Graphs on Wall-Sized Displays, Graph-based clustering and characterization of repetitive sequences in next-generation sequencing data Page id: fb235f160e504395a884f5a18fca6f17 unavailable/skip: Yes Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: Drawing Big Graphs Using Spectral Sparsification (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Drawing%20Big%20Graphs%20Using%20Spectral%20Sparsification%20e5d3efdca48541f2b1789ec74357ebf6.md), GION: Interactively Untangling Large Graphs on Wall-Sized Displays (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/GION%20Interactively%20Untangling%20Large%20Graphs%20on%20Wall%20774568ebdd114a8790c026bfa0b125f0.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “Drawing Big Graphs Using Spectral Sparsification”:\n\nthis consists of RNA sequence graphs that are used for the analysis of repetitive sequences in sequencing data; these graphs have been used in previous experiments. They are locally dense and globally sparse, and generally have distinctive shapes.\n\nFrom “GION: Interactively Untangling Large Graphs on Wall-Sized Displays”:\n\nWe selected graphs that come from a real world application where graph visualization is used for data analysis and the graph size and layout quality requirements pose a challenge for state-of-the-art layout methods. Our graph set consists of RNA sequence graphs that are used for the analysis of repetitive sequences in sequencing data [11].\n\n\nGraph properties are provided in Table 1. The set of graphs can be downloaded from http://wcl.ml.unisa.edu.au/graph-untangling/graphs.zip. All graphs have high local density, and a sparse global structure that allows to create layouts far from hairballs that are showing the structure well.\n\n\n\n\nUntitled\n\n\n\n\nExample Figures\nFrom “GION: Interactively Untangling Large Graphs on Wall-Sized Displays”:\n\n\n\nUntitled\n\n\nFrom “Graph-based clustering and characterization of repetitive sequences in next-generation sequencing data”:\n\n\n\nUntitled\n\n\nFig. 4. Examples of graph layouts derived from clusters of repetitive sequences. Graph layouts were calculated using the 3D version of Fruchterman and Reingold algorithm from which a 2D projection is shown. Individual reads are represented by vertices and similar reads are connected by edges. Individual clusters are described further in Table 1.\n=== STOP RENDERING ===\nNOTE: eliminate the relationships between different tables\n\n\n\nUntitled\n\n\nFrom GION: Interactively Untangling Large Graphs on Wall-Sized Displays Graph properties are provided in Table 1. The set of graphs can be downloaded from\nhttp://wcl.ml.unisa.edu.au/graph-untangling/graphs.zip. All graphs have high local density, and a sparse global structure that allows to create layouts far from hairballs that are showing the structure well\nDead link! http://wcl.ml.unisa.edu.au/graph-untangling/graphs.zip ← Emailed michael@20papercups.net (seems to have left academia and this is the email under his personal website)"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Enron ed3c62b92cf14a7b86c691ac3651dab3.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Enron ed3c62b92cf14a7b86c691ac3651dab3.html",
    "title": "1 Enron",
    "section": "",
    "text": "1 Enron\nNote: Very high variance in node degrees. Data can be considered threaded and directed, although http://snap.stanford.edu/data/email-Enron.html provides a version of the network that is explicitly undirected. Origin Notes: Data made public by the Federal Energy Regulatory Commission when investigating Enron. It has had a few changes over time documented in the link. The data is currently hosted by William W. Cohen from CMU on a webiste, and it is also hosted on SNAP. SNAP asks to cite the paper linked in Origin paper. graph features handled: dynamic (discrete), generic, large Graph features in papers: dynamic,dynamic (discrete),layered graphs,n-layers Origin Paper: Introducing the Enron Corpus (https://www.notion.so/Introducing-the-Enron-Corpus-52663d33d36b4940b5966f72f6c73a70?pvs=21) Originally found at: https://www.cs.cmu.edu/~enron/ Size: The data consists of 150 Enron executives, who sent 500,000 messages between themselves. Number of Graphs: 1 Child collections: SNAP (Stanford Network Analysis Platform) (SNAP%20(Stanford%20Network%20Analysis%20Platform)%201cd77eaee57147ce8263b2f9eaa2589c.md) Appeared in years: 2015,2013 Type of Collection: Subset of other collection is it stored properly?: No must be analyzed: Yes In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): Reordering massive sequence views: Enabling temporal and structural analysis of dynamic networks (https://www.notion.so/Reordering-massive-sequence-views-Enabling-temporal-and-structural-analysis-of-dynamic-networks-59101c28c7a54141bfebd74208f0250f?pvs=21), An Efficient Framework for Generating Storyline Visualizations from Streaming Data (https://www.notion.so/An-Efficient-Framework-for-Generating-Storyline-Visualizations-from-Streaming-Data-d06da0be3b5244b791f30c22ff2b7277?pvs=21) cleaned format?: No duplicate?: No link works?: Yes Added in paper: Yes Origin paper plaintext: Introducing the Enron Corpus Page id: ed3c62b92cf14a7b86c691ac3651dab3 unavailable/skip: Yes Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: An Efficient Framework for Generating Storyline Visualizations from Streaming Data (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20Efficient%20Framework%20for%20Generating%20Storyline%20Vi%200a3f35ebac3f468cb9c3adee03f62a06.md), Reordering massive sequence views: Enabling temporal and structural analysis of dynamic networks (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Reordering%20massive%20sequence%20views%20Enabling%20tempora%20f62118d5310d44b099b3ccc71fd5a8aa.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “Reordering massive sequence views: Enabling temporal and structural analysis of dynamic networks”:\n\nWe cleaned the data set by removing duplicates, spam and only to contain internal communication between Enron employees annotated with employee function leaving us with 151 nodes (employees) and 21374 edges (emails). Visualization using a node-link diagram enables the identification of stronger connections (see Figure 9(a)). However, temporal patterns and the evolution of the network cannot be analysed. From the standard MSV (Figure 9(b)) it becomes somewhat clear that transaction density increases over time and we can distinguish between different phases. We cannot, however, see features and identify communities due to visual clutter\n\n\n\nExample Figures\nFrom “An Efficient Framework for Generating Storyline Visualizations from Streaming Data”:\n\n\n\nUntitled\n\n\nFrom “Reordering massive sequence views: Enabling temporal and structural analysis of dynamic networks”:\n\n\n\nUntitled\n\n\n=== STOP RENDERING ===\nhttps://www.cs.cmu.edu/~enron/\n150 enron executives (users), 500k messages - many more employees\nsome have attachments\ncase nodes are users: could be a very connected dataset (perhaps too few nodes) - very high variance in node degree\ncase nodes are messages: could be a sparsely connected graph\nthere’s dates → can be layered\nThis dataset was collected and prepared by the\nCALO Project\n(A Cognitive Assistant that Learns and Organizes). It contains data from about 150 users, mostly senior management of Enron, organized into folders. The corpus contains a total of about 0.5M messages. This data was originally\nmade public, and posted to the web\n, by the\nFederal Energy Regulatory Commission\nduring its investigation.\nThe email dataset was later purchased by Leslie Kaelbling at MIT, and turned out to have a number of integrity problems. A number of folks at SRI, notably Melinda Gervasio, worked hard to correct these problems, and it is thanks to them (not me) that the dataset is available. The dataset here does not include attachments, and some messages have been deleted “as part of a redaction effort due to requests from affected employees”. Invalid email addresses were converted to something of the form user@enron.com whenever possible (i.e., recipient is specified in some parse-able format like “Doe, John” or “Mary K. Smith”) and to no_address@enron.com when no recipient was specified.\nVisualizations from https://www.kaggle.com/jamestollefson/enron-network-analysis:\n\n\n\nUntitled\n\n\n\n\n\nUntitled\n\n\nThis paper definitely uses this as a layered, categorical graph - could even be a hypergraph\n\n\n\n→ unclear. Layered?"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Control Flow Graphs af079f199a2c402d8633f6d41101934b.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Control Flow Graphs af079f199a2c402d8633f6d41101934b.html",
    "title": "1 Control Flow Graphs",
    "section": "",
    "text": "1 Control Flow Graphs\nNote: This is just a subset of GraphViz, so we link to that dataset instead. Origin Notes: 14 graphs from the GraphViz test suite collected by Gansner and Hu to evaluate their PRISM algorithm in ”https://dx.doi.org/10.7155/jgaa.00198”. graph features handled: large Graph features in papers: large Size: 14 graphs, from 36 to 1463 nodes Child collections: Graphviz Examples (Graphviz%20Examples%20e90aec42f02c4e8b8a6b8727fe2f86ae.md) Appeared in years: 2016 Type of Collection: Subset of other collection is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Node Overlap Removal by Growing a Tree (https://www.notion.so/Node-Overlap-Removal-by-Growing-a-Tree-534753c850d64167892bde314403e2d6?pvs=21) cleaned format?: Yes duplicate?: Yes link works?: No Added in paper: No Page id: af079f199a2c402d8633f6d41101934b unavailable/skip: No Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: Node Overlap Removal by Growing a Tree (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Node%20Overlap%20Removal%20by%20Growing%20a%20Tree%20c69ee6ac8232493b9f8d26ed56235a6b.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “Node Overlap Removal by Growing a Tree”:\n\nOur data includes the same set of graphs that was used by the authors of PRISM to compare it with other algorithms [6]. The set is available in the Graphviz open source package.\n\n\n\nExample Figures\nFrom “Node Overlap Removal by Growing a Tree”:\n\n\n\nUntitled\n\n\n=== Stop Rendering===\n\n\n\nUntitled\n\n\n\n\n\nUntitled\n\n\n\n\n\nUntitled"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Code Dependency Graphs 3b6beec0413c486184cee398056e6c87.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Code Dependency Graphs 3b6beec0413c486184cee398056e6c87.html",
    "title": "1 Code Dependency Graphs",
    "section": "",
    "text": "Note: Various software call dependency graphs have been used in the literature. We provide the benchmarks used in ““https://onlinelibrary.wiley.com/doi/full/10.1111/cgf.13724”, as these posed the most comprehensive and available collection. “https://ieeexplore.ieee.org/document/6065001” used a software call graph from a device called a “Phillips Medical System Eindhoven medical scanner”, which is lost. Python and Eclipse subversion control logs are also currently lost. Origin Notes: The authors of “https://ieeexplore.ieee.org/document/6065001” used https://depfind.sourceforge.io/ to extract the commit history. graph features handled: directed edges Graph features in papers: dynamic,layered graphs,n-layers,weighted edges,bundled edges (generated),compound graphs,hierarchical,dynamic,dynamic (discrete),layered graphs,n-layers,layered graphs,n-layers Origin Paper: A Random Sampling O(n) Force-calculation Algorithm for Graph Layouts (https://www.notion.so/A-Random-Sampling-O-n-Force-calculation-Algorithm-for-Graph-Layouts-a0bc2ae6ebdb4e8cbddb924c0484cfad?pvs=21) Originally found at: http://vis.cs.ucdavis.edu/~ogawa/datasets/ (broken) https://osf.io/dcz5h Size: 128-2956 nodes, 310-10845 edges Number of Graphs: 11 Appeared in years: 2011,2006,2015,2018 Type of Collection: Aggregate collection is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Hierarchical Edge Bundles: Visualization of Adjacency Relations in Hierarchical Data (https://www.notion.so/Hierarchical-Edge-Bundles-Visualization-of-Adjacency-Relations-in-Hierarchical-Data-697233ee3f8d4d25b96f61924fca0cc9?pvs=21), Parallel Edge Splatting for Scalable Dynamic Graph Visualization (https://www.notion.so/Parallel-Edge-Splatting-for-Scalable-Dynamic-Graph-Visualization-789b312aeab84d299667fe1278554820?pvs=21), An Efficient Framework for Generating Storyline Visualizations from Streaming Data (https://www.notion.so/An-Efficient-Framework-for-Generating-Storyline-Visualizations-from-Streaming-Data-d06da0be3b5244b791f30c22ff2b7277?pvs=21) cleaned format?: Yes duplicate?: No link works?: No Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90f0994a6be0ec112e76b Origin paper plaintext: A Random Sampling O(n) Force-calculation Algorithm for Graph Layouts Page id: 3b6beec0413c486184cee398056e6c87 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d94840803e0c0bf6558bd1 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96dc01101aa0ea66a0bee OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d970111101aa0ea36a0c62 first look: No sparkline data: {‘min’: 128, ‘max’: 2956, ‘step_size’: 1000, ‘num_bins’: 3, ‘bins’: [0, 1000, 2000], ‘num_nodes’: [8, 1, 2]} Related to Literature - Algorithm (Dataset tag relations) 1: Parallel Edge Splatting for Scalable Dynamic Graph Visualization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Parallel%20Edge%20Splatting%20for%20Scalable%20Dynamic%20Graph%208fed21af91cf4c4aaf6a05ccb0335d43.md), Hierarchical Edge Bundles: Visualization of Adjacency Relations in Hierarchical Data (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Hierarchical%20Edge%20Bundles%20Visualization%20of%20Adjacen%208a6e80b49e2540cf8b0c8da83bbda7ff.md), An Efficient Framework for Generating Storyline Visualizations from Streaming Data (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20Efficient%20Framework%20for%20Generating%20Storyline%20Vi%200a3f35ebac3f468cb9c3adee03f62a06.md), CFGExplorer: Designing a Visual Control Flow Analytics System around Basic Program Analysis Operations (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/CFGExplorer%20Designing%20a%20Visual%20Control%20Flow%20Analyt%20656cb91a95ea4c6cbfca60aa5ab8707b.md)"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Code Dependency Graphs 3b6beec0413c486184cee398056e6c87.html#software-dependency-calls",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Code Dependency Graphs 3b6beec0413c486184cee398056e6c87.html#software-dependency-calls",
    "title": "1 Code Dependency Graphs",
    "section": "2.1 Software Dependency Calls",
    "text": "2.1 Software Dependency Calls\n\nDescriptions from Literature\nFrom “A Random Sampling O(n) Force-calculation Algorithm for Graph Layouts”:\n\nThe software graphs show dependencies in several software packages [vB11, vB02, vB12, vBB13, vvBB14].\n\nFrom “Parallel Edge Splatting for Scalable Dynamic Graph Visualization”:\n\nWe collected the 21 available releases of JUnit as compiled Java bytecode and extracted the method call dependencies using DependencyFinder (depfind. sourceforge.net). The package and class structure provides a natural hierarchy on the methods of the system. The resulting dynamic graph consists of 2,817 vertices connected by 15,339 edges, where each edge is weighted by 1.\n\n\n\nExample Figures\nFrom Parallel Edge Splatting for Scalable Dynamic Graph Visualization:\n\n\n\nUntitled\n\n\nFig. 6. Call dependencies between methods in 21 releases of the JUnit project: all (top), added (left), and removed (right) dependencies."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Code Dependency Graphs 3b6beec0413c486184cee398056e6c87.html#phillips-medical-software-call-graph-lost",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Code Dependency Graphs 3b6beec0413c486184cee398056e6c87.html#phillips-medical-software-call-graph-lost",
    "title": "1 Code Dependency Graphs",
    "section": "2.2 Phillips Medical Software Call Graph (Lost)",
    "text": "2.2 Phillips Medical Software Call Graph (Lost)\n\nDescriptions from Literature\nFrom “Hierarchical Edge Bundles: Visualization of Adjacency Relations in Hierarchical Data”:\n\nThe software is part of a medical scanner and was provided by Philips Medical Systems Eindhoven. Three hierarchy levels – layers, units, and modules – consisting of 284 nodes are used together with the associated call graph for the elements at the lowest level of the hierarchy, i.e., 1,011 adjacency relations representing module-to-module calls.\n\n\n\nExample Figures\nFrom “Hierarchical Edge Bundles: Visualization of Adjacency Relations in Hierarchical Data”:\n\n\n\nUntitled\n\n\nFig. 13. A software system and its associated call graph (caller = green, callee = red). (a) and (b) show the system with bundling strength β = 0.85 using a balloon layout (node labels disabled) and a radial layout, respectively. Bundling reduces visual clutter, making it easier to perceive the actual connections than when compared to the non-bundled versions (figures 2a and 11a). Bundled visualizations also show relations between sparsely connected systems more clearly (encircled regions); these are almost completely obscured in the non-bundled versions. The encircled regions highlight identical parts of the system for (a), (b), and figure 15.\n\n\nSubversion Control Logs (Lost)\nFrom “An Efficient Framework for Generating Storyline Visualizations from Streaming Data”:\n\nThe datasets we used for this study were: … Python Subversion Control Logs (Python) [30]  Eclipse Subversion Control Logs (Eclipse) [30] … These datasets all contained temporal logs of events in which entities interact.\n\n=== STOP RENDERING ==\nI cannot find the Phillips medical software call graphs - the paper implies they were directly given to the author so it might be hard to get.\nSubversion control logs also lost. Broken link from UCDavis.\nM. Ogawa. Software development history logs [Online]. Available: http://vis.cs.ucdavis.edu/~ogawa/datasets/, Jan. 2015."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Chess Games 023a47d6ae914567a05132ac1dfbe972.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Chess Games 023a47d6ae914567a05132ac1dfbe972.html",
    "title": "1 Chess Games",
    "section": "",
    "text": "1 Chess Games\nNote: The data used in the literature focuses on the 200 most common openings. These are all sequences of 6 moves and are topologically equivalent. Origin Notes: 20,058 chess openings from games in a database of played online chess games. The authors of “Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes” collected the dataset online from the data science platform kaggle. The dataset was collected by user Mitchell J and collects data from the chess website Lichess.org. graph features handled: categorical nodes, layered graphs, temporal event sequence Graph features in papers: dynamic,dynamic (discrete),layered graphs,n-layers Origin Paper: Chess Game Dataset (Lichess) (https://www.notion.so/Chess-Game-Dataset-Lichess-0a1269481c8345e18294bb6c2f2a6b58?pvs=21) Originally found at: https://www.kaggle.com/datasets/datasnaek/chess?resource=download https://github.com/VisDunneRight/sequence_braiding/blob/master/data/chess.json Size: The data consists of 20058 sequences, which result in a disconnected graph of 118164 nodes, and 98106 edges. Appeared in years: 2020 Type of Collection: Single Graph is it stored properly?: No must be analyzed: Yes In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes (https://www.notion.so/Sequence-Braiding-Visual-Overviews-of-Temporal-Event-Sequences-and-Attributes-54be1011c0324f04bcc2bafa58b89859?pvs=21) cleaned format?: Yes duplicate?: No link works?: Yes Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90eed4cf7480eef055740 Origin paper plaintext: Chess Game Dataset (Lichess) Page id: 023a47d6ae914567a05132ac1dfbe972 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d948ae4cf74810580556b8 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96e1b0c2b4d0f65386312 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d9705494a6be112912e9d0 first look: No sparkline data: {‘min’: 0, ‘max’: 2, ‘step_size’: 1, ‘num_bins’: 3, ‘bins’: [0, 1, 2], ‘node_degree’: [203, 39710, 78251]} Related to Literature - Algorithm (Dataset tag relations) 1: Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Sequence%20Braiding%20Visual%20Overviews%20of%20Temporal%20Eve%204dfe62dc294b4ef1b453ecf09be2ea0f.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes”:\n\n200 Chess openings displayed with Sequence Braiding. Each line represents a sequence of moves of the white player, each group is a chess piece type. Most openings start with a pawn, and very little with the knight.\n\n\n\nExample Figures\nFrom “Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes”:\n\n\n\nScreen Shot 2023-01-21 at 2.15.02 PM.png\n\n\nFig. 7. 200 Chess openings displayed with Sequence Braiding. Each line represents a sequence of moves of the white player, each group is a chess piece type. Most openings start with a pawn, and very little with the knight. After moving a pawn, it is common to move a knight or a pawn, it is a little less common to move a bishop, and only a little number of openings move the queen on the second move."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/California e0a841bc57c045b5a8514110cfe85635.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/California e0a841bc57c045b5a8514110cfe85635.html",
    "title": "1 California",
    "section": "",
    "text": "1 California\nNote: Data contains links related to an online search of the word “California” as nodes. Origin Notes: We found this dataset on the webpage of a 2002 computer science course at Cornell, instructed by Jon Kleinberg. The original name was Pages that match the word “California”. They mention how the data was queried from a search engine, and that many of the original links are broken. It is not clear whether Kleinberg collected the data, or compiled it for the course. graph features handled: clusters (generated), large Graph features in papers: clusters (generated),generic,large,generic,large Origin Paper: The Structure of Information Networks (https://www.notion.so/The-Structure-of-Information-Networks-67360c3311c1485e93e0dd5f1ee2c6f6?pvs=21) Originally found at: https://www.cs.cornell.edu/courses/cs685/2002fa/data/gr0.California Size: 4772 nodes, 8965 edges format: first character determines node or edge (n/e). For nodes, we then have node id and the link of the webpage. For edges we have two node ids.\nn 1 www.link.com … e 1 200 Appeared in years: 2008 Type of Collection: Single Graph is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): A Treemap Based Method for Rapid Layout of Large Graphs (https://www.notion.so/A-Treemap-Based-Method-for-Rapid-Layout-of-Large-Graphs-7d9e14d48d9e452da4fcf8b64b007ea5?pvs=21), Rapid Graph Layout Using Space Filling Curves (https://www.notion.so/Rapid-Graph-Layout-Using-Space-Filling-Curves-847c46047b5c400bb9dcf339c8d42f12?pvs=21) cleaned format?: Yes duplicate?: No link works?: Yes Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90e48803e0c0b00558baa Origin paper plaintext: The Structure of Information Networks Page id: e0a841bc57c045b5a8514110cfe85635 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d9492e803e0c0c0f558b9d OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d94da70c2b4d0ea138634b OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d9700094a6be112912e9a5 first look: Yes sparkline data: {‘min’: 0, ‘max’: 175, ‘step_size’: 10, ‘num_bins’: 18, ‘bins’: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170], ‘node_degree’: [4401, 246, 54, 20, 17, 5, 7, 4, 4, 2, 1, 0, 5, 2, 1, 0, 1, 2]} Related to Literature - Algorithm (Dataset tag relations) 1: A Treemap Based Method for Rapid Layout of Large Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Treemap%20Based%20Method%20for%20Rapid%20Layout%20of%20Large%20G%20f96d2a808a5f4df2a781d9a890e2b266.md), Rapid Graph Layout Using Space Filling Curves (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Rapid%20Graph%20Layout%20Using%20Space%20Filling%20Curves%2010601cd6078a4ea18b17c7d40eda0041.md)\n\n\n2 Body\n\nStatistics\n\n\n\ndegree_distr.svg\n\n\n\n\nDescriptions from Literature\nFrom “A Treemap Based Method for Rapid Layout of Large Graphs”:\n\nThis particular graph is a non-weighted graph of links between search results for the word “California” (also in Figures 6, 8, and 9, |V|=6107,|E|=15160).\n\nFrom “Rapid Graph Layout Using Space Filling Curves”:\n\nThe “california” dataset (shown in Figures 5 and 8) consists of the links between the webpages found from a search for the word ‘California’ [4].\n\n\n\nExample Figures\nFrom “A Treemap Based Method for Rapid Layout of Large Graphs”:\n\n\n\nUntitled\n\n\nFig. 1. A graph laid out using our treemap based approach. This graph portrays the links between websites that came from a search on the word “California” [7]. Nodes are clustered into a hierarchy, and laid out by applying a treemap to this hierarchy. Levels of the hierarchy below a threshold are clustered together into larger nodes. It can very easily be seen that there are three primary groups of websites that link to each other, and a plethora of others that are not as tightly linked.\nFrom “Rapid Graph Layout Using Space Filling Curves”:\n\n\n\nUntitled\n\n\nFig. 5 Separating clusters. By adjusting the spacing between nodes according to the clustering information, clusters can be separated.\n== STOP RENDERING ==\nhttps://www.cs.cornell.edu/courses/cs685/2002fa/data/gr0.California"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Blogposts, Tweets, and Forums e315a82238dc40c5a3559c81ef7c57c8.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Blogposts, Tweets, and Forums e315a82238dc40c5a3559c81ef7c57c8.html",
    "title": "1 Blogposts, Tweets, and Forums",
    "section": "",
    "text": "Note: In the surveyed papers we found various instances of blogposts, tweets, and forum posts. Many of these are timestamped posts that connect user mentions, textually derived entities, hashtags, or user actions on posts. We provide a selection of Blogposts, Tweets, and MOOC (a student forum) as found in the literature. Origin Notes: Time Arcs uses AMERICAblog, Huffington Post, and other sources (corpus_ner_geo) data which can be found at https://github.com/CreativeCodingLab/TimeArcs/tree/master/Text/data.\nFast filtering uses the Twitter gardenhouse streaming API to collect data on the 2013 Super Bowl and the announcement of Osama Bin Laden’s death, both can be found https://github.com/WICI/fastviz/tree/master/data (shared hashtags).\nEvent-based Dynamic Graph Drawing without the Agonizing Pain uses the rugby tweet dataset (pro12_mentions) consisting of mentions among the members of the GuinessPro12 competition, and the MOOC dataset from the http://moocdata.cn/challenges/kdd-cup-2015 (A data challenge). graph features handled: dynamic, hypergraph, layered graphs Graph features in papers: dynamic,generic,dynamic,dynamic (continuous),large,dynamic,dynamic (discrete),layered graphs,n-layers,dynamic (discrete) Origin Paper: Understanding Dropouts in MOOCs (https://www.notion.so/Understanding-Dropouts-in-MOOCs-a97966fe379c49c9a597ac30e7b838a1?pvs=21), TimeArcs: Visualizing Fluctuations in Dynamic Networks (https://www.notion.so/TimeArcs-Visualizing-Fluctuations-in-Dynamic-Networks-e671c46ecfa444efaf28392636402266?pvs=21), Fast filtering and animation of large dynamic networks (https://www.notion.so/Fast-filtering-and-animation-of-large-dynamic-networks-2f5aa0b43a394030865509b15a945847?pvs=21) Originally found at: http://moocdata.cn/data/user-activity https://github.com/CreativeCodingLab/TimeArcs https://github.com/WICI/fastviz/tree/master/data\nSize: 12-386412 nodes, 3151-556820 edges Appeared in years: 2008,2020,2014,2016,2022 Type of Collection: Aggregate collection is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): The Turing Test for Graph Drawing Algorithms (https://www.notion.so/The-Turing-Test-for-Graph-Drawing-Algorithms-2a183bdf85bf4ab0acb311d5b9615440?pvs=21), TimeArcs: Visualizing Fluctuations in Dynamic Networks (https://www.notion.so/TimeArcs-Visualizing-Fluctuations-in-Dynamic-Networks-968889d3ca4a4109aca698513515e837?pvs=21), Fast filtering and animation of large dynamic networks (https://www.notion.so/Fast-filtering-and-animation-of-large-dynamic-networks-a9ecbc1aa880473b834754638c54026b?pvs=21), Online Dynamic Graph Drawing (https://www.notion.so/Online-Dynamic-Graph-Drawing-ae22e4cc10ec451bb95c2ba6cfc35499?pvs=21) cleaned format?: Yes duplicate?: No link works?: Yes Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d94add4cf7481071055619 Origin paper plaintext: Understanding Dropouts in MOOCs, TimeArcs: Visualizing Fluctuations in Dynamic Networks, Fast filtering and animation of large dynamic networks Page id: e315a82238dc40c5a3559c81ef7c57c8 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d9497a0c2b4d0e8c386228 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96da194a6be112a12e740 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d971111101aa0ea36a0cb6 first look: Yes sparkline data: {‘min’: 12, ‘max’: 386412, ‘step_size’: 200000, ‘num_bins’: 2, ‘bins’: [0, 200000], ‘num_nodes’: [5, 2]} Related to Literature - Algorithm (Dataset tag relations) 1: Online Dynamic Graph Drawing (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Online%20Dynamic%20Graph%20Drawing%203c5e54c02d0b473294442f7387ddb03d.md), The Turing Test for Graph Drawing Algorithms (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/The%20Turing%20Test%20for%20Graph%20Drawing%20Algorithms%209927a9580ae74b49a468a8c2816334da.md), Fast filtering and animation of large dynamic networks (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Fast%20filtering%20and%20animation%20of%20large%20dynamic%20netw%2004f8b4c82871465fb46f8ad2a01d6815.md), TimeArcs: Visualizing Fluctuations in Dynamic Networks (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/TimeArcs%20Visualizing%20Fluctuations%20in%20Dynamic%20Netwo%209d27b7e02aec4b80bc15447255eb4f4c.md), Event-based Dynamic Graph Drawing without the Agonizing Pain (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Event-based%20Dynamic%20Graph%20Drawing%20without%20the%20Agon%20e67037f1481b48fab8cbd0c2802fcbe5.md)"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Blogposts, Tweets, and Forums e315a82238dc40c5a3559c81ef7c57c8.html#blogsmooc",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Blogposts, Tweets, and Forums e315a82238dc40c5a3559c81ef7c57c8.html#blogsmooc",
    "title": "1 Blogposts, Tweets, and Forums",
    "section": "2.1 Blogs/MOOC",
    "text": "2.1 Blogs/MOOC\n\nDescriptions from Literature\nFrom TimeArcs: Visualizing Fluctuations in Dynamic Networks:\n\nWe collected 90,811 political blog posts over a ten-year period from 2005 to 2015 from seven different sources, including AMERICAblog, Huffington Post, and ProPublica. We then ran text analyses on these blogs and generated terms that were classified into four different categories. These terms were then input into TimeArcs.\n\nFrom Event-based Dynamic Graph Drawing without the Agonizing Pain:\n\nMOOC represents the actions (e.g. viewing a video, submitting an answer, etc.) taken by users on a popular massive open online class platform [KZL19]. The nodes represent users and course activities (targets), and temporal edges represent the actions by users on the targets. We pick and elaborate the first 15 thousands events.\n\n\n\nExample Figures\nFrom TimeArcs: Visualizing Fluctuations in Dynamic Networks:\n\n\n\nUntitled\n\n\nFig. 7. Overview of political events in the past 10 years using TimeArcs. The top 100 terms were selected based on their sudden attention and degree centrality. Terms are color-coded by category: green for person, red for location, blue for organization, yellow for miscellaneous category.\nFrom Event-based Dynamic Graph Drawing without the Agonizing Pain:\n\n\n\nUntitled\n\n\nTable 2. Flattened snapshots of the network evolution over time taken at regular intervals. Twenty artificial time slices were inserted for temporal graphs"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Blogposts, Tweets, and Forums e315a82238dc40c5a3559c81ef7c57c8.html#tweets",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Blogposts, Tweets, and Forums e315a82238dc40c5a3559c81ef7c57c8.html#tweets",
    "title": "1 Blogposts, Tweets, and Forums",
    "section": "2.2 Tweets",
    "text": "2.2 Tweets\n\nDescriptions from Literature\nFrom Fast filtering and animation of large dynamic networks:\n\nWe use data obtained through the Twitter gardenhose streaming API, which covers around 10% of the tweet volume.We focus on two events: the announcement of Osama bin Laden’s death and the 2013 Super Bowl. We consider user mentions and hashtags as entities and their co-occurrence in the same tweet as interactions between them.\n\nFrom Event-based Dynamic Graph Drawing without the Agonizing Pain:\n\nRugby is a network derived from over 3000 tweets involving teams in the ‘Guinness Pro12’ rugby competition. The tweets were posted between 1 September 2014 and 23 October 2015. Each tweet contains information about the involved teams and the time of publication with a precision down to the second.\n\n\n\nExample Figures\nFrom Fast filtering and animation of large dynamic networks\n\n\n\nUntitled\n\n\n== STOP RENDERING ==\nOnline dynamic - cannot find code online, paper shows two links of where they collected the data. Both broken http://www.dailytech.com, http://www.rimzu.com - paper says to look in https://www.computer.org/csdl/journal/tg/2008/04/ttg2008040727/13rRUxBJhvo but it is asking me to pay\nTuring Test - Uses the Zachary Karate dataset (they link to the suiteSparse Matrix collection, but I also know it is in sparse, and one of the Pajek subcollections). Also uses a timeslice of the same dataset used by Online dynamic (we could reconstruct this from their images since it is also only 85 nodes, but we really loose all the info we want)"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Autonomous System Network 96d24eb9c7f94ab6a6b38e6a3af816ae.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Autonomous System Network 96d24eb9c7f94ab6a6b38e6a3af816ae.html",
    "title": "1 Autonomous System Network",
    "section": "",
    "text": "1 Autonomous System Network\nNote: The 733-AS network is a subset of SNAP. We provide the link containing the original project, https://www.routeviews.org/routeviews/, and redirect to SNAP, https://snap.stanford.edu/data/as-733.html for the network data. In the dataset description they highlight how the graphs exhibit node and edge addition and deletion over time. Origin Notes: The data was originally part of the University of Oregon’s RouteViews project. It was then used by Jure Leskovec et al. and eventually stored in SNAP. graph features handled: dynamic, generic Graph features in papers: generic Origin Paper: Preserving Minority Structures in Graph Sampling (https://www.notion.so/Preserving-Minority-Structures-in-Graph-Sampling-d0f9e612663d434e85599c402c9b700c?pvs=21), Graphs over Time: Densification Laws, Shrinking Diameters and Possible Explanations (https://www.notion.so/Graphs-over-Time-Densification-Laws-Shrinking-Diameters-and-Possible-Explanations-9b33c460755241c591e462c7326db101?pvs=21) Originally found at: https://www.routeviews.org/routeviews/ https://snap.stanford.edu/data/as-733.html https://github.com/csuvis/MCGS/blob/master/dataset/AS-733_edge.csv Number of Graphs: 733 Appeared in years: 2021 Type of Collection: Subset of other collection is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Preserving Minority Structures in Graph Sampling (https://www.notion.so/Preserving-Minority-Structures-in-Graph-Sampling-cf062d6fa8f5484ab1190edd125f739f?pvs=21) cleaned format?: No duplicate?: No link works?: Yes Added in paper: No Origin paper plaintext: Preserving Minority Structures in Graph Sampling, Graphs over Time: Densification Laws, Shrinking Diameters and Possible Explanations Page id: 96d24eb9c7f94ab6a6b38e6a3af816ae unavailable/skip: Yes Cleaned ALL data: No first look: Yes Related to Literature - Algorithm (Dataset tag relations) 1: Preserving Minority Structures in Graph Sampling (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Preserving%20Minority%20Structures%20in%20Graph%20Sampling%202d52160d6ac04019aaf808496f7d4240.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “Preserving Minority Structures in Graph Sampling”\n\nThe AS-733 graph data set [48] is an autonomous systems network on the Internet with 6,474 nodes and 13,895 edges. The original graph and samples obtained by RDN, SST, MCGS are shown in Figure 5.\n\nFrom “Graphs over time: densification laws, shrinking diameters and possible explanations”\n\nThe graph of routers comprising the Internet can be organized into sub-graphs called Autonomous Systems (AS). Each AS exchanges traffic flows with some neighbors (peers). We can construct a communication network of who-talks-towhom from the BGP (Border Gateway Protocol) logs. We use the the Autonomous Systems (AS) dataset from [26]. The dataset contains 735 daily instances which span an interval of 785 days from November 8 1997 to January 2 2000.In contrast to citation networks, where nodes and edges only get added (not deleted) over time, the AS dataset also exhibits both the addition and deletion of the nodes and edges over time.\n\n\n\nExample Figures\nFrom “Preserving Minority Structures in Graph Sampling”\n\n\n\nUntitled\n\n\nFig. 5. Case analysis of the AS-733 graph data set (a) and three samples generated by RDN (b), SST(c), and MCGS (d) with a sampling rate of 30%.\n== STOP RENDERING ==\nPossibly related to something like this:\nhttps://www.caida.org/catalog/datasets/ipv4_routed_24_topology_dataset/"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Fiscal Network 6610534d6d3b48c5a119b04659153258.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Fiscal Network 6610534d6d3b48c5a119b04659153258.html",
    "title": "1 Assorted Fiscal Network",
    "section": "",
    "text": "Note: The dataset is implied to be internal, with nodes corresponding to individual tax payers and the authors mentioning anonymizing data themselves for security reasons. Origin Notes: The dataset is cited as being from an evaluation of TaxNet from Didimo et al. The authors claim how this system was adopted by the Italian Revenue Agency on a pilot program in Tuscany, where all the evaluations happened. Graph features in papers: categorical nodes,high degree,labeled nodes Origin Paper: A visual analytics system to support tax evasion discovery (https://www.notion.so/A-visual-analytics-system-to-support-tax-evasion-discovery-79c482a3ec0f4f329e5af94f2c4def4f?pvs=21) Originally found at: cannot find Appeared in years: 2019 Type of Collection: Lost/Unavailable is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): ChordLink: A New Hybrid Visualization Model (https://www.notion.so/ChordLink-A-New-Hybrid-Visualization-Model-9f4abf15618f462c962e68d2974043c9?pvs=21) cleaned format?: No duplicate?: No link works?: No Added in paper: No Origin paper plaintext: A visual analytics system to support tax evasion discovery Page id: 6610534d6d3b48c5a119b04659153258 unavailable/skip: Yes Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: ChordLink: A New Hybrid Visualization Model0 (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/ChordLink%20A%20New%20Hybrid%20Visualization%20Model0%20dd9d1e548bfa46949279e4ecbfeb18b6.md)"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Fiscal Network 6610534d6d3b48c5a119b04659153258.html#descriptions-from-the-literature",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Fiscal Network 6610534d6d3b48c5a119b04659153258.html#descriptions-from-the-literature",
    "title": "1 Assorted Fiscal Network",
    "section": "2.1 Descriptions from the Literature",
    "text": "2.1 Descriptions from the Literature\nFrom “CHORDLINK: A New Hybrid Visualization Model”:\n\nWe considered a real network of taxpayers and their economic transactions. The network is provided by the IRV (Italian Revenue Agency) and refers to a portion of data for the fiscal year 2014, consisting of 174 subjects with high fiscal risk and 200 economic transactions between them [11].\n\nFrom “A visual analytics system to support tax evasion discovery”:\n\nThe data sources queried by the IRV officers are modeled in TaxNet as a unified network G. Each node v of G is a single taxpayer, which can be either an individual or a legal person, like a private company or a public institution. Many attributes are associated with v, including the type of economic activity, the geographic location and territorial scope, the declared income, the amount of VAT credits/debts and of VAT refunded/paid, and the amount of economic exchange within the European Union. The edges of G are directed edges. An edge (u,v) can model different types of relationships between u and v."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Fiscal Network 6610534d6d3b48c5a119b04659153258.html#example-figures",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Fiscal Network 6610534d6d3b48c5a119b04659153258.html#example-figures",
    "title": "1 Assorted Fiscal Network",
    "section": "2.2 Example Figures",
    "text": "2.2 Example Figures\nFrom CHORDLINK: A New Hybrid Visualization Model\n\n\n\nUntitled\n\n\nFig. 4. A visualization obtained by selecting some communities in a node-link diagram.\n== STOP RENDERING ==\nhttps://www.sciencedirect.com/science/article/abs/pii/S0167923618300563?via%3Dihub ← italian revenue agency"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Amazon 1b39a766deb747b8a3b51fc41cfc2e20.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Amazon 1b39a766deb747b8a3b51fc41cfc2e20.html",
    "title": "1 Amazon",
    "section": "",
    "text": "1 Amazon\nNote: This dataset is a subset of SNAP and can be found there. Origin Notes: In “The dynamics of viral marketing” Leskovec et al. collected 15 million recommendations made from June 2001, to May 2003 by looking at the “Customers who Bought This Item Also Bought” feature in the Amazon online shopping platform. graph features handled: directed edges, large Graph features in papers: bundled edges (generated),spatial Origin Paper: SNAP Datasets: Stanford Large Network Dataset Collection (https://www.notion.so/SNAP-Datasets-Stanford-Large-Network-Dataset-Collection-b5f4bd2e98834a638a5c4ab563047d28?pvs=21), The dynamics of viral marketing (https://www.notion.so/The-dynamics-of-viral-marketing-f45ebdd22e5f4a95a1456bc1ae1b0fdb?pvs=21) Originally found at: http://snap.stanford.edu/data/#amazon Size: 1 graph, 192k vertices and 269k edges Number of Graphs: 1 Child collections: SNAP (Stanford Network Analysis Platform) (SNAP%20(Stanford%20Network%20Analysis%20Platform)%201cd77eaee57147ce8263b2f9eaa2589c.md) Appeared in years: 2022 Type of Collection: Subset of other collection is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): Edge-Path Bundling: A Less Ambiguous Edge Bundling Approach (https://www.notion.so/Edge-Path-Bundling-A-Less-Ambiguous-Edge-Bundling-Approach-932f56be1ec24c50a2c3fc65a37ed172?pvs=21) cleaned format?: No duplicate?: No link works?: No Added in paper: No Origin paper plaintext: SNAP Datasets: Stanford Large Network Dataset Collection, The dynamics of viral marketing Page id: 1b39a766deb747b8a3b51fc41cfc2e20 unavailable/skip: Yes Cleaned ALL data: No first look: Yes Related to Literature - Algorithm (Dataset tag relations) 1: Edge-Path Bundling: A Less Ambiguous Edge Bundling Approach (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Edge-Path%20Bundling%20A%20Less%20Ambiguous%20Edge%20Bundling%20%20fcfa5882e692481298cbee906e005c30.md)\n\n\n2 Body\n\nDescription from Literature\nFrom Edge-Path Bundling: A Less Ambiguous Edge Bundling Approach:\n\nAmazon Subset\nThis dataset consists of products with edges indicating that they are commonly co-purchased. We randomly filtered edges from the original graph [33], [34]. It has |V|=192k vertices and |E|=269k edges.\n\n\n\nExample Figures\nFrom Edge-Path Bundling: A Less Ambiguous Edge Bundling Approach:\n\n\n\nUntitled\n\n\n== STOP RENDERING ==\nlook here: https://github.com/mwallinger-tu/edge-path-bundling/tree/master/data from Edge-Path Bundling: A Less Ambiguous Edge Bundling Approach\nNote: Amazon is the only dataset not included in their GitHub. They randomly sampled a graph with 192k vertices and 269k edges from the data collected by Leskovec et al in the SNAP dataset\nOriginal dataset: http://snap.stanford.edu/data/#amazon\ndoi: 10.1145/1134707.1134732 (subgraph of a SNAP collection graph)"
  },
  {
    "objectID": "chapters/random_generation.html",
    "href": "chapters/random_generation.html",
    "title": "GD benchmark sets",
    "section": "",
    "text": "We discussed above that in a few cases, authors have generated their own datasets to test their algorithms. We call these generated datasets synthetic or custom, as opposed to datasets found in the wild. Generating a synthetic dataset can be essential for several reasons, particularly in the context of algorithm development and validation:\n\nPrivacy and Publication Constraints: Imagine you’ve created an innovative algorithm using a dataset that, due to privacy concerns, cannot be shared publicly. To validate and share your work without compromising data confidentiality, creating a synthetic dataset that mirrors the essential features of the original data allows you to showcase your algorithm’s effectiveness while adhering to privacy restrictions.\nBenchmarking and Comparative Analysis: Suppose you have access to a single dataset that can be shared and wish to prove your algorithm’s robustness across various scenarios. Generating synthetic datasets with comparable characteristics provides a controlled environment to conduct benchmark studies. This approach enables scientists to demonstrate that your algorithm performs consistently well across datasets with analogous features, thereby reinforcing its applicability and reliability.\nAddressing Data Availability Issues: In certain situations, you might design an algorithm to process graphs with specific attributes only to discover the absence of publicly available datasets showcasing these features. Synthetic datasets become invaluable here, allowing you to create tailored data that incorporates the necessary characteristics. This approach not only facilitates the testing of your algorithm in a relevant context but also helps in illustrating its potential in hypothetical yet plausible scenarios.\n\nWe use the word synthetic too in cases where the dataset has been altered, sliced, or other modifications have been applied to it.\nThe following is a practical example of a case where you would need to edit a network:\nImagine you are building a visualization to deal with the entirety of the Enron Corpus dataset , which has hundreds of thousands of nodes and edges. Because of its size, you decide to slice up the large dataset in many smaller files, so you can run tests. This particular dataset, in addition to being a challenging problem because of its size, also has an interesting distribution of connection densities: some nodes are extremely well connected, while others are much less connected. Indeed, the dataset is comprised of a collection of emails sent by Enron executives - between themselves or between other employees of the company. Because of how the dataset is constructed - where only the emails from the executives are taken into account - it has a distinctive skew in the connectedness of the data: 158 nodes are extremely well connected, while the rest of the nodes are much less connected. Because of this, there’s uncountable mistakes that can be done through slicing this graph: for instance, slicing it so that the subset includes a less dense section of the entire graph will fail to provide a representative section.\nWhile the creation of a synthetic dataset is a perfectly viable way to produce a benchmark set, in addition to replicability criteria (as discussed above), we also have to pay particular attention to a number of statistics related to the structure of graphs — both when generating new datasets, and when slicing up existing datasets to reduce their size, or to create more graphs from a single, larger graph.\nThe list of features to take into account to claim that a synthetic graph is comparable to another one would be long, and perhaps out of the scope of this publication. These are just a few examples of what could be relevant:\n\nSize (nodes, edges): The total number of nodes and edges in the graph, indicating its overall scale.\nDiameter: The longest shortest path between any two nodes, showing the graph’s maximum extent.\nDensity: The ratio of existing edges to possible edges, reflecting how closely knit the graph is.\nMotifs: Recurring, significant subgraphs; identify which motifs occur more or less frequently than expected.\nConnectedness: Evaluates both the number and sizes of graph components, along with detailed analysis per component.\nCentrality Measures (betweenness, closeness, degree): Quantify the importance of nodes based on their position and connections within the graph.\nSpecial Cases:\n\nLayers: Characteristics like number of layers, nodes per layer, and inter-layer connections.\nDisjoint Groups: The count and size distribution of separate clusters, plus an analysis of each group’s properties.\nOverlapping Sets: Number and size distribution of intersecting groups, along with detailed features.\nAdditional Node/Edge Data: Information such as timestamps, attributes, or weights that add context to nodes/edges.\nDynamic: Describes changes in the graph over time, including the nature and frequency of node/edge modifications.\n\n\nThe generation of random graphs that accurately mimic specific features presents a complex challenge, that has been explored abundantly in the past, but has found no universal solution yet. Two examples of popular models used to generate synthetic datasets are the Erdős-Rényi (ER) and the Barabási-Albert (BA) models, each one with their distinct focus and limitations:\nThe ER model excels in creating graphs with uniform edge distribution, ideal for testing an algorithm’s ability to evenly space nodes and reduce edge crossings. However, it falls short in replicating the complex, non-uniform connections seen in real-world networks, limiting its applicability to scenarios requiring simplicity and randomness. Conversely, the BA model produces scale-free networks with a few highly connected nodes, reflecting the hierarchical structure of many natural and human-made systems. It challenges layout algorithms to effectively display these hubs without cluttering. The limitation here is its focus on growth and preferential attachment, which might not suit all types of networks, particularly those without clear hub structures.\nAs there is no universal solution for random graph generation, our recommendation is to try as much as possible to pay attention to research replicability criteria, such as redistributing the generated dataset as supplemental material in the paper."
  },
  {
    "objectID": "chapters/random_generation.html#random-generation",
    "href": "chapters/random_generation.html#random-generation",
    "title": "GD benchmark sets",
    "section": "",
    "text": "We discussed above that in a few cases, authors have generated their own datasets to test their algorithms. We call these generated datasets synthetic or custom, as opposed to datasets found in the wild. Generating a synthetic dataset can be essential for several reasons, particularly in the context of algorithm development and validation:\n\nPrivacy and Publication Constraints: Imagine you’ve created an innovative algorithm using a dataset that, due to privacy concerns, cannot be shared publicly. To validate and share your work without compromising data confidentiality, creating a synthetic dataset that mirrors the essential features of the original data allows you to showcase your algorithm’s effectiveness while adhering to privacy restrictions.\nBenchmarking and Comparative Analysis: Suppose you have access to a single dataset that can be shared and wish to prove your algorithm’s robustness across various scenarios. Generating synthetic datasets with comparable characteristics provides a controlled environment to conduct benchmark studies. This approach enables scientists to demonstrate that your algorithm performs consistently well across datasets with analogous features, thereby reinforcing its applicability and reliability.\nAddressing Data Availability Issues: In certain situations, you might design an algorithm to process graphs with specific attributes only to discover the absence of publicly available datasets showcasing these features. Synthetic datasets become invaluable here, allowing you to create tailored data that incorporates the necessary characteristics. This approach not only facilitates the testing of your algorithm in a relevant context but also helps in illustrating its potential in hypothetical yet plausible scenarios.\n\nWe use the word synthetic too in cases where the dataset has been altered, sliced, or other modifications have been applied to it.\nThe following is a practical example of a case where you would need to edit a network:\nImagine you are building a visualization to deal with the entirety of the Enron Corpus dataset , which has hundreds of thousands of nodes and edges. Because of its size, you decide to slice up the large dataset in many smaller files, so you can run tests. This particular dataset, in addition to being a challenging problem because of its size, also has an interesting distribution of connection densities: some nodes are extremely well connected, while others are much less connected. Indeed, the dataset is comprised of a collection of emails sent by Enron executives - between themselves or between other employees of the company. Because of how the dataset is constructed - where only the emails from the executives are taken into account - it has a distinctive skew in the connectedness of the data: 158 nodes are extremely well connected, while the rest of the nodes are much less connected. Because of this, there’s uncountable mistakes that can be done through slicing this graph: for instance, slicing it so that the subset includes a less dense section of the entire graph will fail to provide a representative section.\nWhile the creation of a synthetic dataset is a perfectly viable way to produce a benchmark set, in addition to replicability criteria (as discussed above), we also have to pay particular attention to a number of statistics related to the structure of graphs — both when generating new datasets, and when slicing up existing datasets to reduce their size, or to create more graphs from a single, larger graph.\nThe list of features to take into account to claim that a synthetic graph is comparable to another one would be long, and perhaps out of the scope of this publication. These are just a few examples of what could be relevant:\n\nSize (nodes, edges): The total number of nodes and edges in the graph, indicating its overall scale.\nDiameter: The longest shortest path between any two nodes, showing the graph’s maximum extent.\nDensity: The ratio of existing edges to possible edges, reflecting how closely knit the graph is.\nMotifs: Recurring, significant subgraphs; identify which motifs occur more or less frequently than expected.\nConnectedness: Evaluates both the number and sizes of graph components, along with detailed analysis per component.\nCentrality Measures (betweenness, closeness, degree): Quantify the importance of nodes based on their position and connections within the graph.\nSpecial Cases:\n\nLayers: Characteristics like number of layers, nodes per layer, and inter-layer connections.\nDisjoint Groups: The count and size distribution of separate clusters, plus an analysis of each group’s properties.\nOverlapping Sets: Number and size distribution of intersecting groups, along with detailed features.\nAdditional Node/Edge Data: Information such as timestamps, attributes, or weights that add context to nodes/edges.\nDynamic: Describes changes in the graph over time, including the nature and frequency of node/edge modifications.\n\n\nThe generation of random graphs that accurately mimic specific features presents a complex challenge, that has been explored abundantly in the past, but has found no universal solution yet. Two examples of popular models used to generate synthetic datasets are the Erdős-Rényi (ER) and the Barabási-Albert (BA) models, each one with their distinct focus and limitations:\nThe ER model excels in creating graphs with uniform edge distribution, ideal for testing an algorithm’s ability to evenly space nodes and reduce edge crossings. However, it falls short in replicating the complex, non-uniform connections seen in real-world networks, limiting its applicability to scenarios requiring simplicity and randomness. Conversely, the BA model produces scale-free networks with a few highly connected nodes, reflecting the hierarchical structure of many natural and human-made systems. It challenges layout algorithms to effectively display these hubs without cluttering. The limitation here is its focus on growth and preferential attachment, which might not suit all types of networks, particularly those without clear hub structures.\nAs there is no universal solution for random graph generation, our recommendation is to try as much as possible to pay attention to research replicability criteria, such as redistributing the generated dataset as supplemental material in the paper."
  },
  {
    "objectID": "chapters/conclusion.html",
    "href": "chapters/conclusion.html",
    "title": "1 Conclusion",
    "section": "",
    "text": "1 Conclusion\nWe presented a comprehensive benchmark dataset collection for graph layout algorithms. Compiling, organizing, and making a wide array of datasets with diverse characteristics accessible not only facilitates rigorous and fair comparisons of algorithmic performance but also addresses critical issues of replicability and reproducibility in research. The Graph Benchmark Datasets website, along with the efforts for long-term archival, ensures these valuable resources remain available to the community. Web aim to help both current and future researchers to benefit from a rich repository of data, standardizing the evaluation process for graph layout algorithms, fostering innovation and development within the field and contributes to the advancement of graph drawing and visualization research. With this work, we hope to underscore the importance of accessible, well-documented benchmark datasets in driving scientific progress and highlights our commitment to enhancing the integrity and reliability of computational evaluations in the Graph Drawing community.\n\n\n2 Research Material Statements\nThe supplemental material for this publication includes:\n\nThe Graph Benchmark Datasets website, hosted on GitHub Pages.\nCode for the website, metadata on the benchmark datasets, and data processing scripts are stored in the gd_benchmark_sets GitHub repository. TODO (CD 2024-03-08): clean up and add documentation for how to use. Esp. clean the data folder, readme.md, the random .ipynb files. Add LICENCE file specifying ideally Apache 2.0 for code, and info to readme.md specifying Apache 2.0 for code and CC BY 4.0 for data & metadata.\nThis code and metadata, along with the benchmark datasets themselves in several common graph file formats, are archived for long-term availability in the Benchmark datasets for graph drawing project on OSF. TODO (CD 2024-03-08): add the website code + data. This can be done by creating a registration on OSF. I linked the GitHub repo as a data source on OSF, but the registration is what copies it to OSF as an archived snapshot.\nThe original database used for metadata collection and storage is available on Notion as Benchmark datasets.\n\n\n\n3 Acknowledgements\nThis work was supported in part by the U.S. National Science Foundation (NSF) under award number CAREER IIS-1762268 and the Austrian Science Fund (FWF) [ESP 513-N].\n\n\n4 Authorship\n\nSara Di Bartolomeo  : Conceptualization, Data Collection & Categorization, Writing Original Draft + Review & Editing, Visualization, Validation.\nEduardo Puerta  : Data Collection & Categorization, Writing Original Draft + Review & Editing, Validation.\nConnor Wilson  : Data Collection & Categorization, Writing Original Draft + Review & Editing, Validation.\nTarik Crnovrsanin  : Data Collection & Categorization, Writing Original Draft + Review & Editing, Validation.\nCody Dunne  : Supervision, Writing Original Draft + Review & Editing, Validation, Funding Acquisition.\n\n\n\n5 License\nThis work is licensed under a Creative Commons Attribution 4.0 International License. All code is released under the Apache 2.0 License.\n\n\n6 Conflict of Interest\nThe authors declare that there are no competing interests."
  },
  {
    "objectID": "chapters/collection_process.html",
    "href": "chapters/collection_process.html",
    "title": "1 Collection process",
    "section": "",
    "text": "1 Collection process\nThe information we collected is a by-product of a larger systematic review we conducted related to graph layout algorithms, which included 196 papers The following figure shows the original data collection process (from [@dibartolomeo2024evaluating]):\n\n\n\nThe sources used for the collection of papers. We started from the last 7 years of graph drawing, then integrated with the results from IEEE and Eurographics search, and then we also included all the most cited papers in Graph Drawing. The final result was 196 papers containing layout algorithm evaluations.\n\n\nThe core of our data collection was the last seven years of Graph Drawing proceedings (264 papers in total), filtering out papers without computational evaluations. We further expanded our graph layout algorithm papers collection by searching IEEE Xplore and Wiley digital libraries to include papers from TVCG and CGF. Then, we checked all the citations in the papers we collected from Graph Drawing, and added to our collection all the papers that were cited more than 4 times in the last 6 years of graph drawing — to make sure we included algorithm papers that were important, but not published at GD, on IEEE Xplore or on the Wiley digital library. For each paper, we collected which features were handled by the graph layout algorithm presented, and what dataset was used in the evaluation. When collecting features, we always prioritized the authors’ own wording and description of the features. The tagging of the papers was done by two people at the same time, over two different passes for sanity-checking purposes. Following this process, we tried to track down the datasets used in computational evaluations: (1) we first looked for official or linked supplemental material, (2) we next Googled the dataset or paper name, (3) finally, we emailed the authors. When in doubt about the artifact replication policy, we asked the owners or authors by email. In cases where it was explicitly mentioned that approval should be received before redistribution, we did not redistribute the datasets. However, if we received approval or did not receive an answer and found no explicit policy preventing redistirbution, we collected and stored the dataset to preserve it for future researchers. If any dataset owner or author discovers their own work in our collection and would like it removed, we kindly request that they contact us (see ?@sec-authorship below), and we will promptly remove it. Furthermore, we want to emphasize that we do not assert any ownership rights over the datasets listed.\nThe chart below shows the distribution of papers across different venues:\n\n{ \n  let d = []\n  let allbenchmarkdatasets = [...new Set(literature.map(l =&gt; l[\"Conference\"].split(\",\").map(d =&gt; d.trim())).flat().map(a =&gt; {\n    if (a == \"EuroVis\") return \"Computer Graphics Forum\"\n    else return a;\n  }))].filter(a =&gt; a != \"\")\n\n  for (let dataset of allbenchmarkdatasets){\n    let literature_entries_with_this_dataset = literature.filter(l =&gt; l[\"Conference\"].includes(dataset))\n\n    if (literature_entries_with_this_dataset.length &lt; 2) continue;\n\n    d.push({\"dataset\": dataset, \"count\": literature_entries_with_this_dataset.length})\n  }\n  \n  return Plot.plot({\n    \n    color: {\n      range: [\"steelblue\"]\n    },\n    y: {},\n    marks: [\n      Plot.barX(d, {x: \"count\", y: \"dataset\", fill: \"dataset\",inset: 2, sort: {y: \"x\", reverse: true}}),\n      Plot.axisY({label: null, lineWidth: 12, marginLeft: 150, marginTop: 20}),\n      Plot.text(['Venues where the papers where published'], {frameAnchor: \"Top\",dy: -10})\n    ]\n  })\n}\n\n\n\n\n\n\nThe following one, instead, shows the distribution of collected papers’ publication date:\n\n{ \n  let d = []\n  let year_range = [1980, 2023]\n  for (let year = year_range[0]; year &lt; year_range[1]; year++){\n    let literature_entries_with_this_year = literature.filter(l =&gt; parseInt(l[\"Year\"]) == year);\n\n    d.push({\"year\": year, \"count\": literature_entries_with_this_year.length})\n  }\n\n  const tickPositions = d.map((d, i) =&gt; i).filter(i =&gt; i % 5 === 0);\n  \n  return Plot.plot({\n    color: {\n      range: [\"steelblue\"]\n    },\n    y: {\n      tickValues: tickPositions\n    },\n    height: 500,\n    marks: [\n      Plot.barX(d, {x: \"count\", y: \"year\", fill: \"steelblue\", inset: 2}),\n      Plot.axisY({label: null, lineWidth: 12, marginLeft: 150, marginTop: 20, tickFormat: d3.format(\"d\"), tickValues: tickPositions}),\n      Plot.text(['Year of publication of the papers included in the survey'], {frameAnchor: \"Top\",dy: -10})\n    ]\n  })\n}\n\n\n\n\n\n\nAfter collecting the datasets, we looked more in-depth into their contents, running analysis on a number of statistics associated with the graphs contained in them.\nWe finally ended up collecting 46 datasets, listed below:\n\n{ \n  let allbenchmarkdatasets = [...new Set(literature.map(l =&gt; l[\"Dataset tag relations\"].split(\",\").map(a =&gt; a.split(\"(\")[0].trim())).flat())].filter(a =&gt; a != \"\")\n  let collection_types = benchmark_datasets.map(a =&gt; a[\"Type of Collection\"]);\n\n  // console.log(allbenchmarkdatasets.filter(b =&gt; !b.includes(\"Custom\").length))\n  // console.log(allbenchmarkdatasets.filter(b =&gt; b.includes(\"Custom\").length))\n\n  let s = \"\"\n  s += \"| Dataset Name | Papers using this dataset | \\n\"\n  s += \"| --- | --- | \\n\"\n  \n  for (let dataset of allbenchmarkdatasets){\n    let literature_entries_with_this_dataset = literature.filter(l =&gt; l[\"Dataset tag relations\"].includes(dataset))\n    let d_entry = benchmark_datasets.find(b =&gt; b[\"Name\"].includes(dataset))\n    // if (d_entry == undefined) console.log(\"not found: \", dataset);\n    // else console.log(d_entry)\n\n    if (literature_entries_with_this_dataset.length &lt; 2) continue;\n\n    s += `| ${dataset} | ` \n    for (let entry of literature_entries_with_this_dataset){\n      s += \"[@\" + entry[\"Citation name\"] + \"] \"\n    }\n    s += \"| \\n\"\n  }\n  // console.log(s)\n}\n\n\n\n\n\n\n\nThe purpose of our collection effort is to facilitate comparisons and replication of results, and to provide a resource for researchers to find datasets that are used in the literature. We also provide links to the specific papers that use each dataset, so that they can be used as examples and sources of information."
  },
  {
    "objectID": "chapters/datasets_in_use.html",
    "href": "chapters/datasets_in_use.html",
    "title": "1 Datasets in use",
    "section": "",
    "text": "The following chart shows how many times we found a dataset being used in the papers we collected. It excludes custom edits to the datasets, which are discussed later in this document.\n\n{ \n  let d = []\n  \n  let allbenchmarkdatasets = [...new Set(literature.map(l =&gt; l[\"Dataset tag relations\"].split(\",\").map(a =&gt; a.split(\"(\")[0].trim())).flat())].filter(a =&gt; a != \"\")\n  \n  allbenchmarkdatasets = allbenchmarkdatasets.filter(b =&gt; !b.includes(\"Custom\"))\n  allbenchmarkdatasets = allbenchmarkdatasets.slice(0, 20)\n\n  for (let dataset of allbenchmarkdatasets){\n    let literature_entries_with_this_dataset = literature.filter(l =&gt; l[\"Dataset tag relations\"].includes(dataset))\n\n    d.push({\"dataset\": dataset, \"count\": literature_entries_with_this_dataset.length})\n  }\n  \n  return Plot.plot({\n    color: {\n      // legend: true,\n      // type: \"categorical\",\n      // domain: d3.range(10).map((d, i) =&gt; `Category ${i + 1}`),\n      range: [\"steelblue\"],\n      // scheme: \"Tableau10\" // use the \"accent\" scheme\n    },\n    y: {\n      // tickFormat: \"s\"\n    },\n    marks: [\n      Plot.barX(d, {x: \"count\", y: \"dataset\", fill: \"dataset\", inset: 2, sort: {y: \"x\", reverse: true}}),\n      Plot.axisY({label: null, lineWidth: 12, marginLeft: 150}),\n    ]\n  })\n}\n\n\n\n\n\n\nIn the data we collected, the most used dataset is Rome-Lib, followed by assorted collaboration networks (which in many cases refers to datasets of academic collaborations such as dblp or vispubdata). The third most used dataset is from C.Walshaw - it is important to note that the Walshaw dataset is available as part of other collections - for instance, its graphs are found in SNAP. However, during the collection process, we preferred giving precedence to how the authors reported their own information. Thus, if the authors claimed the data was from the Walshaw collection, we reported it as such.\n\nIn the following sections, the reader will find details about the classifications and datasets in detail. Each dataset gets a dedicated, collapsible section, that contains the following information: - A sparkline visualization is shown in case the dataset contains multiple graphs, illustrating the distribution of graph sizes (in nodes) in the graphs in the dataset.\n\n\nWe classified the datasets in different categories, based on their origins or amount of graphs contained in them:\n\n{ \n  let d = []\n  \n  let collection_type = benchmark_datasets.map(a =&gt; a[\"Type of Collection\"]);\n\n  for (let c of [... new Set(collection_type)]){\n    if (c == \"Skip\" || c == \"Missed it\") continue;\n    let count = collection_type.filter(a =&gt; a == c).length;\n    if (c.includes(\"No report\")) c = \"Established Network Repository\";\n    d.push({\"collection_type\": c, \"count\": count})\n  }\n  \n  return Plot.plot({\n    color: {\n      // legend: true,\n      // type: \"categorical\",\n      // domain: d3.range(10).map((d, i) =&gt; `Category ${i + 1}`),\n      scheme: \"Tableau10\" // use the \"accent\" scheme\n    },\n    y: {\n      // tickFormat: \"s\"\n    },\n    marks: [\n      Plot.barX(d, {x: \"count\", y: \"collection_type\", fill: \"collection_type\", inset: 2, sort: {y: \"x\", reverse: true}}),\n      Plot.axisY({label: null, lineWidth: 12, marginLeft: 150}),\n    ]\n  })\n}\n\n\n\n\n\n\n\n\nUniform Benchmark datasets are standalone widely used collections of graphs featuring uniform characteristics - usually simple, generic graphs, often used in evaluations that run over thousands of graphs to report average completion times, or other experiments where the reported metrics are usually aggregated.\nThe first of these collapsible sections is shown already expanded, to give an example of the content that can be found in each of them. The content is generated dynamically based on the data we collected.\n\n\n\n\n\n\n\n\n\nRome-Lib\n\n\n\n\n\nRome-Lib is, as previously discussed, the most common benchmark dataset, due to its already established popularity, its ease of use and access, and the many properties that are already known about it. It was first introduced in [@DiBattista1997b] and presented in their paper ”An experimental comparison of four graph drawing algorithms”. Mostly “real” networks such as software companies, government, software engineering books, database design, and journal articles on visualization. Originally sent as an extended abstract to Computational Geometry in 1995 [@DiBattista1995]. It contains exclusively generic graphs (e.g., undirected, non-layered, without pre-established clusters…), although some of the research that uses it enhances with additional attributes (such as performing a rank assignment step). Information about optimal crossings can be found as part of WebCompute.\n\n\nOriginally found at: http://www.graphdrawing.org/data.html\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 11534 graphs, 10 to 100 nodes, 9 to 158 edges\n\n\n\nOrigin paper: \n\n\n\n[@DiBattista1997b]\n\n\nAn experimental comparison of four graph drawing algorithms\n\n\n\n\n[@DiBattista1995]\n\n\nAn experimental comparison of three graph drawing algorithms (extended abstract)\n\n\n\n\nUsage examples: \n\n\n\n[@Buchheim2008]\n\n\nA branch-and-cut approach to the crossing number problem\n\n\n\ngeneric\n\n\n\n\n\n[@chimani2010]\n\n\nLayer-Free Upward Crossing Minimization\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@chimani2006]\n\n\nExperiments on Exact Crossing Minimization Using Column Generation\n\n\n\ngeneric\n\n\n\n\n\n[@diBartolomeo2022b]\n\n\nStratisfimal Layout: A modular optimization model for laying out layered node-link network visualizations\n\n\n\nclusters (pre-existing)\n\n\ncompound graphs\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@klammler2018]\n\n\nAesthetic Discrimination of Graph Layouts\n\n\n\ngeneric\n\n\n\n\n\n[@Chimani2008]\n\n\nA New Approach to Exact Crossing Minimization\n\n\n\ngeneric\n\n\n\n\n\n[@Gansner2006]\n\n\nImproved circular layouts\n\n\n\ncircular\n\n\n\n\n\n\n\n\nDeep Neural Network for DrawiNg Networks\n\n\n\n\n\n\n\n[@Gutwenger2004]\n\n\nAn Experimental Study of Crossing Minimization Heuristics\n\n\n\ngeneric\n\n\n\n\n\n[@DiBattista1997b]\n\n\nAn experimental comparison of four graph drawing algorithms\n\n\n\ngeneric\n\n\n\n\n\n[@chimani2016]\n\n\nA Note on the Practicality of Maximal Planar Subgraph Algorithms\n\n\n\nplanar\n\n\n\n\n\n[@Kindermann2018]\n\n\nExperimental Analysis of the Accessibility of Drawings with Few Segments\n\n\n\nsparse\n\n\ntrees\n\n\n\n\n\n[@Heinsohn2018]\n\n\nAn Interactive Tool to Explore and Improve the Ply Number of Drawings\n\n\n\ngeneric\n\n\n\n\n\n[@Demel2018]\n\n\nA Greedy Heuristic for Crossing-Angle Maximization\n\n\n\ngeneric\n\n\n\n\n\n[@Bekos2018]\n\n\nA Heuristic Approach Towards Drawings of Graphs with High Crossing Resolution\n\n\n\ngeneric\n\n\n\n\n\n[@Niedermann2020]\n\n\nAn Integer-Linear Program for Bend-Minimization in Ortho-Radial Drawings\n\n\n\northo\n\n\northo-radial\n\n\n\n\n\n[@Chimani2021]\n\n\nStar-Struck by Fixed Embeddings: Modern Crossing Number Heuristics\n\n\n\ngeneric\n\n\n\n\n\n[@Clancy2019]\n\n\nAn effective crossing minimisation heuristic based on star insertion\n\n\n\ngeneric\n\n\n\n\n\n[@Chimani2012]\n\n\nAdvances in the Planarization Method: Effective Multiple Edge Insertions\n\n\n\ngeneric\n\n\n\n\n\n[@chimani2016b]\n\n\nAn ILP-based Proof System for the Crossing Number Problem\n\n\n\ngeneric\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “A branch-and-cut approach to the crossing number problem”:\n\nTo test the performance of our new algorithm, we used a benchmark set of graphs of the University of Rome III, introduced in [11]. The set contains 11 389 graphs that consist of 10 to 100 nodes and 9 to 158 edges. These graphs were generated from a core set of 112 “real life” graphs used in database design and software engineering applications. Most of the graphs are sparse, which is a common property in most application areas of automatic graph drawing. The average ratio between the number of edges and the number of nodes of the graphs from the benchmark set is about 1.35.\n\nFrom “Layer-free upward crossing minimization”:\n\nThe Rome graphs [Di Battista et al. 1997] are a widely used benchmark set in graph drawing, obtained from a basic set of 112 real-world graphs. It contains 11,528 instances with 10 through 100 nodes and 9 through 158 edges. Although the graphs are originally undirected, they have been used as directed graphs—by artificially directing the edges according to the node order given in the input files—for showing the performance of the mixed-upward planarization approach [Eiglsperger et al. 2003]. In this case, all edges are directed and the graphs are acyclic; hence, the mixed-upward planarization approach turns into an upward planarization method.\n\nFrom “A New Approach to Exact Crossing Minimization”:\n\nWe say graphs are trivial, if they are planar or if the heuristic achieves a planarization with only one crossing, as in these cases we need not prove optimality. The Rome library contains 7172 non-trivial graphs.\n\nFrom “An Experimental Comparison of Four Graph Drawing Algorithms”\n\nOur test graph generation strategy is as follows. First, we have focused on the important application area of database and software visualization, where Entity-Relationship diagrams and Data-Flow diagrams are usually displayed with orthogonal drawings. Second, we have collected 112 “real life” graphs with number of vertices between 10 and 100, from now on called core graphs, from the following sources:\n\n\n• 54% of the graphs have been obtained from major Italian software companies (especially from Database Informatica) and large government organization (including the Italian Internal Revenue Service and the Italian National Advisory Council for Computer Applications in the Government (Autorita’ per l’Informatica nella Pubblica Amministrazione)); • 33% of the graphs were taken from well-known reference books in software engineering [18] and database design [1], and from journal articles on software visualization in the recent issues of Information Systems and the IEEE Transactions on Software Engineering; • 13% of the graphs were extracted from theses in software and database visualization written by students at the University of Rome “La Sapienza”.\n\n\nOur approach is based on the following scheme. We defined several primitive operations for updating graphs, which correspond to the typical operations performed by designers of Entity-Relationship and Data-Flow Diagrams, and attributed a certain probability to each of them. More specifically, the updating primitives we have used are the following: InsertEdge, which inserts a new edge between two existing vertices; DeleteEdge, which deletes an existing edge; InsertVertex, which splits an existing edge into two edges by inserting a new vertex; DeleteVertex, which deletes a vertex and all its incident edges; and MakeVertex, which creates a new vertex and connects it to a subset of vertices. The test graphs were then generated in several iterations starting from the core graphs by applying random sequences of operations with a “genetic” mechanism. Namely, at each iteration a new set of test graphs was obtained by applying a random sequence of operations to the current test set. Each new graph was then evaluated for “suitability”, and those found not suitable were discarded. The probability of each primitive operation was varied at the end of each iteration. The evaluation of the suitability of the generated graphs was conducted using both objective and subjective analyses. The objective analysis consisted of determining whether the new graph had similar structural properties with respect to the core graph it was derived from. We have taken into account parameters like the average ratio between number of vertices and number of edges and the average number of biconnected components. The subjective analysis consisted in a visual inspection of the new graph and an assessment by expert users of Entity-Relationship and Data-Flow diagrams of its similarity to a “real-life” diagram. For obvious reasons, the subjective analysis has been done on a randomly selected subset of the graphs.\n\n\n\n\nFrom ”An Experimental Comparison of Four Graph Drawing Algorithms”:\n\n\n\nFrom “Experimental Analysis of the Accessibility of Drawings with Few Segments”:\n\n\n\nFrom: Deep Neural Network for DrawiNg Networks, (DNN)2:\n\n\n\nFig 5. Layout examples for (DNN)^2, (DNN)^2, tsNET∗ and S_GD^2.\n\n\n\n\nThe following collections, together with Rome-Lib, can be easily accessed from the homepage of the Graph Drawing Conference website, and are therefore well known and widely used. \n\n\n\n\n\n\n\nAT&T\n\n\n\n\n\n\nOriginally collected by Stephen North at AT&T Bell Labs (see the descriptions from literature section below for more information). The original link from 1995 is broken: ftp://ftp.research.att.com/dist/drawdag. Di Battista et al. modified the dataset by removing isomorphic graphs, connecting disconnected graphs, and removing cycles. Same as North DAG collection. It contains directed and acyclic graphs.\n\nOriginally found at: http://www.graphdrawing.org/data.html\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 1277 graphs, 10 to 100 nodes, 9 to 241 edges\n\n\n\nOrigin paper: \n\n\n[@DIBATTISTA2000]     Drawing Directed Acyclic Graphs: An Experimental Study\n\n\n\nUsage examples: \n\n\n\n[@Hachul2005]\n\n\nDrawing Large Graphs with a Potential-Field-Based Multilevel Algorithm\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Hachul2006]\n\n\nAn Experimental Comparison of Fast Algorithms for Drawing General Large Graphs\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n\n\n\nLarge-Graph Layout with the Fast Multipole Multilevel Method\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Jabrayilov2016]\n\n\nCompact Layered Drawings of General Directed Graphs\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@Jnger2018]\n\n\nA Flow Formulation for Horizontal Coordinate Assignment with Prescribed Width\n\n\n\ndag\n\n\nhierarchical\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@Mallach2019]\n\n\nA Natural Quadratic Approach to the Generalized Graph Layering Problem\n\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@Chimani2012]\n\n\nAdvances in the Planarization Method: Effective Multiple Edge Insertions\n\n\n\ngeneric\n\n\n\n\n\n[@barth2002]\n\n\nSimple and Efficient Bilayer Cross Counting\n\n\n\nbipartite\n\n\nlayered graphs\n\n\n\n\n\n[@DIBATTISTA2000]\n\n\nDrawing Directed Acyclic Graphs: An Experimental Study\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@welch2017]\n\n\nMeasuring Symmetry in Drawings of Graphs\n\n\n\ngeneric\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “Drawing Directed Acyclic Graphs: An Experimental Study”:\n\nThe experimental study was performed on two different sets of DAGs, both with a strong connection to “real-life” applications. We considered two typical contexts where DAGs play a fundamental role, namely software engineering and project planning.\n\n\nThe first set of test DAGs are what we call the North DAGs. They are obtained from a collection of directed graphs [28], that North collected at AT&T Bell Labs by running for two years Draw DAG, an e-mail graph drawing service that accepts directed graphs formatted as e-mail messages and returns messages with the corresponding drawings [27].\n\n\nOriginally, the North DAGs consisted of 5114 directed graphs, whose number of vertices varied in the range 1 … 7602. However, the density of the directed graphs with a number of vertices that did not fall in the range 10 … 100 was very low (see also the statistics in [28]); since such directed graphs represent a very sparse statistical population we decided to discard them. Then we noted that many directed graphs were isomorphic; since the vertices of the directed graphs have labels associated with them, the problem is tractable. For each isomorphism class, we kept only one representative directed graph. Also, we deleted the directed graphs where subgraphs were specified as clusters, to be drawn in their own distinct rectangular region of the layout, because constrained algorithms are beyond the scope of this study. This filtering left us with 1277 directed graphs.\n\n\nStill, 491 directed graphs were not connected and this was a problem for running algorithms implemented in G D W (they assume input directed graphs to be connected). Instead of discarding the directed graphs, we followed a more practical approach, by randomly adding a minimum set of directed edges that makes each directed graph connected. Finally, we made the directed graph acyclic, where necessary, by applying some heuristics for inverting the direction of a small subset of edges.\n\n\nWe then ran a first set of experiments and produced the statistics by grouping the DAGs by number of vertices. Although the comparison among the algorithms looked consistent (the produced plots never oddly overlapped), each single plot was not satisfactory, because it showed peaks and valleys. We went back to study the test suite and observed that grouping them by number of vertices was not the best approach. In fact, the North DAGs come from very heterogeneous sources, mainly representing different phases of various software engineering projects; as a result, directed graphs with more or less the same number of vertices may be either very dense or very sparse.\n\n\nSince most of the analyzed quality measures strongly depend on the number of edges of the DAG (e.g. area, number of bends, and number of crossings), we decided that a better approach was to group the DAGs by number of edges. After some tests, we clustered the DAGs into nine groups, each with at least 40 DAGs, so that the number of edges in the DAGs belonging to group i, 1 ≤ i ≤ 9, is in the range 10 i … 10 i+9 (see Fig. 3). The resulting test suite consists of 1158 DAGs, each with edges in the range 10 … 99.\n\nFrom “Layer-Free Upward Crossing Minimization”:\n\nNorth DAGs. The North DAGs have been introduced in an experimental comparison of algorithms for drawing DAGs [Di Battista et al. 2000]. The benchmark set contains 1,158 DAGs collected by Stephen North, which were slightly modified by Di Battista et al. The graphs are grouped into nine sets, where set i contains graphs with 10 i to 10 i+9 arcs for i=1, …, 9.\n\n\n\n\nFrom “Drawing Directed Acyclic Graphs: An Experimental Study”:\n\n\n\n\n\n\nFrom “A Natural Quadratic Approach to the Generalized Graph Layering Problem”:\n\n\n\nFrom “A Flow Formulation for Horizontal Coordinate Assignment with Prescribed Width”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNorth DAGs\n\n\n\n\n\n\nThis is the same collection as AT&T, but referred to as North DAGs in the papers we analyzed. We kept the two collections separate, based on how they are referred to in the papers we collected.\n\nOriginally found at: See AT&T\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: See AT&T\n\n\n\nOrigin paper: \n\n\n\n[@DIBATTISTA2000]\n\n\nDrawing Directed Acyclic Graphs: An Experimental Study\n\n\n\n\nUsage examples: \n\n\n\n[@chimani2010]\n\n\nLayer-Free Upward Crossing Minimization\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@chimani2016]\n\n\nA Note on the Practicality of Maximal Planar Subgraph Algorithms\n\n\n\nplanar\n\n\n\n\n\n[@Regg2016]\n\n\nA Generalization of the Directed Graph Layering Problem\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@Demel2018]\n\n\nA Greedy Heuristic for Crossing-Angle Maximization\n\n\n\ngeneric\n\n\n\n\n\n[@Chimani2021]\n\n\nStar-Struck by Fixed Embeddings: Modern Crossing Number Heuristics\n\n\n\ngeneric\n\n\n\n\n\n[@chimani2016b]\n\n\nAn ILP-based Proof System for the Crossing Number Problem\n\n\n\ngeneric\n\n\n\n\n\n[@DIBATTISTA2000]\n\n\nDrawing Directed Acyclic Graphs: An Experimental Study\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@Binucci2016]\n\n\nPlacing Arrows in Directed Graph Drawings\n\n\n\ndirected edges\n\n\n\n\n\n[@klammler2018]\n\n\nAesthetic Discrimination of Graph Layouts\n\n\n\ngeneric\n\n\n\n\n\n[@binucci2022]\n\n\nPlacing Arrows in Directed Graph Layouts: Algorithms and Experiments\n\n\n\ndirected edges\n\n\n\n\n\n\nFrom “Layer-Free Upward Crossing Minimization”:\nNorth DAGs. The North DAGs have been introduced in an experimental comparison of algorithms for drawing DAGs [Di Battista et al. 2000]. The benchmark set contains 1,158 DAGs collected by Stephen North, which were slightly modified by Di Battista et al. The graphs are grouped into nine sets, where set \\(i\\) contains graphs with \\(10 i\\) to \\(10 i+9\\) arcs for \\(i=1, \\ldots, 9\\).\n\n\n\n\n\n\n\n\n\n\n\nRandDAG or DAGMar\n\n\n\n\n\nThe randDAG collection concludes the collections that can be easily accessed from graphdrawing.org. http://graphdrawing.org highlights the DAGmar graph generator, and provides a benchmark set of randomly generated directed acyclic graphs. While not explicit, it is implied this benchmark comes from the DAGmar generator. The collection is uniformly sampled from set of level graphs with certain graph parameters, such as number of nodes and number of edges. These graphs have no particular features, thus they are classified as generic.\n\n\nOriginally found at: http://www.graphdrawing.org/data.html\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 10-100 nodes, 15-167 edges\n\n\n\nOrigin paper: \n\n\n\n[@Bachmaier_Gleißner_Hofmeier_2012]\n\n\nDAGmar: Library for DAGs\n\n\n\n\nUsage examples: \n\n\n\n[@klammler2018]\n\n\nAesthetic Discrimination of Graph Layouts\n\n\n\ngeneric\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “Aesthetic Discrimination of Graph Layouts”:\n\nWe have assembled such a dataset using two types of sources. First, we used the collections of the well-known graph archives ROME, NORTH and RANDDAG which are published on graphdrawing.org as well as the NIST’s “Matrix Market” [2].\n\n\n\n\nFrom “Aesthetic Discrimination of Graph Layouts (Appendix)”:\n\n\n\nFig. 5. (cropped)… All graphs are visualized using the \\(FM^3\\) algorithm.\n\n\n\n\n\nThe datasets listed below are particularly useful when researchers are interested in testing for crossing numbers. Indeed, they both deal with graphs that have a known crossing numbers.\n\n\n\n\n\n\n\nKnownCR\n\n\n\n\n\nKnownCR is a collection of graphs with known crossing numbers, and it is used to test the performance of algorithms that approximate the crossing number of a graph. The dataset is used in papers that aim to approximate the crossing number of a graph, and it is used to compare the results of the approximation algorithms to the known crossing numbers of the graphs. A good resource for this is also the survey provided by [@Clancy2019ASO]. The graphs themselves do not appear to exist online elsewhere, but the method by which they can be created is fully described in [@gutwenger_phd]. \n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 9-250 nodes, 18-750 edges\n\n\n\nOrigin paper: \n\n\n\n[link]\n\n\nApplication of SPQR-Trees in the Planarization Approach for Drawing Graphs\n\n\n\n\nUsage examples: \n\n\n\n[@Chimani2021]\n\n\nStar-Struck by Fixed Embeddings: Modern Crossing Number Heuristics\n\n\n\ngeneric\n\n\n\n\n\n[@Clancy2019]\n\n\nAn effective crossing minimisation heuristic based on star insertion\n\n\n\ngeneric\n\n\n\n\n\n[@Chimani2012]\n\n\nAdvances in the Planarization Method: Effective Multiple Edge Insertions\n\n\n\ngeneric\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “An effective crossing minimisation heuristic based on star insertion”:\n\nKnownCR graphs- these are a set of instances containing between 9 and 250 vertices, first collected by Gutwenger [22], which can be further partitioned into four families of graphs as follows: \\(C_i \\times C_j\\): The Cartesian product of the cycle on \\(i\\) vertices with the cycle on \\(j\\) vertices. The instances contain graphs with \\(3 \\leq i \\leq 7\\) and \\(j \\geq i\\) such that \\(ij \\leq 250\\). \\(G_i \\times P_j\\): The Cartesian product of the path on \\(j+1\\) vertices with one of the 21 non-isomorphic connected graphs on 5 vertices, where \\(i\\) denotes which of the 21. The instances contain graphs with \\(3 \\leq j \\leq 49\\). \\(G_i \\times C_j\\): The Cartesian product of the cycle on \\(j\\) vertices with one of the 21 non-isomorphic connected graphs on 5 vertices, where \\(i\\) denotes which of the 21. The crossing number of these graphs is only known for some of the \\(G_i\\) and only these cases are included. The instances contain graphs with \\(3 \\leq j \\leq 50\\). The Generalised Petersen graphs \\(P(j,2)\\) and \\(P(j,3)\\), on \\(2j\\) vertices. We shall only use those of type \\(P(j,3)\\) as \\(P(j,2)\\) (studied in [20]) are easy for heuristics to solve, as has already been observed in [9]. The instances contain graphs with \\(9 \\leq j \\leq 125\\).\n\nFrom “Advances in the Planarization Method: Effective Multiple Edge Insertions”:\n\nFinally, the KnownCR graphs [11] are a collection of 1946 graphs with known crossing numbers (by proofs), consisting of generalized Petersen graphs (P(m, 2), P(m, 3)) and products of cycles \\(C_n\\), paths \\(P_n\\), and 5-vertex graphs \\(G_i (C_m \\times C_n, G_i \\times P_n, G_i \\times C_n)\\); these graphs have between 9 and 250 nodes.\n\n\n\n\nFrom “Application of SPQR-Trees in the Planarization Approach for Drawing Graphs”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWebCompute\n\n\n\n\n\nThe dataset is comprised of instances of graphs uploaded to Crossing Number WebCompute, attributed to M. Chimani, T. Wiedera. http://crossings.uos.de/cr-proof-system-paper. Their website also features proofs of the crossing numbers of many of the Rome-Lib graphs. Newest version of database specifies non-planar graphs, but older versions do have some planar graphs.\n\n\nOriginally found at: https://tcs.uos.de/doku.php?id=research/cr\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 3-112 nodes, 3-366 edges\n\n\n\nOrigin paper: \n\n\n\n[@chimani2016b]\n\n\nAn ILP-based Proof System for the Crossing Number Problem\n\n\n\n\nUsage examples: \n\n\n\n[@chimani2016b]\n\n\nAn ILP-based Proof System for the Crossing Number Problem\n\n\n\ngeneric\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “An ILP-based Proof System for the Crossing Number Problem”:\n\nTo determine the applicability of the proof system, we tested the algorithms on three benchmark sets: the 3110 non-trivial Rome graphs [14], the 1277 North graphs [15], and the145 non-planar graphs (http://crossings.uos.de/instances) collected by our crossing number web-service.\n\n\n\n\n\n\n\n\n\n\n\n\n\nComplete Graphs\n\n\n\n\n\nComplete graphs refers to a generic collection of graphs that are fully connected, i.e., each node is connected to every other node, up to any number of nodes that are needed for the purpose of the experiment. The linked dataset includes both the complete graphs \\(K_n\\) for \\(5≤n≤50\\) and the complete bipartite graphs \\(K_{n_1,n_2}\\) for \\(5≤n1,n2≤40\\). Crossing number is conjectured for most of these, and while not proven, we found these used in papers to validate minimum crossing numbers. We also note that the papers in our literature review did not provide example figures.\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 5-80 nodes, 10-1600 edges\n\n\n\nNumber of Graphs: 1342\n\n\n\nUsage examples: \n\n\n\n[@Clancy2019]\n\n\nAn effective crossing minimisation heuristic based on star insertion\n\n\n\ngeneric\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “An effective crossing minimisation heuristic based on star insertion”:\n\nComplete graphs - Although the crossing number of the complete graph \\(K_n\\) is not known for for \\(n ≥ 13\\), the value is conjectured, and typically assumed to be correct. We compare the nine combinations of schemes to see how close to the conjectured value each of them is able to get, for various sizes of complete graphs up to \\(n = 50\\). We indicate how many crossings are obtained after the initial embedding, as well as at the conclusion of the heuristic. We also provide the runtimes, again separated into time spent producing the initial embedding, and time spent in the main loop of the heuristic.\n\n\nComplete bipartite graphs - Much like the complete graphs, the crossing number of the complete bipartite graph \\(K_{n1,n2}\\) is only known in general for \\(n_1 ≤ 6\\), but the value is conjectured and typically assumed to be correct. Again, we compare the nine combinations of schemes to see how close to the conjectured value they can get for values up to \\(n_1,n_2 = 40\\), and report the same data as for the Complete graphs.\n\n\nThe crossing number of the complete graph \\(K_n\\) is conjectured (e.g. see Guy [25]) to be equal to \\(H(n) := 1/4 \\left\\lfloor n/2\\right\\rfloor \\left\\lfloor (n − 1)/2\\right\\rfloor \\left\\lfloor(n − 2)/2\\right\\rfloor \\left\\lfloor (n − 3)/2\\right\\rfloor\\). Although this conjecture is widely believed to be correct, it has only been confirmed for \\(n ≤ 12\\) despite considerable effort to extend the results further [30]. We ran the graphs \\(K_n\\) for \\(5 ≤ n ≤ 50\\). Each graph was run with 100 random permutations and the minimum found solution was compared to \\(H(n)\\) by computing the percent relative deviation from \\(H(n)\\)… For these graphs, we observe that when \\(n\\) was odd, every scheme combination was able to obtain a drawing with \\(H(n)\\) crossings. However, when \\(n\\) was even, each scheme reached a value which was usually very close but not equal to \\(H(n)\\).\n\n\nThe crossing number of the complete bipartite graph \\(K_{n_1,n_2}\\) is conjectured (e.g. see Zarankiewicz [35]) to be equal to \\(Z(n_1, n_2) := \\left\\lfloor n_1/2\\right\\rfloor \\left\\lfloor (n_1 − 1)/2\\right\\rfloor \\left\\lfloor n_2/2\\right\\rfloor \\left\\lfloor (n_2 − 1)/2\\right\\rfloor\\). We ran the graphs \\(K_{n_1,n_2}\\) for \\(5 ≤ n1 ≤ n2 ≤ 40\\). Each graph was run with 100 random permutations and the minimum found solution was compared to \\(Z(n_1,n_2)\\)… As can be seen in Table 6, QuickCross was successful in obtaining the conjectured optimum in all cases and for all scheme combinations, except \\(K_{30,30}\\) and \\(K_{40,40}\\)\n\n\n\n\n\nThe collections presented here are particularly varied in features:\n\n\n\n\n\n\n\nGraphviz Examples\n\n\n\n\n\nWhile graphviz is a graph visualization software, its example gallery has proven useful to many researchers as a source of benchmark datasets. The graphs have various origins, most of which are described on the Graphviz https://www.graphviz.org/gallery/. Example graphs used to generate images with the https://www.graphviz.org for their https://www.graphviz.org/gallery/. These graphs are picked as graphviz examples because they are diverse in types of features they contain: together with generic graphs, there are also graphs with clusters, layers, directed edges and labeled nodes.\n\n\nOriginally found at: https://gitlab.com/graphviz/graphviz/-/tree/main/tests/graphs\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 1-1464 nodes, 0-5806 edges\n\n\n\nOrigin paper: \n\n\n\n[@gansner2000]\n\n\nAn open graph visualization system and its applications to software engineering\n\n\n\n\nUsage examples: \n\n\n\n[@Gange2011]\n\n\nOptimal k-level planarization and crossing minimization\n\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@Nachmanson2017]\n\n\nNode Overlap Removal by Growing a Tree\n\n\n\nlarge\n\n\n\n\n\n[@giovannangeli2023]\n\n\nFORBID: Fast Overlap Removal by Stochastic GradIent Descent for Graph Drawing\n\n\n\ngeneric\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “Node Overlap Removal by Growing a Tree”:\n\nOur data includes the same set of graphs that was used by the authors of PRISM to compare it with other algorithms [6]. The dataset is available in the Graphviz open source package.\n\nFrom “Optimal k-level planarization and crossing minimization”:\n\nThe first set of graphs are all the hierarchical network diagrams appearing in the GraphViz gallery [3]… Table 1 shows the results of minimizing edge crossings and maximizing planar subgraphs with MIP and SAT solvers, as well as the crossings resulting in the Graphviz heuristic layout for graphs from the GraphViz gallery.\n\n\n\n\nFrom “Node Overlap Removal by Growing a Tree”:\n\n\n\n\n\n\nFrom “FORBID: Fast Overlap Removal by Stochastic GradIent Descent for Graph Drawing”:\n\n\n\nFrom “Optimal k-level planarization and crossing minimization”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScotch Graph Collection\n\n\n\n\n\nCollection consisting of graphs from various sources including topological meshes, meshes related to physical problems (fluid dynamics, structural mechanics, combinatorial optimization), and interprocess communication graphs for a parallel computing implementation of a factorization solver. The https://gitlab.inria.fr/scotch/scotch is produced by the https://www.labri.fr/perso/pelegrin/scotch/ whose goal is to study static mapping by the means of graph theory, using “divide and conquer’’ graph bipartitioning heuristics. The original link to the data http://www.labri.u-bordeaux.fr/Equipe/PARADIS/Member/pelegrin/graph is broken.\n\nmake_sparkline(\"Scotch_GraphCollection\")\n\n\n\n\n\n\n\n\n\n\n\n\nThe following two collections are particularly relevant for the display of temporal event sequences:\n\n\n\n\n\n\n\nStorylines (Movie Plots)\n\n\n\n\n\nThe storylines dataset is particularly useful for temporal event sequence visualization because of its dynamic aspect and clusters (which also evolve through time). It is a collection of graphs that represent movie plots, and the nodes are the characters in the movie. The edges represent the interactions between the characters. This dataset was initially collected by Yuzuru Tanahashi, then stored on his homepage at UC Davis which was lost. Through the help of personal connections at UC Davis, we were luckily able to recover the dataset.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMilitarized Interstate Disputes (MID)\n\n\n\n\n\nCollected as part of the correlatesofwar.org project, the dataset contains two disconnected temporal event sequences.\n//| echo: false\n\nmake_sparkline(\"Militarized_InterstateDisputesMID\")\n\n\n\n\n\n\nCollections of graphs that focus on one specific attribute can also be useful in case the attribute relates to geographical data:\n\n\n\n\n\n\n\nWorld Maps\n\n\n\n\n\nDatasets contain various attributes for a few locations and their geographical adjacency, namely neighboring states, countries, and municipalities. World Bank country information transformed into a weight-vectors dataset. Some of the incomplete data was filled from disparate sources mentioned in the paper’s supplemental materials: https://doi.org/10.48550/arXiv.1908.07291. The collection contains 14 graphs with dynamic and spatial attributes, categorical nodes, and weighted nodes.\n\n\nOriginally found at: https://data.worldbank.org/indicator https://github.com/loizuf/StableDemersLP/tree/main/code/StableDemers_TVCG/data\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 48-514 nodes, 205-2428 edges\n\n\n\nNumber of Graphs: 14\n\n\n\nOrigin paper: \n\n\n\n[@Nickel2019]\n\n\nComputing Stable Demers Cartograms\n\n\n\n\nUsage examples: \n\n\n\n[@Nickel2019]\n\n\nComputing Stable Demers Cartograms\n\n\n\ndynamic\n\n\nspatial\n\n\n\n\n\n\n\n\n\n\n\n\nFrom Computing Stable Demers Cartograms”:\n\nWe run experiments on real-world datasets. For time-series data, we expect a gradual change and strong correlation between the different values. For weight-vectors data, we expect more erratic changes and less correlation. We use two maps with rather different geographic structures: the first (World) is a map of world countries, having mixed region (country) sizes in a rather unstructured manner; the second (US) is a map of the 48 contiguous US states, having relatively high structure in sizes of its states, with large states in the middle and along the west coast and many smaller states along the east coast.\n\nFrom Supplemental Materials, Appendix C of *“Computing Stable Demers Cartograms*”:\n\n\n\n\n\n\nFrom Computing Stable Demers Cartograms”:\n\n\n\n\n\n\n\n\n\nOtherwise, one might decide to focus on a particular domain:\n\n\n\n\n\n\nBiological Pathways (KEGG)\n\n\n\n\n\nAccording to kegg.jp, “the KEGG PATHWAY database is a collection of manually drawn graphical diagrams, called KEGG pathway maps, for metabolic pathways, signaling pathways, pathways involved in various cellular processes and organismal systems, and perturbed pathways associated with human diseases.”\n//| echo: false\n\nmake_sparkline(\"Biological_PathwaysKEGG\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCo-Phylogenetic Trees\n\n\n\n\n\nCollected by the authors of “https://almob.biomedcentral.com/articles/10.1186/s13015-014-0031-3. Each element of the data set is two binary co-phylogentic trees. “Caryophyllaceae & Microbotryum” and “Stinkbugs & Bacteria” are missing but our dataset includes all other files from “https://doi.org/10.1007/978-3-319-73915-1_27”. An additional dataset from “https://almob.biomedcentral.com/articles/10.1186/s13015-014-0031-3”, called “Wolbachia”, is included. Naturally, the data contains trees.\n\n\nOriginally found at: https://gitlab.inria.fr/erable/eucalypt/-/blob/master/html/PaperDatasets.zip\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 13-773 nodes, 12-772 edges\n\n\n\nNumber of Graphs: 30\n\n\n\nOrigin paper: \n\n\n\n[@Donati2015]\n\n\nEUCALYPT: efficient tree reconciliation enumerator\n\n\n\n\nUsage examples: \n\n\n\n[@Calamoneri2018]\n\n\nVisualizing Co-phylogenetic Reconciliations\n\n\n\nbinary trees\n\n\ntrees\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “EUCALYPT: efficient tree reconciliation enumerator”:\n\nTo test EUCALYPT, we selected 12 datasets from the literature. As we are mostly interested in host-parasite systems, the first 10 datasets concern such relations: EC Encyrtidae & Coccidae [23], GL Gopher & Lice [24], SC Seabirds & Chewing Lice [25], RP Rodents & Pinworms [26], SCF Smut Fungi & Caryophillaceus plants [27], PLML Pelican Lice ML [28] (the trees are generated through a maximum likelihood approach), PLMP Pelican Lice MP [28] (the trees are generated through a maximum parsimony approach), RH Rodents & Hantaviruses [29], PP Primates & Pinworm [30], and FD Fishs and Dactylogyrus [31].\n\n\nIn addition, we used a dataset of our own which corresponds to arthropod hosts and a bacterium genus, Wolbachia, living inside the cells of their hosts [32,33]. The datasets were chosen to provide a variety in terms of size of the host and parasite trees: those from the literature are relatively small (from 7 to 100 leaves), while our own data provide an example of much bigger host and parasite trees, each having 387 leaves. Moreover, we were careful that the selected datasets cover, as much as possible, a range of situations in terms of coevolution and of the expected frequencies of each event\n\n\n\n\nFrom “Visualizing Co-phylogenetic Reconciliations”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd finally, a collection of graph problems:\n\n\n\n\n\n\n\nSteinLib\n\n\n\n\n\nSteinLib is a collection of Steiner tree problems in graphs and variants. Their website has additional information about each problem in the dataset, including whether or not it has been solved. We omit two sets, Relay and EFST, from our provided data due to size constraints.\n\n\nOriginally found at: https://steinlib.zib.de/steinlib.php\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 6-38,418 nodes, 9-221,445 edges\n\n\n\nNumber of Graphs: 1207\n\n\n\nOrigin paper: \n\n\n\n[@Koch2001]\n\n\nSteinLib: An Updated Library on Steiner Tree Problems in Graphs\n\n\n\n\nUsage examples: \n\n\n\n[@chimani2016]\n\n\nA Note on the Practicality of Maximal Planar Subgraph Algorithms\n\n\n\nplanar\n\n\n\n\n\n\n\n\n\n\n\n\nFrom A Note on the Practicality of Maximal Planar Subgraph Algorithms:\n\nWe use the non-planar graphs of the established benchmark sets North [12] (423 instances), Rome [11] (8249), and SteinLib [16] (586), all of which include real-world instances. In our plots, we group instances according to |V| rounded to the nearest multiple of 10; for Rome we only consider graph with ≥ 25 vertices.\n\n\n\n\nFrom SteinLib: An Updated Library on Steiner Tree Problems in Graphs:\n\n\n\n\n\n\n\n\n\n\n\nA popular choice is to use datasets from Established Network Repositories. These are ample collections, often organized in dedicated websites which also offer a few stats about the contained graphs. Because their hosts are already dedicated to the maintaining and reporting of information on these collections, we do not include here any storage of the data (which would be redundant) or report statistics on them. Rather, our analysis here is focused on highlighting their properties, origins, and ways in which they have been used.\nCompiled by the Mathematical and Computational Sciences Division of the Information Technology Laboratory of the National Institute of Standards and Technology, the Matrix Market is a repository of test data for use in comparative studies of algorithms for numerical linear algebra, featuring nearly 500 sparse matrices from a variety of applications, as well as matrix generation tools and services. It has been used for experiments with generic graphs, large graphs, and graphs with weighted edges. Each matrix entry is accompanied by metadata that includes the matrix name and identifier, dimensions (number of rows and columns), number of non-zero elements, symmetry type (symmetric, skew-symmetric, or general) and data type (real, complex, integer, or pattern). The website also provides visualizations of the matrices, helping users understand their structure and distribution of non-zero elements. Downloads are also provided in a variety of formats, including their own Matrix Market Exchange (MME) format, Harwell-Boeing, and MATLAB.\n\n\n\n\n\n\nMatrix Market\n\n\n\n\n\n\n\n\nOriginally found at: https://math.nist.gov/MatrixMarket/index.html\n\n\n\nDownload formatted data: \n\n\n\nNote: A repository of test data for use in comparative studies of algorithms for numerical linear algebra, featuring nearly 500 sparse matrices from a variety of applications, as well as matrix generation tools and services.\n\n\n\nOrigin Notes: Compiled by the https://math.nist.gov/mcsd/ of the http://www.itl.nist.gov/ of the http://www.nist.gov/\n\n\n\nOrigin paper: \n\n\nMatrix Market: a web resource for test matrix collections\n\n\n\nUsage examples: \n\n\n\n[link]   Aesthetic Discrimination of Graph Layouts\n\n\n\ngeneric\n\n\n\n\n\n[link]   Drawing graphs by eigenvectors: theory and practice\n\n\n\ngeneric\n\n\n\n\n\n[link]   Eigensolver methods for progressive multidimensional scaling of large data\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[link]   Graph Drawing by Stress Majorization\n\n\n\ngeneric\n\n\nweighted edges\n\n\n\n\n\n[link]   Sublinear Time Force Computation for Big Complex Network Visualization\n\n\n\nlarge\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “Graph Drawing by Stress Majorization”:\n\n\n\n\n\n\n\n\nThe first example is the 1138Bus graph (|V|=1138, |E|=1458) from the Matrix Market repository [1]. This graph models a network of high-voltage power distribution lines. Figure 4 shows two layouts of this graph.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “Drawing graphs by eigenvectors: theory and practice” (top two layouts are a Matrix Market graph):\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “Graph Drawing by Stress Majorization”:\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Network Repository was proposed in 2015 by Rossi and Ahmed of Purdue University as a visually interactive real world graph tool and database. Graphs in this repository are tagged with their real-world source, have in-depth analysis, and even a preview visualization of each individual graph. Types of graphs include social networks, infrastructure networks, biological networks, and many others. The repository also offers sources for individual graphs. It contains many graphs from other benchmark sets described here.\n\n\n\n\n\n\nNetwork Repository\n\n\n\n\n\n\n\nOriginally found at: https://networkrepository.com/\n\n \n\nOrigin paper: \n\n\n\n[@nr]\n\n\nThe Network Data Repository with Interactive Graph Analytics and Visualization\n\n\n\n\nUsage examples: \n\n\n\n[@Eades2018]\n\n\nDrawing Big Graphs Using Spectral Sparsification\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Arleo2019]\n\n\nA Distributed Multilevel Force-Directed Algorithm\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n\nFrom “A Distributed Multilevel Force-Directed Algorithm”:\n\nTo evaluate the running time of MULTI-GILA, we used the REALGRAPHS and BIGGRAPHS benchmarks, which contain larger graphs extracted from both real-world applications and synthetic generators; see Table 4. The REALGRAPHS set includes the 5 largest real-world graphs (mainly scale-free graphs) used in the experimental study of GILA [5]. These graphs are taken from the Stanford Large Networks Dataset Collection [3] and from the Network Data Repository [46], and their number of edges is between 121523 and 1541514.\n\nFrom “Drawing Big Graphs Using Spectral Sparsification”:\n\nWe used three data sets. The first set of graphs is taken from “defacto-benchmark” graphs, including the Hachul library, Walshaw’s Graph Partitioning Archive, the sparse matrices collection [6] and the network repository [24]. These include two types of graphs that have been extensively studied in graph drawing research: grid-like graphs and scale-free graphs.\n\n\n\n\n\n\nThe Pajek Program for Large Network Analysis is a tool developed and hosted by Andrej Vlado and some of their colleagues. As part of this program, they later compiled relevant graphs and links to other datasets, which we call today the Pajek collection. As a curiosity, pajek means spider in Slovenian. Many of Pajek graphs have been included as part of the SuiteSparse Matrix Collection.\n\n\n\n\n\n\nPajek\n\n\n\n\n\n\n\nOriginally found at: http://vlado.fmf.uni-lj.si/pub/networks/data/\n\n  \n\nOrigin paper: \n\n\n\n[@pajek]\n\n\nPajek datasets\n\n\n\n\nUsage examples: \n\n\n\n[@noack2004]\n\n\nEnergy Models for Graph Clustering\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\n\n\n\n[@Meidiana2019]\n\n\nA Quality Metric for Visualization of Clusters in Graphs\n\n\n\nclusters (generated)\n\n\n\n\n\n\nFrom “Energy Models for Graph Clustering”:\n\nAirline Routing (Figure 5): The nodes of this graph represent US airports, and the (unweighted) edges represent direct flights. The probability that two airports are connected by a direct flight is strongly related to their geographical distance: Most direct flights are relatively short, and only few large hub airports are connected by direct long-range flights. The distances in the edge-repulsion LinLog layout resemble the relative geographical distances of the airports remarkably closely, given that the graph does not contain any explicit information about geographical distances.\n\n\nDictionary (Figure 7): The nodes represent terms in the Online Dictionary of Library and Information Science (ODLIS), and the edges represent hyperlinks. A hyperlink between two terms exists if one term is used to describe the meaning of the other term, and thus connects semantically related terms. The edge-repulsion LinLog layout indeed groups semantically related terms, which is better reflected in the VRML file on the supplementary web page than in Figure 7(c). Such a grouping is useful, for example, for discovering the global topic areas (like publishing, printing, information technology, etc.), for identifying entry points for the exploration of topics, or for finding semantically related terms even if they are not explicitly linked.\n\nFrom “A Quality Metric for Visualization of Clusters in Graphs”:\n\nWe re-used some datasets from the validation experiments and created some new ones, listed in Table 2. We also selected real world graph datasets with existing vertex categorization, which are listed under the double line in Table 2. The datasets were taken from Pajek [2] and Stanford Network Analysis Project’s (SNAP) repository [23, 40].\n\n\n\n\nFrom “Energy Models for Graph Clustering”:\n\n\n\n\n\n\n\n\n\n\n\n\nThe SNAP repository is a collection of datasets assembled as part of the Stanford Network Analysis Platform, which started in 2004 and launched their website in 2009. Well-known, widely used graph repository.  A number of graphs that became relevant individually are included in SNAP, such as Enron, Amazon, Protein Interactions datasets and various Social Network graphs. SNAP contains generic graphs, directed and undirected graphs, dynamic graphs and more. Graphs are presented with name and descriptions and a few statistics such as a general description, numbers of nodes and edges, source and reference information.\n\n\n\n\n\n\nSNAP (Stanford Network Analysis Platform)\n\n\n\n\n\n\n\nOriginally found at: http://snap.stanford.edu/data/index.html\n\n \n\nSize: 1008 unique graphs (excluding graph classification tasks consisting of 352,536 graphs)\n\n \n\nOrigin paper: \n\n\n\n[@snapnets]\n\n\nSNAP Datasets: Stanford Large Network Dataset Collection\n\n\n\n\nUsage examples: \n\n\n\n[@Arleo2019]\n\n\nA Distributed Multilevel Force-Directed Algorithm\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Meidiana2019]\n\n\nA Quality Metric for Visualization of Clusters in Graphs\n\n\n\nclusters (generated)\n\n\n\n\n\n\n\n\nForceAtlas2\n\n\n\n\n\n\n\n\n\n\na Continuous Graph Layout Algorithm for Handy Network Visualization Designed for the Gephi Software\n\n\n\n\n\n\n\n\n\n\nA Random Sampling O\n\n\n\n\n\n\n\n[@zhong2023]\n\n\nForce-Directed Graph Layouts Revisited: A New Force Based on the T-Distribution\n\n\n\ngeneric\n\n\n\n\n\n[@meidiana2023]\n\n\nShape-Faithful Graph Drawings\n\n\n\nalmost proximity drawable graphs\n\n\nmesh graphs\n\n\nscale-free graphs\n\n\nstrong proximity drawable graphs\n\n\nweak proximity drawable graphs\n\n\n\n\n\n\nFrom “ForceAtlas2, a Continuous Graph Layout Algorithm for Handy Network Visualization Designed for the Gephi Software”:\n\nWe benchmarked our algorithm with a dataset of 68 networks from 5 to 23,133 nodes. We tried to gather varied networks corresponding to the actual use of Gephi (a lot of social networks, and scale-free networks in general). Most of these networks are from the Stanford Large Network Dataset Collection (http://snap. stanford.edu/data/) and include social networks (Facebook and Twitter ego-networks), collaboration networks (from Arxiv) and autonomous systems (peering information inferred from Oregon route-views).\n\n\n\n\nFrom “ForceAtlas2, a Continuous Graph Layout Algorithm for Handy Network Visualization Designed for the Gephi Software”:\n\n\n\n\n\n\n\n\nCompiled by Donald Knuth, the Stanford Graphbase consists of programs and datasets for network analysis. The datasets accompany a textbook, “The Stanford GraphBase: A Platform for Combinatorial Computing”.\n\n\n\n\n\n\nStanford GraphBase\n\n\n\n\n\n\n\nOriginally found at: https://www-cs-faculty.stanford.edu/~knuth/sgb.html\n\n\n\nOrigin paper: \n\n\n\n[@Knuth_2009]\n\n\nThe Stanford GraphBase: A Platform for Combinatorial Computing\n\n\n\n\nUsage examples: \n\n\n\n[@kruiger2017]\n\n\nGraph Layouts by t-SNE\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\nplanar\n\n\nspatial\n\n\n\n\n\n[@Raj2018]\n\n\nAnisotropic Radial Layout for Visualizing Centrality and Structure in Graphs\n\n\n\nclusters (generated)\n\n\nweighted edges\n\n\n\n\n\n[@Gronemann2016b]\n\n\nCrossing Minimization in Storyline Visualization\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@junger1997]\n\n\n2-Layer Straightline Crossing Minimization\n\n\n\nbipartite\n\n\nlayered graphs\n\n\n\n\n\n[@barth2002]\n\n\nSimple and Efficient Bilayer Cross Counting\n\n\n\nbipartite\n\n\nlayered graphs\n\n\n\n\n\n\n\n\nA Random Sampling O\n\n\n\n\n\n\n\n\nFrom “Crossing Minimization in Storyline Visualizations”:\n\nSince the instances “Anna Karenina” and “Les Miserables” are very big, we have split them into chapters and sequences of chapters. The resulting test-bed is made of eight chapters, seven pairs of chapters, six triples of chapters and five quadruples of chapters from “Anna Karenina”, and five chapters, four pairs of chapters and three triples of chapters from “Les Mis ́erables”, plus the entire “Adventures of Huckleberry Finn”, “Inception-sf”, “Inception”, “Star Wars”, “The Matrix-sf”, and “The Matrix”.\n\nFrom “Anisotropic Radial Layout for Visualizing Centrality and Structure in Graphs”:\n\nThe third dataset is a graph of character associations in the famous French novel Les Miserables (Fig. 5) [18]. This graph consists of 77 nodes, each representing a character in the novel, and 254 weighted edges where the weights represent the number of chapters that feature both characters associated with an edge. We see the that the main protagonist Valjean (marked in red) is placed prominently in all three visualizations (Fig. 5). However, other key characters in the plot such as Inspector Javert (blue) and Cosett (orange), who do not appear often with characters other than the protagonist (and thus have low betweenness centrality) are treated differently. While the radial layout relegates them to the periphery (far from Valjean) (Fig. 5b), MDS (Fig. 5a) paints a conflicting picture with regard to their centrality, e.g., Cosett’s node almost overlaps with Valjean despite its low centrality. In contrast, the proposed ARL (Fig.5c) is able to coherently convey the low centrality of the Inspector Javert and Cosett, as well as, their closeness to Valjean. The above issue of distance distortion appears to be a frequent occurrence in the radial layout due to many characters who have a low centrality value causing them to end up being packed in the outer periphery. A case of contrast is that of the character Bishop Myriel (green) who despite being associated with several characters, is only seen with Valjean once.\n\n\n\n\nFrom “Crossing Minimization in Storyline Visualizations”:\n\n\n\nFrom “Graph Layouts by t-SNE”:\n\n\n\nlesmis is the GraphBase Les Miserables graph\nFrom “Anisotropic Radial Layout for Visualizing Centrality and Structure in Graphs”:\n\n\n\n\n\n\n\n\nThe SuiteSparse Matrix Collection, formerly known as the University of Florida Sparse Matrix Collection, is a comprehensive repository of 2893 sparse matrices. All graphs in SuiteSparse belong to groups which will have more information about the graphs and the sub-collections they belong to. In our Descriptions from the Literature section we also highlight a few tables with the specific graphs used in a couple of papers. From “The university of Florida Sparse Matrix Collection”, Davis and Hu describe the origin of this network repository. Namely they cite the Harwell-Boeing collection as the starting point for SuiteSparse, then called the University of Florida (UF) Sparse matrix collection, back in 1991. Other groups, or collections, have then been added to SuitseSparse through the years, mainly focusing on real-world matrices and other relevant problems related to them.\n\n\n\n\n\n\nSuiteSparse Matrix Collection\n\n\n\n\n\n\n\nOriginally found at: https://sparse.tamu.edu/\n\n\n\nSize: 2893\n\n\n\nOrigin paper: \n\n\n\n[@davis2011]\n\n\nThe University of Florida Sparse Matrix Collection\n\n\n\n\nUsage examples: \n\n\n\n[@Gansner2013]\n\n\nA Maxent-Stress Model for Graph Layout\n\n\n\ngeneric\n\n\n\n\n\n[@Ortmann2017]\n\n\nA Sparse Stress Model\n\n\n\nlarge\n\n\nweighted edges\n\n\n\n\n\n[@Eades2018]\n\n\nDrawing Big Graphs Using Spectral Sparsification\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Hong2019]\n\n\nMulti-level Graph Drawing Using Infomap Clustering\n\n\n\nmultilevel\n\n\n\n\n\n[@Brsig2020]\n\n\nStochastic Gradient Descent Works Really Well for Stress Minimization\n\n\n\ngeneric\n\n\n\n\n\n[@kruiger2017]\n\n\nGraph Layouts by t-SNE\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\nplanar\n\n\nspatial\n\n\n\n\n\n[@zheng2019]\n\n\nGraph Drawing by Stochastic Gradient Descent\n\n\n\ngeneric\n\n\n\n\n\n[@DRGraph21]\n\n\nDRGraph: An Efficient Graph Layout Algorithm for Large-scale Graphs by Dimensionality Reduction\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@zhong2023]\n\n\nForce-Directed Graph Layouts Revisited: A New Force Based on the T-Distribution\n\n\n\ngeneric\n\n\n\n\n\n[@miller2023]\n\n\nSpherical Graph Drawing by Multi-dimensional Scaling\n\n\n\ngeneric\n\n\n\n\n\n[@meidiana2023]\n\n\nShape-Faithful Graph Drawings\n\n\n\nalmost proximity drawable graphs\n\n\nmesh graphs\n\n\nscale-free graphs\n\n\nstrong proximity drawable graphs\n\n\nweak proximity drawable graphs\n\n\n\n\n\n\nFrom “A Sparse Stress Model”:\n\nWe conducted our experiments on a series of different graphs, see Tab. 1, most of them taken from the sparse matrix collection [9]. We selected these graphs as they differ in their structure and size, and are large enough to compare the results of different techniques. Two of the graphs, LeHavre and commanche, have predefined edge lengths that were derived from the node coordinates. We did not modify the graphs in any way, except for those that were disconnected, in which case we only kept the largest component.\n\n\n\n\nFrom “A Maxent-Stress Model for Graph Layout”:\n\nWith the exception of graph gd, which is an author collaboration graph of the International Symposium on Graph Drawing between 1994 and 2007, the graphs used are from the University of Florida Sparse Matrix Collection [9]. Our selection covers a range of graph sizes, and includes mesh-like and other nonmesh graphs, and graphs from Brandes and Pich’s experimental study of distance scaling [5].\n\n\n\n\nTable 2. Test Graphs\nFrom “DRGraph: An Efficient Graph Layout Algorithm for Large-scale Graphs by Dimensionality Reduction”:\n\nWe perform experiments on a broad range of datasets selected from the University of Florida Sparse Matrix Collection [10] and tsNET [34] (Table 1).\n\n\n\n\nTable 1. Test Datasets\n\n\n\nFrom “The university of Florida sparse matrix collection”:\n\n\n\nFig. 13. A sample of matrices from the Collection, for the purpose of illustrating the complexity and diversity of matrices arising in real applications\nFrom “DRGraph: An Efficient Graph Layout Algorithm for Large-scale Graphs by Dimensionality Reduction”:\n\n\n\nFig. 8. Visualizations of selected graph datasets using FR, KK, S.M., FM3, SFDP, PMDS, tsNET and DRGraph.\n\n\n\n\n\n\n\nA number of papers used individual, Single Graphs for their experiments instead of a collection. These graphs have become popular because of their properties as individual graphs - see, for example, the Enron dataset below, a huge individual graph that has a large variance in node degree distribution. Many of these graphs are also available in other repositories - their locations are noted wherever known.\n\n\n\n\n\n\n\nEnron\n\n\n\n\n\n\nData made public by the Federal Energy Regulatory Commission when investigating Enron. It has had a few changes over time documented in the link provided as its source. The data is currently hosted by William W. Cohen from CMU on a webiste, and it is also hosted on SNAP. SNAP asks to cite the paper linked in Origin paper. Very high variance in node degrees. Data can be considered threaded and directed, although SNAP provides a version of the network that is explicitly undirected. This dataset proves useful for evaluating algorithms that work on very large graphs, due to its very large size.\n\nOriginally found at: https://www.cs.cmu.edu/~enron/\n\n\n\nSize: The data consists of 150 Enron executives, who sent 500,000 messages between themselves.\n\n\n\nOrigin paper: \n\n\n\n[@Klimt2004IntroducingTE]\n\n\nIntroducing the Enron Corpus\n\n\n\n\nUsage examples: \n\n\n\n[@Tanahashi2015]\n\n\nAn Efficient Framework for Generating Storyline Visualizations from Streaming Data\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@vandenElzen2013]\n\n\nReordering massive sequence views: Enabling temporal and structural analysis of dynamic networks\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n\nFrom “Reordering massive sequence views: Enabling temporal and structural analysis of dynamic networks”:\n\nWe cleaned the data set by removing duplicates, spam and only to contain internal communication between Enron employees annotated with employee function leaving us with 151 nodes (employees) and 21374 edges (emails). Visualization using a node-link diagram enables the identification of stronger connections (see Figure 9(a)). However, temporal patterns and the evolution of the network cannot be analysed. From the standard MSV (Figure 9(b)) it becomes somewhat clear that transaction density increases over time and we can distinguish between different phases. We cannot, however, see features and identify communities due to visual clutter\n\n\n\n\nFrom “An Efficient Framework for Generating Storyline Visualizations from Streaming Data”:\n\n\n\nFrom “Reordering massive sequence views: Enabling temporal and structural analysis of dynamic networks”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCalifornia\n\n\n\n\n\n\nData contains links related to an online search of the word “California” as nodes - the edges are links between webpages. We found this dataset on the webpage of a 2002 computer science course at Cornell, instructed by Jon Kleinberg. The original name was Pages that match the word “California”. They mention how the data was queried from a search engine, and that many of the original links are broken. It is not clear whether Kleinberg collected the data, or compiled it for the course.\n\nOriginally found at: https://www.cs.cornell.edu/courses/cs685/2002fa/data/gr0.California\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 4772 nodes, 8965 edges\n\n\n\nOrigin paper: \n\n\n\n[@Kleinberg_2002]\n\n\nThe Structure of Information Networks\n\n\n\n\nUsage examples: \n\n\n\n[@muelder2008b]\n\n\nA Treemap Based Method for Rapid Layout of Large Graphs\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@muelder2008]\n\n\nRapid Graph Layout Using Space Filling Curves\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “A Treemap Based Method for Rapid Layout of Large Graphs”:\n\nThis particular graph is a non-weighted graph of links between search results for the word “California” (also in Figures 6, 8, and 9, |V|=6107,|E|=15160).\n\nFrom “Rapid Graph Layout Using Space Filling Curves”:\n\nThe “california” dataset (shown in Figures 5 and 8) consists of the links between the webpages found from a search for the word ‘California’ [4].\n\n\n\n\nFrom “A Treemap Based Method for Rapid Layout of Large Graphs”:\n\n\n\nFig. 1. A graph laid out using our treemap based approach. This graph portrays the links between websites that came from a search on the word “California” [7]. Nodes are clustered into a hierarchy, and laid out by applying a treemap to this hierarchy. Levels of the hierarchy below a threshold are clustered together into larger nodes. It can very easily be seen that there are three primary groups of websites that link to each other, and a plethora of others that are not as tightly linked.\nFrom “Rapid Graph Layout Using Space Filling Curves”:\n\n\n\nFig. 5 Separating clusters. By adjusting the spacing between nodes according to the clustering information, clusters can be separated.\n\n\n\n\n\n\n\n\n\n\n\nWorld Greenhouse Gas Emissions\n\n\n\n\n\n\nData collected by the WRI. Linked data is from a different year than the data used by Optimal Sankey Diagrams Via Integer Programming, for which data could not be found. Contains weighted edges, weighted nodes, categorical nodes, and layers.\n\nOriginally found at: https://www.wri.org/data/world-greenhouse-gas-emissions-2005 https://www.wri.org/search?keys=world%20greenhouse%20gas%20emissions&f%5B0%5D=content_type%3Adata https://github.com/lhc70000/sankey/tree/master\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 40 nodes, 85 edges\n\n\n\nOrigin paper: \n\n\n\n[@navigating_numbers]\n\n\nNavigating the Numbers: Greenhouse Gas Data and International Climate Policy\n\n\n\n\nUsage examples: \n\n\n\n[@zarate2018]\n\n\nOptimal Sankey Diagrams via Integer Programming\n\n\n\nclusters (pre-existing)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have tested our method on the “World Greenhouse Gas Emissions” data from the World Resources Institute [8]. After transforming the “long” edges of the graph into “short” edges and adding the corresponding dummy nodes, as described in Section 3, this example has 4 layers, 55 nodes and 100 edges. The node ordering in the layout of the Sankey diagram shown in Figure 1 has been computed using Sugiyama’s heuristic method [13].\n\n\n\n\nFrom Optimal Sankey Diagrams via Integer Linear Programming:\n\n\n\n\n\n\n\n\n\n127.0.0.1:5501:150:21\n\n\n\n\n\n\n\n\n\n\nChess Games\n\n\n\n\n\n\n20,058 chess openings from games in a database of played online chess games. The authors of “Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes” collected the dataset online from the data science platform kaggle. The dataset was collected by user Mitchell J. and collects data from the chess website Lichess.org. The data used in the literature focuses on the 200 most common openings. These are all sequences of 6 moves and are topologically equivalent. It is a layered graph with categorical nodes and layers, and can be seen as a temporal event sequence.\n\nOriginally found at: https://www.kaggle.com/datasets/datasnaek/chess?resource=download https://github.com/VisDunneRight/sequence_braiding/blob/master/data/chess.json\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: The data consists of 20058 sequences, which result in a disconnected graph of 118164 nodes, and 98106 edges.\n\n\n\nOrigin paper: \n\n\n\n[@Jolly_2017]\n\n\nChess Game Dataset (Lichess)\n\n\n\n\nUsage examples: \n\n\n\n[@Bartolomeo2021]\n\n\nSequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n\nFrom “Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes”:\n\n200 Chess openings displayed with Sequence Braiding. Each line represents a sequence of moves of the white player, each group is a chess piece type. Most openings start with a pawn, and very little with the knight.\n\n\n\n\nFrom “Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes”:\n\n\n\nFig. 7. 200 Chess openings displayed with Sequence Braiding. Each line represents a sequence of moves of the white player, each group is a chess piece type. Most openings start with a pawn, and very little with the knight. After moving a pawn, it is common to move a knight or a pawn, it is a little less common to move a bishop, and only a little number of openings move the queen on the second move.\n\n\n\n\n\n\n\n\n\n\n\nTree of Life\n\n\n\n\n\n\nPart of the http://tolweb.org/tree/to characterize information about biodiversity and their evolutionary genealogy. It is a tree tree with categorical nodes.\n\nOriginally found at: https://www.kaggle.com/datasets/konivat/tree-of-life?resource=download\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 35,960 nodes, 35,959 edges\n\n\n\nOrigin paper: \n\n\n\n[@gkab301]\n\n\nInteractive Tree Of Life (iTOL) v5: an online tool for phylogenetic tree display and annotation\n\n\n\n\n[@maddison2007]\n\n\nThe Tree of Life Web Project\n\n\n\n\nUsage examples: \n\n\n\n[@gray2023]\n\n\nVisualizing Evolving Trees\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\n\n\n\n\nFrom “Visualizing Evolving Trees”:\n\nThe Tree of Life: captures the evolutionary progression of life on Earth [37]. The underlying data is a tree structure with a natural time component. As a new species evolves, a new node in the tree is added. The edges give the parent-child relation of the nodes, where the parent is the original species, and the child is the new species. We use a subset of this graph with 500 nodes. The maximum node degree of this tree is 5, and the radius is 24\n\n\n\n\nFrom “Visualizing Evolving Trees”:\n\n\n\nFig. 4. Layouts obtained by the seven methods for the tree of life dataset.\n\n\n\n\n\n\n\n\n\n\n\n\nWorld Bank Trade Data\n\n\n\n\n\n\nBilateral trade value in 1999 (total imports+exports), from wits.worldbank.org. It is dense and has categorical nodes.\n\nOriginally found at: https://wits.worldbank.org/module/ALL/sub-module/ALL/reporter/ALL/year/ALL/tradeflow/ALL/pagesize/50/page/1\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n \n\nSize: 194 nodes, 10080 edges\n\n\n\nOrigin paper: \n\n\n\n[@SUBRAMANIAN2007151]\n\n\nThe WTO promotes trade strongly but unevenly\n\n\n\n\nUsage examples: \n\n\n\n[@noack2004]\n\n\nEnergy Models for Graph Clustering\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\n\n\n\n[@nocaj2015]\n\n\nUntangling the Hairballs of Multi-Centered Small-World Online Social Media Networks\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “Energy Models for Graph Clustering”:\n\nThe difference between conventional energy models, node-repulsion LinLog, and edge-repulsion LinLog can be illustrated with a model of the trade between ten North American and European countries. The nodes of the graph correspond to the countries, and the edge weights specify the trade volume between each pair of countries. Because of geographical closeness and free trade agreements, countries on the same continent trade more intensively than countries on different continents. Figure 1 shows the minimum energy layouts of the trade graph for the three force and energy models. The layout of the widely used Fruchterman-Reingold model [20] does not show any clear groups at all. The layout of the node-repulsion LinLog energy model groups the countries (nodes) primarily according to their total trade volume (degree). Only the layout of the edge-repulsion LinLog energy model shows the expected grouping according to continents.\n\n\n\n\nFrom “Untangling the Hairballs of Multi-Centered Small-World Online Social Media Networks”:\n\n\n\nFrom “Energy Models for Graph Clustering”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInvestment Interdependence\n\n\n\n\n\n\nData collected in a survey of Ohio State University students by D. W. Malone. Students were presented with two potential obstacles to investment in Columbus, Ohio’s business district and asked, “does obstacle A aggravate or intensify obstacle B?”. Contains directed edges and is hierarchical.\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 25 nodes, 30 edges\n\n\n\nOrigin paper: \n\n\n\n[@malone1975]\n\n\nAn introduction to the application of interpretive structural modeling\n\n\n\n\nUsage examples: \n\n\n\n[@Sugiyama1981]\n\n\nMethods for Visual Understanding of Hierarchical System Structures\n\n\n\nhierarchical\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n\n\n\n\n\n\n\nFrom Methods for Visual Understanding of Hierarchical System Structures:\n\nPresented in Fig. 5 are drawings of the nine-level hierarchy which appeared in Malone [11] and represent the interdependence of obstacles to investment in the Columbus, Ohio, central business district.\n\n\n\n\nFrom Methods for Visual Understanding of Hierarchical System Structures:\n\n\n\nFig. 5. (cropped): Maps of the nine-level hierarchy [11]. (a) Initial. (b) BC + QP methods (c = 1.0). (c) BC + QP methods (cL= 0.5). (d) BC + QP methods (c = 0.05). (e) BC + PR methods.\n\n\n\n\n\n\n\n\n\n\n\nProtein Interactions\n\n\n\n\n\n\nProtein Interaction Publications were collected from the Biological Pathway Commons Database. Various types of protein interaction graphs are recorded in other network collections. We highlight two of them from the surveyed papers. First, we have the temporal Protein Interaction Publications, showing the history of how protein interactions were described in the literature. Second, the Protein Homology graph was provided by the Large Graph Layout project, their links are now broken and the dataset lost. Nonetheless, SNAP and Konect both also have various dataset of human/other species protein interactions.\n\nOriginally found at: https://github.com/CreativeCodingLab/TimeArcs/tree/master/IndexCards https://lgl.sourceforge.net/ (download link broken)\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 2961 nodes, 5267 edges\n\n\n\nOrigin paper: \n\n\n\n[@ADAI2004179]\n\n\nLGL: Creating a Map of Protein Function with an Algorithm for Visualizing Very Large Biological Networks\n\n\n\nUsage examples: \n\n\n\n[@muelder2008]\n\n\nRapid Graph Layout Using Space Filling Curves\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Dang2016]\n\n\nTimeArcs: Visualizing Fluctuations in Dynamic Networks\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom TimeArcs: Visualizing Fluctuations in Dynamic Networks:\n\nThe data contains the publication information (such as publication year, author, and textual evidence) of interactions between pairs of proteins, as well as their specific interaction type.\n\n\nWhen there are multiple arcs connecting two proteins, it falls into one of the two circumstances. If they have the same color, these arcs indicate that there are supporting evidences in different publications which confirm the interaction between two elements. On the other hand, if they have the different colors, the more recent appearance provides either more detailed knowledge about the interaction or shows a conflict between different articles regarding the way in which these proteins interact.\n\n\n\n\nFrom TimeArcs: Visualizing Fluctuations in Dynamic Networks:\n\n\n\nFig. 10: TimeArcs visualization for interactions around PCAF protein. (1), (2), and (3) in the figure are supporting evidences in literature of “PCAF binds MAML”.\n\n\n\n\n\n\nFrom [Rapid Graph Layout Using Space Filling Curves:](https://ieeexplore.ieee.org/document/4658143)\n\nThe “pgraph” dataset (shown in Figures 2 and 6) is a protein homology graph, which is relatively dense [7].\n\nConsists of 28, 854 vertices and 1,180, 816 edges, found in Table 1 of paper above.\n\n\n\nFrom Rapid Graph Layout Using Space Filling Curves:\n\n\n\nFig. 2. A protein homology graph laid out with our space filling curve based approach. Color corresponds to depth in the clustering hierarchy. |V| = 28, 854,|E| = 1, 180, 816\nFrom LGL: Creating a Map of Protein Function with an Algorithm for Visualizing Very Large Biological Networks\n\n\n\nFig. 3. The complete protein homology map. A layout of the entire protein homology map; a total of 11,516 connected sets containing 111,604 proteins (vertices) with 1,912,684 edges. The largest connected set is shown more clearly in the inset and is enlarged further in Figure 4.\n\n\n\n\n\n\n\n\n\nMany papers used graphs from specific domains that contain particular characteristics (e.g., geographical coordinates are often found in airline data). Instead of collecting each one of these individual, contextual datasets, we aggregated them in further subcategories, and called them Aggregate collections. Individual information about about each aggregate collection can be found in the papers that contain them.\n\n\n\n\n\n\nAssorted Collaboration Network\n\n\n\n\n\n\nmake_sparkline(\"Assorted_CollaborationNetwork\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAirlines, Migrations, and Air Traffic\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode Dependency Graphs\n\n\n\n\n\n//| echo: false\n\nmake_sparkline(\"Code_DependencyGraphs\")\n\n\n\n\n\n\n\n\n\n\n\n\nBlogposts, Tweets, and Forums\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSocial Networks\n\n\n\n\n\n//| echo: false\n\nmake_sparkline(\"Social_Networks\")\n\n\n\n\n\n\n\n\n\n\n\n\nTransportation Networks\n\n\n\n\n\n\nmake_sparkline(\"Transportation_Networks\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFinally, we collected some datasets that we noticed being subsets of existing collections. This is a phenomenon that can happen through the years, through the redistribution and through the merging of different sources: the Walshaw dataset, for instance, was and still is distributed and cited as its own standalone dataset, but its graphs can be found as part of many other larger collections, such as SNAP. We classified these datasets as Subsets.\n\n\n\n\n\n\n\nWalshaw\n\n\n\n\n\nC. Walshaw, collected for an archive of graph partitions which has been maintained since 2000. These are multilevel mesh partitions of heterogeneous networks from a variety of domains.\nWe do not provide the the data ourselves. Walshaw requests to be emailed for the distribution of the data, and so we link to their site and to the graphs found in the SuiteSparse Matrix Collection.\n\n\nOriginally found at: https://chriswalshaw.co.uk/partition/ where C. Walshaw requests to be emailed for the dataset at mailto:c.walshaw@gre.ac.uk. the individual graphs can also be found on the SuiteSparse Matrix Collection under different groups.\n\n\n\nSize: 34 graphs, 2395-448695 nodes, 6837-3314611 edges. Node-weighted, edge-weighted. Partitions of the 34 graphs are given with various partition sizes and imbalance percentages.\n\n\n\nOrigin paper: \n\n\n\n[@soper_combined_2004]\n\n\nA Combined Evolutionary Search and Multilevel Optimisation Approach to Graph Partitioning\n\n\n\n\n[@walshaw2000]\n\n\nMesh Partitioning: a Multilevel Balancing and Refinement Algorithm\n\n\n\n\nUsage examples: \n\n\n\n[@walshaw2001]\n\n\nA Multilevel Algorithm for Force-Directed Graph Drawing\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\n\n\n\n[@frishman2007]\n\n\nMulti-Level Graph Layout on the GPU\n\n\n\ngeneric\n\n\n\n\n\n[@koren2002]\n\n\nACE: A Fast Multiscale Eigenvectors Computation for Drawing Huge Graphs\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@KOREN20051867]\n\n\nDrawing graphs by eigenvectors: theory and practice\n\n\n\ngeneric\n\n\n\n\n\n[@civril2006]\n\n\nSDE: Graph Drawing Using Spectral Distance Embedding\n\n\n\ngeneric\n\n\n\n\n\n\n\n\nEfficient and High Quality Force-Directed Graph Drawing\n\n\n\ngeneric\n\n\n\n\n\n\n\n\nLarge-Graph Layout with the Fast Multipole Multilevel Method\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Hachul2005]\n\n\nDrawing Large Graphs with a Potential-Field-Based Multilevel Algorithm\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Eades2018]\n\n\nDrawing Big Graphs Using Spectral Sparsification\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Hachul2006]\n\n\nAn Experimental Comparison of Fast Algorithms for Drawing General Large Graphs\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@brandes2006]\n\n\nEigensolver methods for progressive multidimensional scaling of large data\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Gansner2005b]\n\n\nTopological fisheye views for visualizing large graphs\n\n\n\ngeneric\n\n\nhigh degree\n\n\nlarge\n\n\n\n\n\n[@Frishman2008]\n\n\nOnline Dynamic Graph Drawing\n\n\n\ndynamic\n\n\n\n\n\n[@Hong2019]\n\n\nMulti-level Graph Drawing Using Infomap Clustering\n\n\n\nmultilevel\n\n\n\n\n\n\n\n\nA Random Sampling O\n\n\n\n\n\n\n\n[@meidiana2020]\n\n\nSublinear Time Force Computation for Big Complex Network Visualization\n\n\n\nlarge\n\n\n\n\n\n\nFrom “An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs”:\n\nThe rest of the test graphs are taken from real-world applications. In particular, we selected graphs from the AT&T graph library [1], from C. Walshaw’s graph collection [20], and a graph that describes a social network of 2113 people that we obtained from C. Lipp.\n\nFrom “A Combined Evolutionary Search and Multilevel Optimisation Approach to Graph-Partitioning”:\n\nThe test graphs have been chosen to be a representative sample of small to medium scale real-life problems (mostly mesh-based) and include both 2D and 3D examples of nodal graphs (where the mesh nodes are partitioned) and dual graphs (where the mesh elements are partitioned). In addition there is a 3D semi-structured graph, cti, which is unstructured in the x−y plane but extended regularly along the z-axis. Finally the test suite includes three non mesh-based graphs (add32, vibrobox, bcsstk32) which arise from various scientific computing applications2. None of the graphs have either vertex or edge weights; such graphs are not widely available since most applications do not accurately instrument costs and it is difficult to draw meaningful conclusions from the few examples that we have access to.\n\n\n\n\n\n\n\nFrom “An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs”:\n\n\n\nFrom “Multi-Level Graph Layout on the GPU”:\n\n\n\nFig. 11. 4elt. Red: our layout, black: Kamada-Kawai layout\n\n\n\nFrom Group DIMACS10 in the SuiteSparse Matrix Collection:\nChris Walshaw's graph partitioning archive contains 34 graphs that\n    have been very popular as benchmarks for graph partitioning algorithms\n    ( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).\n\n    17 of them are already in the UF Collection.  Only the 17 new graphs\n    not yet in the collection are added here in the DIMACS10 set.\n\nDIMACS10 graph:                 new?   UF matrix:\n    ---------------                 ----   -------------\n    walshaw/144                      *     DIMACS10/144\n    walshaw/3elt                           AG-Monien/3elt\n    walshaw/4elt                           Pothen/barth5\n    walshaw/598a                     *     DIMACS10/598a\n    walshaw/add20                          Hamm/add20\n    walshaw/add32                          Hamm/add32\n    walshaw/auto                     *     DIMACS10/auto\n    walshaw/bcsstk29                       HB/bcsstk29\n    walshaw/bcsstk30                       HB/bcsstk30\n    walshaw/bcsstk31                       HB/bcsstk31\n    walshaw/bcsstk32                       HB/bcsstk32\n    walshaw/bcsstk33                       HB/bcsstk33\n    walshaw/brack2                         AG-Monien/brack2\n    walshaw/crack                          AG-Monient/crack\n    walshaw/cs4                      *     DIMACS10/cs4\n    walshaw/cti                      *     DIMACS10/cti\n    walshaw/data                     *     DIMACS10/data\n    walshaw/fe_4elt2                 *     DIMACS10/fe_4elt2\n    walshaw/fe_body                  *     DIMACS10/fe_body\n    walshaw/fe_ocean                 *     DIMACS10/fe_ocean\n    walshaw/fe_pwt                         Pothen/pwt\n    walshaw/fe_rotor                 *     DIMACS10/fe_rotor\n    walshaw/fe_sphere                *     DIMACS10/fe_sphere\n    walshaw/fe_tooth                 *     DIMACS10/fe_tooth\n    walshaw/finan512                       Mulvey/finan512\n    walshaw/m14b                     *     DIMACS10/m14b\n    walshaw/memplus                        Hamm/memplus\n    walshaw/t60k                     *     DIMACS10/t60k\n    walshaw/uk                       *     DIMACS10/uk\n    walshaw/vibrobox                       Cote/vibrobox\n    walshaw/wave                           AG-Monien/wave\n    walshaw/whitaker3                      AG-Monien/whitaker3\n    walshaw/wing                     *     DIMACS10/wing\n    walshaw/wing_nodal               *     DIMACS10/wing_nodal\n\n\n\n\n\n\n\n\n\n\n\nPert DAG\n\n\n\n\n\n//| echo: false\n\nmake_sparkline(\"Pert_DAG\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmazon\n\n\n\n\n\n\nmake_sparkline(\"Amazon\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAutonomous System Network\n\n\n\n\n\n\nmake_sparkline(\"Autonomous_SystemNetwork\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nControl Flow Graphs\n\n\n\n\n\n\nmake_sparkline(\"Control_FlowGraphs\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnfortunately, some of the datasets that were used in the papers in our corpus are lost, or not available anymore. While we did go through the effort, for each one of them, to recover them and store them on OSF, we could not find anywhere the following list of datasets:\n\n\n\n\n\n\nGION\n\n\n\n\n\n\nmake_sparkline(\"GION\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFM3\n\n\n\n\n\n\nmake_sparkline(\"FM3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPadia Stories\n\n\n\n\n\n\nmake_sparkline(\"Padia_Stories\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Mapping Project\n\n\n\n\n\n\nmake_sparkline(\"Internet_MappingProject\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMathematics Genealogy\n\n\n\n\n\n\nmake_sparkline(\"Mathematics_Genealogy\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMedical Patient Records\n\n\n\n\n\n\nmake_sparkline(\"Medical_PatientRecords\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssorted Fiscal Network\n\n\n\n\n\n\nmake_sparkline(\"Assorted_FiscalNetwork\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDebates\n\n\n\n\n\n\nmake_sparkline(\"Debates\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCar Features\n\n\n\n\n\n\nmake_sparkline(\"Car_Features\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBusiness Processes\n\n\n\n\n\n\nmake_sparkline(\"Business_Processes\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the data we collected, we also found several instances of custom-made datasets. We consider custom-made datasets either edits to pre-existing datasets, where the authors found it necessary to either split or modify the dataset in a particular way, or datasets completely made up from scratch using random generators or custom-made code. This can happen in cases where the authors of a paper needed a dataset containing particular characteristics which was not easy to find in the wild, so a new dataset was crafted.\nFor instance, consider the case where the authors of a paper develop an algorithm that works on hypergraphs. They want to test that the algorithm works, and test its performance on hypergraphs of various sizes, but datasets containing hypergraphs are difficult to find. For this reason, the authors craft one dataset synthetically, or take a pre-existing dataset and edit it so that it now contains hyperedges.\nWe split custom-made datasets in three categories, with their occurrences in the corpus of papers illustrated below:\n\n{ \n  let d = []\n  \n  let allbenchmarkdatasets = [...new Set(literature.map(l =&gt; l[\"Dataset tag clean\"].split(\",\").map(d =&gt; d.trim())).flat())].filter(a =&gt; a != \"\")\n\n  for (let dataset of allbenchmarkdatasets){\n    if (!dataset.includes(\"Custom\")) continue;\n    let literature_entries_with_this_dataset = literature.filter(l =&gt; l[\"Dataset tag clean\"].includes(dataset))\n\n    d.push({\"dataset\": dataset, \"count\": literature_entries_with_this_dataset.length})\n  }\n  \n  return Plot.plot({\n    color: {\n      // legend: true,\n      type: \"categorical\",\n      // domain: d3.range(10).map((d, i) =&gt; `Category ${i + 1}`),\n      scheme: \"Tableau10\" // use the \"accent\" scheme\n    },\n    y: {\n      // tickFormat: \"s\"\n    },\n    marks: [\n      Plot.barX(d, {x: \"count\", y: \"dataset\", fill: \"dataset\",inset: 2, sort: {y: \"x\", reverse: true}}),\n      Plot.axisY({label: null, lineWidth: 12, marginLeft: 150}),\n    ]\n  })\n}\n\n\n\n\n\n\nReplicable datasets indicate cases where the authors have given enough information so that the experiment can be replicated exactly as it was run by the authors of a paper, or closely enough that the results obtained reflect the published ones very closely. This includes cases where either the authors published the entire dataset they used, they published the code they used to generate the dataset, or include an exact description of the steps they took to generate it.\nReproducible datasets are cases where the authors described the steps they took to generate and/or edit their datasets, but not in-depth enough so that the exact same graphs can be reproduced, and did not redistribute it. Results can still be reproduces somewhat closely if the authors took care to report enough information about their graphs.\nFor non-replicable datasets, we indicate cases where the authors did not distribute their datasets and did not include enough information in the paper so that their results could be replicated.\nThis information is closely tied to the distribution of supplemental material in papers, that is shown in the chart below:\n\n{ \n  let d = []\n  \n  let allbenchmarkdatasets = [...new Set(literature.map(l =&gt; l[\"Supplemental material (Multi-select)\"].split(\",\").map(d =&gt; d.trim())).flat())].filter(a =&gt; a != \"\")\n\n  for (let dataset of allbenchmarkdatasets){\n    let literature_entries_with_this_dataset = literature.filter(l =&gt; l[\"Supplemental material (Multi-select)\"].includes(dataset))\n\n    d.push({\"dataset\": dataset, \"count\": literature_entries_with_this_dataset.length})\n  }\n  \n  return Plot.plot({\n    color: {\n      // legend: true,\n      type: \"categorical\",\n      // domain: d3.range(10).map((d, i) =&gt; `Category ${i + 1}`),\n      scheme: \"Tableau10\" // use the \"accent\" scheme\n    },\n    y: {\n      // tickFormat: \"s\"\n    },\n    marks: [\n      Plot.barX(d, {x: \"count\", y: \"dataset\", fill: \"dataset\",inset: 2, sort: {y: \"x\", reverse: true}}),\n      Plot.axisY({label: null, lineWidth: 12, marginLeft: 150}),\n    ]\n  })\n}\n\n\n\n\n\n\nThis discussion is part of a larger discourse on research replicability, that is gaining traction in the scientific community. The ACM, for instance, has a policy on artifact review and badging, where authors are encouraged to submit their artifacts for review, and if they pass, they receive a badge that indicates the artifact is available for review. This is a step towards making research more replicable and reproducible, and we hope that our work will contribute to this effort.\nSee, e.g., ACM’s definitions at https://www.acm.org/publications/policies/artifact-review-and-badging-current.\n\nfunction make_dataset_name_and_title_list(chosen_collection_type, include_num_graphs){ \n  let collection_type = benchmark_datasets.map(a =&gt; a[\"Type of Collection\"]).filter(c =&gt; c == chosen_collection_type);\n  let y_distance = 20;\n  let svgwidth = 700;\n  let numgraphs_offset = 40;\n\n  const svg = d3.create('svg')\n    .attr('width', svgwidth)\n    .attr('height', y_distance * collection_type.length + 60);\n\n  svg.append(\"text\")\n    .attr(\"x\", svgwidth/2)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"font-weight\", \"bold\")\n    .text(\"List of datasets tagged as \" + chosen_collection_type + \" and their sources\")\n\n  svg.append(\"text\")\n      .attr(\"x\", 200)\n      .attr(\"y\", 45)\n      .style(\"text-anchor\", \"end\")\n      .style(\"font-size\", \"small\")\n      .style(\"fill\", \"#aaa\")\n      .text(\"Name\")\n\n  if (include_num_graphs) {\n    svg.append(\"text\")\n        .attr(\"x\", 240)\n        .attr(\"y\", 45)\n        .style(\"text-anchor\", \"middle\")\n        .style(\"font-size\", \"small\")\n        .style(\"fill\", \"#aaa\")\n        .text(\"#Graphs\")\n  }\n\n  svg.append(\"text\")\n      .attr(\"x\", 320 - (include_num_graphs ? 0 : numgraphs_offset))\n      .attr(\"y\", 45)\n      .style(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"small\")\n      .style(\"fill\", \"#aaa\")\n      .text(\"Original link\")\n\n  svg.append(\"text\")\n      .attr(\"x\", 370 - (include_num_graphs ? 0 : numgraphs_offset))\n      .attr(\"y\", 45)\n      .style(\"text-anchor\", \"start\")\n      .style(\"font-size\", \"small\")\n      .style(\"fill\", \"#aaa\")\n      .text(\"Origin paper / website\")\n\n  for (let c of [... new Set(collection_type)]){\n    if (c == \"Skip\" || c == \"Missed It\") continue;\n    // console.log(c)\n    let instances = benchmark_datasets.filter(a =&gt; a[\"Type of Collection\"] == c);\n    if (c.includes(\"No report\")) c = \"Established Network Repository\";\n\n    for (let i in instances){\n      svg.append(\"text\")\n        .attr(\"x\", 200)\n        .attr(\"y\", 65 + i * y_distance)\n        .style(\"text-anchor\", \"end\")\n        .style(\"font-size\", \"small\")\n        .text(instances[i][\"Name\"] + \" \")\n\n      if (include_num_graphs){\n        svg.append(\"text\")\n          .attr(\"x\", 240)\n          .attr(\"y\", 65 + i * y_distance)\n          .style(\"text-anchor\", \"middle\")\n          .style(\"font-size\", \"small\")\n          .text(instances[i][\"Number of Graphs\"] + \" \")\n      }\n      \n      if (instances[i][\"Originally found at\"] != \"\" && instances[i][\"Originally found at\"] != undefined) {\n        const xPosOff = (include_num_graphs ? 0 : numgraphs_offset);\n        const yPos = (y_distance * i + 65);\n        svg.append(\"a\")\n        .attr(\"href\", instances[i][\"Originally found at\"])\n        .attr(\"transform\", \"translate(\"+ (310 - xPosOff) +\", \" + yPos + \")\")\n        .attr(\"target\", \"_blank\")\n        .append(\"text\")\n        .text(\"[link]\")\n        .style(\"fill\", \"#88d\")\n        .style(\"font-size\", \"small\")\n        \n        const paper = (paper_source.find(a =&gt; a.Name == instances[i][\"Origin paper plaintext\"]) || {})\n        let link = \"\"\n        if('bib' in paper){\n          const res = extractDOIUrl(paper.bib)\n          if (res) link = res;\n        }\n        \n        if(link != \"\"){\n          link = extractDOIUrl(paper.bib)\n          svg.append(\"a\")\n          .attr(\"href\", link)\n          .attr(\"transform\", \"translate(\"+ (370 - xPosOff)+\", \" + yPos + \")\")\n          .attr(\"target\", \"_blank\")\n          .append(\"text\")\n          .text(instances[i][\"Origin paper plaintext\"].split(\"(\")[0])\n          // .style(\"fill\", \"rgb(136, 136, 221)\")\n          .style(\"fill\",\"#1565c0\")\n          .style(\"font-size\", \"small\")\n        } else {\n          // What do we do here\n          svg.append(\"text\")\n          .attr(\"transform\", \"translate(\"+ (370 - xPosOff)+\", \" + yPos + \")\")\n          .text(instances[i][\"Origin paper plaintext\"].split(\"(\")[0])\n          .style(\"fill\", \"#616161\")\n          .style(\"font-size\", \"small\")\n        }\n        \n      }\n    }\n  }\n\n  return svg.node();\n}\n\nfunction extractDOIUrl(bibtex) {\n    // Regular expression to find the DOI within the BibTeX entry\n    const doiRegex = /doi\\s*=\\s*{([^}]+)}/i;\n    \n    // Try to match the DOI in the BibTeX entry\n    const match = bibtex.match(doiRegex);\n    \n    // Check if a DOI was found\n    if (match) {\n        // Return the DOI as a full URL\n        return `https://doi.org/${match[1].trim()}`;\n    } else {\n        // Return null or an appropriate message if DOI is not found\n        return null;\n    }\n}"
  },
  {
    "objectID": "chapters/datasets_in_use.html#classification-of-the-datasets",
    "href": "chapters/datasets_in_use.html#classification-of-the-datasets",
    "title": "1 Datasets in use",
    "section": "",
    "text": "We classified the datasets in different categories, based on their origins or amount of graphs contained in them:\n\n{ \n  let d = []\n  \n  let collection_type = benchmark_datasets.map(a =&gt; a[\"Type of Collection\"]);\n\n  for (let c of [... new Set(collection_type)]){\n    if (c == \"Skip\" || c == \"Missed it\") continue;\n    let count = collection_type.filter(a =&gt; a == c).length;\n    if (c.includes(\"No report\")) c = \"Established Network Repository\";\n    d.push({\"collection_type\": c, \"count\": count})\n  }\n  \n  return Plot.plot({\n    color: {\n      // legend: true,\n      // type: \"categorical\",\n      // domain: d3.range(10).map((d, i) =&gt; `Category ${i + 1}`),\n      scheme: \"Tableau10\" // use the \"accent\" scheme\n    },\n    y: {\n      // tickFormat: \"s\"\n    },\n    marks: [\n      Plot.barX(d, {x: \"count\", y: \"collection_type\", fill: \"collection_type\", inset: 2, sort: {y: \"x\", reverse: true}}),\n      Plot.axisY({label: null, lineWidth: 12, marginLeft: 150}),\n    ]\n  })\n}\n\n\n\n\n\n\n\n\nUniform Benchmark datasets are standalone widely used collections of graphs featuring uniform characteristics - usually simple, generic graphs, often used in evaluations that run over thousands of graphs to report average completion times, or other experiments where the reported metrics are usually aggregated.\nThe first of these collapsible sections is shown already expanded, to give an example of the content that can be found in each of them. The content is generated dynamically based on the data we collected.\n\n\n\n\n\n\n\n\n\nRome-Lib\n\n\n\n\n\nRome-Lib is, as previously discussed, the most common benchmark dataset, due to its already established popularity, its ease of use and access, and the many properties that are already known about it. It was first introduced in [@DiBattista1997b] and presented in their paper ”An experimental comparison of four graph drawing algorithms”. Mostly “real” networks such as software companies, government, software engineering books, database design, and journal articles on visualization. Originally sent as an extended abstract to Computational Geometry in 1995 [@DiBattista1995]. It contains exclusively generic graphs (e.g., undirected, non-layered, without pre-established clusters…), although some of the research that uses it enhances with additional attributes (such as performing a rank assignment step). Information about optimal crossings can be found as part of WebCompute.\n\n\nOriginally found at: http://www.graphdrawing.org/data.html\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 11534 graphs, 10 to 100 nodes, 9 to 158 edges\n\n\n\nOrigin paper: \n\n\n\n[@DiBattista1997b]\n\n\nAn experimental comparison of four graph drawing algorithms\n\n\n\n\n[@DiBattista1995]\n\n\nAn experimental comparison of three graph drawing algorithms (extended abstract)\n\n\n\n\nUsage examples: \n\n\n\n[@Buchheim2008]\n\n\nA branch-and-cut approach to the crossing number problem\n\n\n\ngeneric\n\n\n\n\n\n[@chimani2010]\n\n\nLayer-Free Upward Crossing Minimization\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@chimani2006]\n\n\nExperiments on Exact Crossing Minimization Using Column Generation\n\n\n\ngeneric\n\n\n\n\n\n[@diBartolomeo2022b]\n\n\nStratisfimal Layout: A modular optimization model for laying out layered node-link network visualizations\n\n\n\nclusters (pre-existing)\n\n\ncompound graphs\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@klammler2018]\n\n\nAesthetic Discrimination of Graph Layouts\n\n\n\ngeneric\n\n\n\n\n\n[@Chimani2008]\n\n\nA New Approach to Exact Crossing Minimization\n\n\n\ngeneric\n\n\n\n\n\n[@Gansner2006]\n\n\nImproved circular layouts\n\n\n\ncircular\n\n\n\n\n\n\n\n\nDeep Neural Network for DrawiNg Networks\n\n\n\n\n\n\n\n[@Gutwenger2004]\n\n\nAn Experimental Study of Crossing Minimization Heuristics\n\n\n\ngeneric\n\n\n\n\n\n[@DiBattista1997b]\n\n\nAn experimental comparison of four graph drawing algorithms\n\n\n\ngeneric\n\n\n\n\n\n[@chimani2016]\n\n\nA Note on the Practicality of Maximal Planar Subgraph Algorithms\n\n\n\nplanar\n\n\n\n\n\n[@Kindermann2018]\n\n\nExperimental Analysis of the Accessibility of Drawings with Few Segments\n\n\n\nsparse\n\n\ntrees\n\n\n\n\n\n[@Heinsohn2018]\n\n\nAn Interactive Tool to Explore and Improve the Ply Number of Drawings\n\n\n\ngeneric\n\n\n\n\n\n[@Demel2018]\n\n\nA Greedy Heuristic for Crossing-Angle Maximization\n\n\n\ngeneric\n\n\n\n\n\n[@Bekos2018]\n\n\nA Heuristic Approach Towards Drawings of Graphs with High Crossing Resolution\n\n\n\ngeneric\n\n\n\n\n\n[@Niedermann2020]\n\n\nAn Integer-Linear Program for Bend-Minimization in Ortho-Radial Drawings\n\n\n\northo\n\n\northo-radial\n\n\n\n\n\n[@Chimani2021]\n\n\nStar-Struck by Fixed Embeddings: Modern Crossing Number Heuristics\n\n\n\ngeneric\n\n\n\n\n\n[@Clancy2019]\n\n\nAn effective crossing minimisation heuristic based on star insertion\n\n\n\ngeneric\n\n\n\n\n\n[@Chimani2012]\n\n\nAdvances in the Planarization Method: Effective Multiple Edge Insertions\n\n\n\ngeneric\n\n\n\n\n\n[@chimani2016b]\n\n\nAn ILP-based Proof System for the Crossing Number Problem\n\n\n\ngeneric\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “A branch-and-cut approach to the crossing number problem”:\n\nTo test the performance of our new algorithm, we used a benchmark set of graphs of the University of Rome III, introduced in [11]. The set contains 11 389 graphs that consist of 10 to 100 nodes and 9 to 158 edges. These graphs were generated from a core set of 112 “real life” graphs used in database design and software engineering applications. Most of the graphs are sparse, which is a common property in most application areas of automatic graph drawing. The average ratio between the number of edges and the number of nodes of the graphs from the benchmark set is about 1.35.\n\nFrom “Layer-free upward crossing minimization”:\n\nThe Rome graphs [Di Battista et al. 1997] are a widely used benchmark set in graph drawing, obtained from a basic set of 112 real-world graphs. It contains 11,528 instances with 10 through 100 nodes and 9 through 158 edges. Although the graphs are originally undirected, they have been used as directed graphs—by artificially directing the edges according to the node order given in the input files—for showing the performance of the mixed-upward planarization approach [Eiglsperger et al. 2003]. In this case, all edges are directed and the graphs are acyclic; hence, the mixed-upward planarization approach turns into an upward planarization method.\n\nFrom “A New Approach to Exact Crossing Minimization”:\n\nWe say graphs are trivial, if they are planar or if the heuristic achieves a planarization with only one crossing, as in these cases we need not prove optimality. The Rome library contains 7172 non-trivial graphs.\n\nFrom “An Experimental Comparison of Four Graph Drawing Algorithms”\n\nOur test graph generation strategy is as follows. First, we have focused on the important application area of database and software visualization, where Entity-Relationship diagrams and Data-Flow diagrams are usually displayed with orthogonal drawings. Second, we have collected 112 “real life” graphs with number of vertices between 10 and 100, from now on called core graphs, from the following sources:\n\n\n• 54% of the graphs have been obtained from major Italian software companies (especially from Database Informatica) and large government organization (including the Italian Internal Revenue Service and the Italian National Advisory Council for Computer Applications in the Government (Autorita’ per l’Informatica nella Pubblica Amministrazione)); • 33% of the graphs were taken from well-known reference books in software engineering [18] and database design [1], and from journal articles on software visualization in the recent issues of Information Systems and the IEEE Transactions on Software Engineering; • 13% of the graphs were extracted from theses in software and database visualization written by students at the University of Rome “La Sapienza”.\n\n\nOur approach is based on the following scheme. We defined several primitive operations for updating graphs, which correspond to the typical operations performed by designers of Entity-Relationship and Data-Flow Diagrams, and attributed a certain probability to each of them. More specifically, the updating primitives we have used are the following: InsertEdge, which inserts a new edge between two existing vertices; DeleteEdge, which deletes an existing edge; InsertVertex, which splits an existing edge into two edges by inserting a new vertex; DeleteVertex, which deletes a vertex and all its incident edges; and MakeVertex, which creates a new vertex and connects it to a subset of vertices. The test graphs were then generated in several iterations starting from the core graphs by applying random sequences of operations with a “genetic” mechanism. Namely, at each iteration a new set of test graphs was obtained by applying a random sequence of operations to the current test set. Each new graph was then evaluated for “suitability”, and those found not suitable were discarded. The probability of each primitive operation was varied at the end of each iteration. The evaluation of the suitability of the generated graphs was conducted using both objective and subjective analyses. The objective analysis consisted of determining whether the new graph had similar structural properties with respect to the core graph it was derived from. We have taken into account parameters like the average ratio between number of vertices and number of edges and the average number of biconnected components. The subjective analysis consisted in a visual inspection of the new graph and an assessment by expert users of Entity-Relationship and Data-Flow diagrams of its similarity to a “real-life” diagram. For obvious reasons, the subjective analysis has been done on a randomly selected subset of the graphs.\n\n\n\n\nFrom ”An Experimental Comparison of Four Graph Drawing Algorithms”:\n\n\n\nFrom “Experimental Analysis of the Accessibility of Drawings with Few Segments”:\n\n\n\nFrom: Deep Neural Network for DrawiNg Networks, (DNN)2:\n\n\n\nFig 5. Layout examples for (DNN)^2, (DNN)^2, tsNET∗ and S_GD^2.\n\n\n\n\nThe following collections, together with Rome-Lib, can be easily accessed from the homepage of the Graph Drawing Conference website, and are therefore well known and widely used. \n\n\n\n\n\n\n\nAT&T\n\n\n\n\n\n\nOriginally collected by Stephen North at AT&T Bell Labs (see the descriptions from literature section below for more information). The original link from 1995 is broken: ftp://ftp.research.att.com/dist/drawdag. Di Battista et al. modified the dataset by removing isomorphic graphs, connecting disconnected graphs, and removing cycles. Same as North DAG collection. It contains directed and acyclic graphs.\n\nOriginally found at: http://www.graphdrawing.org/data.html\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 1277 graphs, 10 to 100 nodes, 9 to 241 edges\n\n\n\nOrigin paper: \n\n\n[@DIBATTISTA2000]     Drawing Directed Acyclic Graphs: An Experimental Study\n\n\n\nUsage examples: \n\n\n\n[@Hachul2005]\n\n\nDrawing Large Graphs with a Potential-Field-Based Multilevel Algorithm\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Hachul2006]\n\n\nAn Experimental Comparison of Fast Algorithms for Drawing General Large Graphs\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n\n\n\nLarge-Graph Layout with the Fast Multipole Multilevel Method\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Jabrayilov2016]\n\n\nCompact Layered Drawings of General Directed Graphs\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@Jnger2018]\n\n\nA Flow Formulation for Horizontal Coordinate Assignment with Prescribed Width\n\n\n\ndag\n\n\nhierarchical\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@Mallach2019]\n\n\nA Natural Quadratic Approach to the Generalized Graph Layering Problem\n\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@Chimani2012]\n\n\nAdvances in the Planarization Method: Effective Multiple Edge Insertions\n\n\n\ngeneric\n\n\n\n\n\n[@barth2002]\n\n\nSimple and Efficient Bilayer Cross Counting\n\n\n\nbipartite\n\n\nlayered graphs\n\n\n\n\n\n[@DIBATTISTA2000]\n\n\nDrawing Directed Acyclic Graphs: An Experimental Study\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@welch2017]\n\n\nMeasuring Symmetry in Drawings of Graphs\n\n\n\ngeneric\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “Drawing Directed Acyclic Graphs: An Experimental Study”:\n\nThe experimental study was performed on two different sets of DAGs, both with a strong connection to “real-life” applications. We considered two typical contexts where DAGs play a fundamental role, namely software engineering and project planning.\n\n\nThe first set of test DAGs are what we call the North DAGs. They are obtained from a collection of directed graphs [28], that North collected at AT&T Bell Labs by running for two years Draw DAG, an e-mail graph drawing service that accepts directed graphs formatted as e-mail messages and returns messages with the corresponding drawings [27].\n\n\nOriginally, the North DAGs consisted of 5114 directed graphs, whose number of vertices varied in the range 1 … 7602. However, the density of the directed graphs with a number of vertices that did not fall in the range 10 … 100 was very low (see also the statistics in [28]); since such directed graphs represent a very sparse statistical population we decided to discard them. Then we noted that many directed graphs were isomorphic; since the vertices of the directed graphs have labels associated with them, the problem is tractable. For each isomorphism class, we kept only one representative directed graph. Also, we deleted the directed graphs where subgraphs were specified as clusters, to be drawn in their own distinct rectangular region of the layout, because constrained algorithms are beyond the scope of this study. This filtering left us with 1277 directed graphs.\n\n\nStill, 491 directed graphs were not connected and this was a problem for running algorithms implemented in G D W (they assume input directed graphs to be connected). Instead of discarding the directed graphs, we followed a more practical approach, by randomly adding a minimum set of directed edges that makes each directed graph connected. Finally, we made the directed graph acyclic, where necessary, by applying some heuristics for inverting the direction of a small subset of edges.\n\n\nWe then ran a first set of experiments and produced the statistics by grouping the DAGs by number of vertices. Although the comparison among the algorithms looked consistent (the produced plots never oddly overlapped), each single plot was not satisfactory, because it showed peaks and valleys. We went back to study the test suite and observed that grouping them by number of vertices was not the best approach. In fact, the North DAGs come from very heterogeneous sources, mainly representing different phases of various software engineering projects; as a result, directed graphs with more or less the same number of vertices may be either very dense or very sparse.\n\n\nSince most of the analyzed quality measures strongly depend on the number of edges of the DAG (e.g. area, number of bends, and number of crossings), we decided that a better approach was to group the DAGs by number of edges. After some tests, we clustered the DAGs into nine groups, each with at least 40 DAGs, so that the number of edges in the DAGs belonging to group i, 1 ≤ i ≤ 9, is in the range 10 i … 10 i+9 (see Fig. 3). The resulting test suite consists of 1158 DAGs, each with edges in the range 10 … 99.\n\nFrom “Layer-Free Upward Crossing Minimization”:\n\nNorth DAGs. The North DAGs have been introduced in an experimental comparison of algorithms for drawing DAGs [Di Battista et al. 2000]. The benchmark set contains 1,158 DAGs collected by Stephen North, which were slightly modified by Di Battista et al. The graphs are grouped into nine sets, where set i contains graphs with 10 i to 10 i+9 arcs for i=1, …, 9.\n\n\n\n\nFrom “Drawing Directed Acyclic Graphs: An Experimental Study”:\n\n\n\n\n\n\nFrom “A Natural Quadratic Approach to the Generalized Graph Layering Problem”:\n\n\n\nFrom “A Flow Formulation for Horizontal Coordinate Assignment with Prescribed Width”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNorth DAGs\n\n\n\n\n\n\nThis is the same collection as AT&T, but referred to as North DAGs in the papers we analyzed. We kept the two collections separate, based on how they are referred to in the papers we collected.\n\nOriginally found at: See AT&T\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: See AT&T\n\n\n\nOrigin paper: \n\n\n\n[@DIBATTISTA2000]\n\n\nDrawing Directed Acyclic Graphs: An Experimental Study\n\n\n\n\nUsage examples: \n\n\n\n[@chimani2010]\n\n\nLayer-Free Upward Crossing Minimization\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@chimani2016]\n\n\nA Note on the Practicality of Maximal Planar Subgraph Algorithms\n\n\n\nplanar\n\n\n\n\n\n[@Regg2016]\n\n\nA Generalization of the Directed Graph Layering Problem\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@Demel2018]\n\n\nA Greedy Heuristic for Crossing-Angle Maximization\n\n\n\ngeneric\n\n\n\n\n\n[@Chimani2021]\n\n\nStar-Struck by Fixed Embeddings: Modern Crossing Number Heuristics\n\n\n\ngeneric\n\n\n\n\n\n[@chimani2016b]\n\n\nAn ILP-based Proof System for the Crossing Number Problem\n\n\n\ngeneric\n\n\n\n\n\n[@DIBATTISTA2000]\n\n\nDrawing Directed Acyclic Graphs: An Experimental Study\n\n\n\ndirected edges\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@Binucci2016]\n\n\nPlacing Arrows in Directed Graph Drawings\n\n\n\ndirected edges\n\n\n\n\n\n[@klammler2018]\n\n\nAesthetic Discrimination of Graph Layouts\n\n\n\ngeneric\n\n\n\n\n\n[@binucci2022]\n\n\nPlacing Arrows in Directed Graph Layouts: Algorithms and Experiments\n\n\n\ndirected edges\n\n\n\n\n\n\nFrom “Layer-Free Upward Crossing Minimization”:\nNorth DAGs. The North DAGs have been introduced in an experimental comparison of algorithms for drawing DAGs [Di Battista et al. 2000]. The benchmark set contains 1,158 DAGs collected by Stephen North, which were slightly modified by Di Battista et al. The graphs are grouped into nine sets, where set \\(i\\) contains graphs with \\(10 i\\) to \\(10 i+9\\) arcs for \\(i=1, \\ldots, 9\\).\n\n\n\n\n\n\n\n\n\n\n\nRandDAG or DAGMar\n\n\n\n\n\nThe randDAG collection concludes the collections that can be easily accessed from graphdrawing.org. http://graphdrawing.org highlights the DAGmar graph generator, and provides a benchmark set of randomly generated directed acyclic graphs. While not explicit, it is implied this benchmark comes from the DAGmar generator. The collection is uniformly sampled from set of level graphs with certain graph parameters, such as number of nodes and number of edges. These graphs have no particular features, thus they are classified as generic.\n\n\nOriginally found at: http://www.graphdrawing.org/data.html\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 10-100 nodes, 15-167 edges\n\n\n\nOrigin paper: \n\n\n\n[@Bachmaier_Gleißner_Hofmeier_2012]\n\n\nDAGmar: Library for DAGs\n\n\n\n\nUsage examples: \n\n\n\n[@klammler2018]\n\n\nAesthetic Discrimination of Graph Layouts\n\n\n\ngeneric\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “Aesthetic Discrimination of Graph Layouts”:\n\nWe have assembled such a dataset using two types of sources. First, we used the collections of the well-known graph archives ROME, NORTH and RANDDAG which are published on graphdrawing.org as well as the NIST’s “Matrix Market” [2].\n\n\n\n\nFrom “Aesthetic Discrimination of Graph Layouts (Appendix)”:\n\n\n\nFig. 5. (cropped)… All graphs are visualized using the \\(FM^3\\) algorithm.\n\n\n\n\n\nThe datasets listed below are particularly useful when researchers are interested in testing for crossing numbers. Indeed, they both deal with graphs that have a known crossing numbers.\n\n\n\n\n\n\n\nKnownCR\n\n\n\n\n\nKnownCR is a collection of graphs with known crossing numbers, and it is used to test the performance of algorithms that approximate the crossing number of a graph. The dataset is used in papers that aim to approximate the crossing number of a graph, and it is used to compare the results of the approximation algorithms to the known crossing numbers of the graphs. A good resource for this is also the survey provided by [@Clancy2019ASO]. The graphs themselves do not appear to exist online elsewhere, but the method by which they can be created is fully described in [@gutwenger_phd]. \n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 9-250 nodes, 18-750 edges\n\n\n\nOrigin paper: \n\n\n\n[link]\n\n\nApplication of SPQR-Trees in the Planarization Approach for Drawing Graphs\n\n\n\n\nUsage examples: \n\n\n\n[@Chimani2021]\n\n\nStar-Struck by Fixed Embeddings: Modern Crossing Number Heuristics\n\n\n\ngeneric\n\n\n\n\n\n[@Clancy2019]\n\n\nAn effective crossing minimisation heuristic based on star insertion\n\n\n\ngeneric\n\n\n\n\n\n[@Chimani2012]\n\n\nAdvances in the Planarization Method: Effective Multiple Edge Insertions\n\n\n\ngeneric\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “An effective crossing minimisation heuristic based on star insertion”:\n\nKnownCR graphs- these are a set of instances containing between 9 and 250 vertices, first collected by Gutwenger [22], which can be further partitioned into four families of graphs as follows: \\(C_i \\times C_j\\): The Cartesian product of the cycle on \\(i\\) vertices with the cycle on \\(j\\) vertices. The instances contain graphs with \\(3 \\leq i \\leq 7\\) and \\(j \\geq i\\) such that \\(ij \\leq 250\\). \\(G_i \\times P_j\\): The Cartesian product of the path on \\(j+1\\) vertices with one of the 21 non-isomorphic connected graphs on 5 vertices, where \\(i\\) denotes which of the 21. The instances contain graphs with \\(3 \\leq j \\leq 49\\). \\(G_i \\times C_j\\): The Cartesian product of the cycle on \\(j\\) vertices with one of the 21 non-isomorphic connected graphs on 5 vertices, where \\(i\\) denotes which of the 21. The crossing number of these graphs is only known for some of the \\(G_i\\) and only these cases are included. The instances contain graphs with \\(3 \\leq j \\leq 50\\). The Generalised Petersen graphs \\(P(j,2)\\) and \\(P(j,3)\\), on \\(2j\\) vertices. We shall only use those of type \\(P(j,3)\\) as \\(P(j,2)\\) (studied in [20]) are easy for heuristics to solve, as has already been observed in [9]. The instances contain graphs with \\(9 \\leq j \\leq 125\\).\n\nFrom “Advances in the Planarization Method: Effective Multiple Edge Insertions”:\n\nFinally, the KnownCR graphs [11] are a collection of 1946 graphs with known crossing numbers (by proofs), consisting of generalized Petersen graphs (P(m, 2), P(m, 3)) and products of cycles \\(C_n\\), paths \\(P_n\\), and 5-vertex graphs \\(G_i (C_m \\times C_n, G_i \\times P_n, G_i \\times C_n)\\); these graphs have between 9 and 250 nodes.\n\n\n\n\nFrom “Application of SPQR-Trees in the Planarization Approach for Drawing Graphs”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWebCompute\n\n\n\n\n\nThe dataset is comprised of instances of graphs uploaded to Crossing Number WebCompute, attributed to M. Chimani, T. Wiedera. http://crossings.uos.de/cr-proof-system-paper. Their website also features proofs of the crossing numbers of many of the Rome-Lib graphs. Newest version of database specifies non-planar graphs, but older versions do have some planar graphs.\n\n\nOriginally found at: https://tcs.uos.de/doku.php?id=research/cr\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 3-112 nodes, 3-366 edges\n\n\n\nOrigin paper: \n\n\n\n[@chimani2016b]\n\n\nAn ILP-based Proof System for the Crossing Number Problem\n\n\n\n\nUsage examples: \n\n\n\n[@chimani2016b]\n\n\nAn ILP-based Proof System for the Crossing Number Problem\n\n\n\ngeneric\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “An ILP-based Proof System for the Crossing Number Problem”:\n\nTo determine the applicability of the proof system, we tested the algorithms on three benchmark sets: the 3110 non-trivial Rome graphs [14], the 1277 North graphs [15], and the145 non-planar graphs (http://crossings.uos.de/instances) collected by our crossing number web-service.\n\n\n\n\n\n\n\n\n\n\n\n\n\nComplete Graphs\n\n\n\n\n\nComplete graphs refers to a generic collection of graphs that are fully connected, i.e., each node is connected to every other node, up to any number of nodes that are needed for the purpose of the experiment. The linked dataset includes both the complete graphs \\(K_n\\) for \\(5≤n≤50\\) and the complete bipartite graphs \\(K_{n_1,n_2}\\) for \\(5≤n1,n2≤40\\). Crossing number is conjectured for most of these, and while not proven, we found these used in papers to validate minimum crossing numbers. We also note that the papers in our literature review did not provide example figures.\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 5-80 nodes, 10-1600 edges\n\n\n\nNumber of Graphs: 1342\n\n\n\nUsage examples: \n\n\n\n[@Clancy2019]\n\n\nAn effective crossing minimisation heuristic based on star insertion\n\n\n\ngeneric\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “An effective crossing minimisation heuristic based on star insertion”:\n\nComplete graphs - Although the crossing number of the complete graph \\(K_n\\) is not known for for \\(n ≥ 13\\), the value is conjectured, and typically assumed to be correct. We compare the nine combinations of schemes to see how close to the conjectured value each of them is able to get, for various sizes of complete graphs up to \\(n = 50\\). We indicate how many crossings are obtained after the initial embedding, as well as at the conclusion of the heuristic. We also provide the runtimes, again separated into time spent producing the initial embedding, and time spent in the main loop of the heuristic.\n\n\nComplete bipartite graphs - Much like the complete graphs, the crossing number of the complete bipartite graph \\(K_{n1,n2}\\) is only known in general for \\(n_1 ≤ 6\\), but the value is conjectured and typically assumed to be correct. Again, we compare the nine combinations of schemes to see how close to the conjectured value they can get for values up to \\(n_1,n_2 = 40\\), and report the same data as for the Complete graphs.\n\n\nThe crossing number of the complete graph \\(K_n\\) is conjectured (e.g. see Guy [25]) to be equal to \\(H(n) := 1/4 \\left\\lfloor n/2\\right\\rfloor \\left\\lfloor (n − 1)/2\\right\\rfloor \\left\\lfloor(n − 2)/2\\right\\rfloor \\left\\lfloor (n − 3)/2\\right\\rfloor\\). Although this conjecture is widely believed to be correct, it has only been confirmed for \\(n ≤ 12\\) despite considerable effort to extend the results further [30]. We ran the graphs \\(K_n\\) for \\(5 ≤ n ≤ 50\\). Each graph was run with 100 random permutations and the minimum found solution was compared to \\(H(n)\\) by computing the percent relative deviation from \\(H(n)\\)… For these graphs, we observe that when \\(n\\) was odd, every scheme combination was able to obtain a drawing with \\(H(n)\\) crossings. However, when \\(n\\) was even, each scheme reached a value which was usually very close but not equal to \\(H(n)\\).\n\n\nThe crossing number of the complete bipartite graph \\(K_{n_1,n_2}\\) is conjectured (e.g. see Zarankiewicz [35]) to be equal to \\(Z(n_1, n_2) := \\left\\lfloor n_1/2\\right\\rfloor \\left\\lfloor (n_1 − 1)/2\\right\\rfloor \\left\\lfloor n_2/2\\right\\rfloor \\left\\lfloor (n_2 − 1)/2\\right\\rfloor\\). We ran the graphs \\(K_{n_1,n_2}\\) for \\(5 ≤ n1 ≤ n2 ≤ 40\\). Each graph was run with 100 random permutations and the minimum found solution was compared to \\(Z(n_1,n_2)\\)… As can be seen in Table 6, QuickCross was successful in obtaining the conjectured optimum in all cases and for all scheme combinations, except \\(K_{30,30}\\) and \\(K_{40,40}\\)\n\n\n\n\n\nThe collections presented here are particularly varied in features:\n\n\n\n\n\n\n\nGraphviz Examples\n\n\n\n\n\nWhile graphviz is a graph visualization software, its example gallery has proven useful to many researchers as a source of benchmark datasets. The graphs have various origins, most of which are described on the Graphviz https://www.graphviz.org/gallery/. Example graphs used to generate images with the https://www.graphviz.org for their https://www.graphviz.org/gallery/. These graphs are picked as graphviz examples because they are diverse in types of features they contain: together with generic graphs, there are also graphs with clusters, layers, directed edges and labeled nodes.\n\n\nOriginally found at: https://gitlab.com/graphviz/graphviz/-/tree/main/tests/graphs\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 1-1464 nodes, 0-5806 edges\n\n\n\nOrigin paper: \n\n\n\n[@gansner2000]\n\n\nAn open graph visualization system and its applications to software engineering\n\n\n\n\nUsage examples: \n\n\n\n[@Gange2011]\n\n\nOptimal k-level planarization and crossing minimization\n\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@Nachmanson2017]\n\n\nNode Overlap Removal by Growing a Tree\n\n\n\nlarge\n\n\n\n\n\n[@giovannangeli2023]\n\n\nFORBID: Fast Overlap Removal by Stochastic GradIent Descent for Graph Drawing\n\n\n\ngeneric\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “Node Overlap Removal by Growing a Tree”:\n\nOur data includes the same set of graphs that was used by the authors of PRISM to compare it with other algorithms [6]. The dataset is available in the Graphviz open source package.\n\nFrom “Optimal k-level planarization and crossing minimization”:\n\nThe first set of graphs are all the hierarchical network diagrams appearing in the GraphViz gallery [3]… Table 1 shows the results of minimizing edge crossings and maximizing planar subgraphs with MIP and SAT solvers, as well as the crossings resulting in the Graphviz heuristic layout for graphs from the GraphViz gallery.\n\n\n\n\nFrom “Node Overlap Removal by Growing a Tree”:\n\n\n\n\n\n\nFrom “FORBID: Fast Overlap Removal by Stochastic GradIent Descent for Graph Drawing”:\n\n\n\nFrom “Optimal k-level planarization and crossing minimization”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScotch Graph Collection\n\n\n\n\n\nCollection consisting of graphs from various sources including topological meshes, meshes related to physical problems (fluid dynamics, structural mechanics, combinatorial optimization), and interprocess communication graphs for a parallel computing implementation of a factorization solver. The https://gitlab.inria.fr/scotch/scotch is produced by the https://www.labri.fr/perso/pelegrin/scotch/ whose goal is to study static mapping by the means of graph theory, using “divide and conquer’’ graph bipartitioning heuristics. The original link to the data http://www.labri.u-bordeaux.fr/Equipe/PARADIS/Member/pelegrin/graph is broken.\n\nmake_sparkline(\"Scotch_GraphCollection\")\n\n\n\n\n\n\n\n\n\n\n\n\nThe following two collections are particularly relevant for the display of temporal event sequences:\n\n\n\n\n\n\n\nStorylines (Movie Plots)\n\n\n\n\n\nThe storylines dataset is particularly useful for temporal event sequence visualization because of its dynamic aspect and clusters (which also evolve through time). It is a collection of graphs that represent movie plots, and the nodes are the characters in the movie. The edges represent the interactions between the characters. This dataset was initially collected by Yuzuru Tanahashi, then stored on his homepage at UC Davis which was lost. Through the help of personal connections at UC Davis, we were luckily able to recover the dataset.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMilitarized Interstate Disputes (MID)\n\n\n\n\n\nCollected as part of the correlatesofwar.org project, the dataset contains two disconnected temporal event sequences.\n//| echo: false\n\nmake_sparkline(\"Militarized_InterstateDisputesMID\")\n\n\n\n\n\n\nCollections of graphs that focus on one specific attribute can also be useful in case the attribute relates to geographical data:\n\n\n\n\n\n\n\nWorld Maps\n\n\n\n\n\nDatasets contain various attributes for a few locations and their geographical adjacency, namely neighboring states, countries, and municipalities. World Bank country information transformed into a weight-vectors dataset. Some of the incomplete data was filled from disparate sources mentioned in the paper’s supplemental materials: https://doi.org/10.48550/arXiv.1908.07291. The collection contains 14 graphs with dynamic and spatial attributes, categorical nodes, and weighted nodes.\n\n\nOriginally found at: https://data.worldbank.org/indicator https://github.com/loizuf/StableDemersLP/tree/main/code/StableDemers_TVCG/data\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 48-514 nodes, 205-2428 edges\n\n\n\nNumber of Graphs: 14\n\n\n\nOrigin paper: \n\n\n\n[@Nickel2019]\n\n\nComputing Stable Demers Cartograms\n\n\n\n\nUsage examples: \n\n\n\n[@Nickel2019]\n\n\nComputing Stable Demers Cartograms\n\n\n\ndynamic\n\n\nspatial\n\n\n\n\n\n\n\n\n\n\n\n\nFrom Computing Stable Demers Cartograms”:\n\nWe run experiments on real-world datasets. For time-series data, we expect a gradual change and strong correlation between the different values. For weight-vectors data, we expect more erratic changes and less correlation. We use two maps with rather different geographic structures: the first (World) is a map of world countries, having mixed region (country) sizes in a rather unstructured manner; the second (US) is a map of the 48 contiguous US states, having relatively high structure in sizes of its states, with large states in the middle and along the west coast and many smaller states along the east coast.\n\nFrom Supplemental Materials, Appendix C of *“Computing Stable Demers Cartograms*”:\n\n\n\n\n\n\nFrom Computing Stable Demers Cartograms”:\n\n\n\n\n\n\n\n\n\nOtherwise, one might decide to focus on a particular domain:\n\n\n\n\n\n\nBiological Pathways (KEGG)\n\n\n\n\n\nAccording to kegg.jp, “the KEGG PATHWAY database is a collection of manually drawn graphical diagrams, called KEGG pathway maps, for metabolic pathways, signaling pathways, pathways involved in various cellular processes and organismal systems, and perturbed pathways associated with human diseases.”\n//| echo: false\n\nmake_sparkline(\"Biological_PathwaysKEGG\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCo-Phylogenetic Trees\n\n\n\n\n\nCollected by the authors of “https://almob.biomedcentral.com/articles/10.1186/s13015-014-0031-3. Each element of the data set is two binary co-phylogentic trees. “Caryophyllaceae & Microbotryum” and “Stinkbugs & Bacteria” are missing but our dataset includes all other files from “https://doi.org/10.1007/978-3-319-73915-1_27”. An additional dataset from “https://almob.biomedcentral.com/articles/10.1186/s13015-014-0031-3”, called “Wolbachia”, is included. Naturally, the data contains trees.\n\n\nOriginally found at: https://gitlab.inria.fr/erable/eucalypt/-/blob/master/html/PaperDatasets.zip\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 13-773 nodes, 12-772 edges\n\n\n\nNumber of Graphs: 30\n\n\n\nOrigin paper: \n\n\n\n[@Donati2015]\n\n\nEUCALYPT: efficient tree reconciliation enumerator\n\n\n\n\nUsage examples: \n\n\n\n[@Calamoneri2018]\n\n\nVisualizing Co-phylogenetic Reconciliations\n\n\n\nbinary trees\n\n\ntrees\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “EUCALYPT: efficient tree reconciliation enumerator”:\n\nTo test EUCALYPT, we selected 12 datasets from the literature. As we are mostly interested in host-parasite systems, the first 10 datasets concern such relations: EC Encyrtidae & Coccidae [23], GL Gopher & Lice [24], SC Seabirds & Chewing Lice [25], RP Rodents & Pinworms [26], SCF Smut Fungi & Caryophillaceus plants [27], PLML Pelican Lice ML [28] (the trees are generated through a maximum likelihood approach), PLMP Pelican Lice MP [28] (the trees are generated through a maximum parsimony approach), RH Rodents & Hantaviruses [29], PP Primates & Pinworm [30], and FD Fishs and Dactylogyrus [31].\n\n\nIn addition, we used a dataset of our own which corresponds to arthropod hosts and a bacterium genus, Wolbachia, living inside the cells of their hosts [32,33]. The datasets were chosen to provide a variety in terms of size of the host and parasite trees: those from the literature are relatively small (from 7 to 100 leaves), while our own data provide an example of much bigger host and parasite trees, each having 387 leaves. Moreover, we were careful that the selected datasets cover, as much as possible, a range of situations in terms of coevolution and of the expected frequencies of each event\n\n\n\n\nFrom “Visualizing Co-phylogenetic Reconciliations”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd finally, a collection of graph problems:\n\n\n\n\n\n\n\nSteinLib\n\n\n\n\n\nSteinLib is a collection of Steiner tree problems in graphs and variants. Their website has additional information about each problem in the dataset, including whether or not it has been solved. We omit two sets, Relay and EFST, from our provided data due to size constraints.\n\n\nOriginally found at: https://steinlib.zib.de/steinlib.php\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 6-38,418 nodes, 9-221,445 edges\n\n\n\nNumber of Graphs: 1207\n\n\n\nOrigin paper: \n\n\n\n[@Koch2001]\n\n\nSteinLib: An Updated Library on Steiner Tree Problems in Graphs\n\n\n\n\nUsage examples: \n\n\n\n[@chimani2016]\n\n\nA Note on the Practicality of Maximal Planar Subgraph Algorithms\n\n\n\nplanar\n\n\n\n\n\n\n\n\n\n\n\n\nFrom A Note on the Practicality of Maximal Planar Subgraph Algorithms:\n\nWe use the non-planar graphs of the established benchmark sets North [12] (423 instances), Rome [11] (8249), and SteinLib [16] (586), all of which include real-world instances. In our plots, we group instances according to |V| rounded to the nearest multiple of 10; for Rome we only consider graph with ≥ 25 vertices.\n\n\n\n\nFrom SteinLib: An Updated Library on Steiner Tree Problems in Graphs:\n\n\n\n\n\n\n\n\n\n\n\nA popular choice is to use datasets from Established Network Repositories. These are ample collections, often organized in dedicated websites which also offer a few stats about the contained graphs. Because their hosts are already dedicated to the maintaining and reporting of information on these collections, we do not include here any storage of the data (which would be redundant) or report statistics on them. Rather, our analysis here is focused on highlighting their properties, origins, and ways in which they have been used.\nCompiled by the Mathematical and Computational Sciences Division of the Information Technology Laboratory of the National Institute of Standards and Technology, the Matrix Market is a repository of test data for use in comparative studies of algorithms for numerical linear algebra, featuring nearly 500 sparse matrices from a variety of applications, as well as matrix generation tools and services. It has been used for experiments with generic graphs, large graphs, and graphs with weighted edges. Each matrix entry is accompanied by metadata that includes the matrix name and identifier, dimensions (number of rows and columns), number of non-zero elements, symmetry type (symmetric, skew-symmetric, or general) and data type (real, complex, integer, or pattern). The website also provides visualizations of the matrices, helping users understand their structure and distribution of non-zero elements. Downloads are also provided in a variety of formats, including their own Matrix Market Exchange (MME) format, Harwell-Boeing, and MATLAB.\n\n\n\n\n\n\nMatrix Market\n\n\n\n\n\n\n\n\nOriginally found at: https://math.nist.gov/MatrixMarket/index.html\n\n\n\nDownload formatted data: \n\n\n\nNote: A repository of test data for use in comparative studies of algorithms for numerical linear algebra, featuring nearly 500 sparse matrices from a variety of applications, as well as matrix generation tools and services.\n\n\n\nOrigin Notes: Compiled by the https://math.nist.gov/mcsd/ of the http://www.itl.nist.gov/ of the http://www.nist.gov/\n\n\n\nOrigin paper: \n\n\nMatrix Market: a web resource for test matrix collections\n\n\n\nUsage examples: \n\n\n\n[link]   Aesthetic Discrimination of Graph Layouts\n\n\n\ngeneric\n\n\n\n\n\n[link]   Drawing graphs by eigenvectors: theory and practice\n\n\n\ngeneric\n\n\n\n\n\n[link]   Eigensolver methods for progressive multidimensional scaling of large data\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[link]   Graph Drawing by Stress Majorization\n\n\n\ngeneric\n\n\nweighted edges\n\n\n\n\n\n[link]   Sublinear Time Force Computation for Big Complex Network Visualization\n\n\n\nlarge\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “Graph Drawing by Stress Majorization”:\n\n\n\n\n\n\n\n\nThe first example is the 1138Bus graph (|V|=1138, |E|=1458) from the Matrix Market repository [1]. This graph models a network of high-voltage power distribution lines. Figure 4 shows two layouts of this graph.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “Drawing graphs by eigenvectors: theory and practice” (top two layouts are a Matrix Market graph):\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “Graph Drawing by Stress Majorization”:\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Network Repository was proposed in 2015 by Rossi and Ahmed of Purdue University as a visually interactive real world graph tool and database. Graphs in this repository are tagged with their real-world source, have in-depth analysis, and even a preview visualization of each individual graph. Types of graphs include social networks, infrastructure networks, biological networks, and many others. The repository also offers sources for individual graphs. It contains many graphs from other benchmark sets described here.\n\n\n\n\n\n\nNetwork Repository\n\n\n\n\n\n\n\nOriginally found at: https://networkrepository.com/\n\n \n\nOrigin paper: \n\n\n\n[@nr]\n\n\nThe Network Data Repository with Interactive Graph Analytics and Visualization\n\n\n\n\nUsage examples: \n\n\n\n[@Eades2018]\n\n\nDrawing Big Graphs Using Spectral Sparsification\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Arleo2019]\n\n\nA Distributed Multilevel Force-Directed Algorithm\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n\nFrom “A Distributed Multilevel Force-Directed Algorithm”:\n\nTo evaluate the running time of MULTI-GILA, we used the REALGRAPHS and BIGGRAPHS benchmarks, which contain larger graphs extracted from both real-world applications and synthetic generators; see Table 4. The REALGRAPHS set includes the 5 largest real-world graphs (mainly scale-free graphs) used in the experimental study of GILA [5]. These graphs are taken from the Stanford Large Networks Dataset Collection [3] and from the Network Data Repository [46], and their number of edges is between 121523 and 1541514.\n\nFrom “Drawing Big Graphs Using Spectral Sparsification”:\n\nWe used three data sets. The first set of graphs is taken from “defacto-benchmark” graphs, including the Hachul library, Walshaw’s Graph Partitioning Archive, the sparse matrices collection [6] and the network repository [24]. These include two types of graphs that have been extensively studied in graph drawing research: grid-like graphs and scale-free graphs.\n\n\n\n\n\n\nThe Pajek Program for Large Network Analysis is a tool developed and hosted by Andrej Vlado and some of their colleagues. As part of this program, they later compiled relevant graphs and links to other datasets, which we call today the Pajek collection. As a curiosity, pajek means spider in Slovenian. Many of Pajek graphs have been included as part of the SuiteSparse Matrix Collection.\n\n\n\n\n\n\nPajek\n\n\n\n\n\n\n\nOriginally found at: http://vlado.fmf.uni-lj.si/pub/networks/data/\n\n  \n\nOrigin paper: \n\n\n\n[@pajek]\n\n\nPajek datasets\n\n\n\n\nUsage examples: \n\n\n\n[@noack2004]\n\n\nEnergy Models for Graph Clustering\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\n\n\n\n[@Meidiana2019]\n\n\nA Quality Metric for Visualization of Clusters in Graphs\n\n\n\nclusters (generated)\n\n\n\n\n\n\nFrom “Energy Models for Graph Clustering”:\n\nAirline Routing (Figure 5): The nodes of this graph represent US airports, and the (unweighted) edges represent direct flights. The probability that two airports are connected by a direct flight is strongly related to their geographical distance: Most direct flights are relatively short, and only few large hub airports are connected by direct long-range flights. The distances in the edge-repulsion LinLog layout resemble the relative geographical distances of the airports remarkably closely, given that the graph does not contain any explicit information about geographical distances.\n\n\nDictionary (Figure 7): The nodes represent terms in the Online Dictionary of Library and Information Science (ODLIS), and the edges represent hyperlinks. A hyperlink between two terms exists if one term is used to describe the meaning of the other term, and thus connects semantically related terms. The edge-repulsion LinLog layout indeed groups semantically related terms, which is better reflected in the VRML file on the supplementary web page than in Figure 7(c). Such a grouping is useful, for example, for discovering the global topic areas (like publishing, printing, information technology, etc.), for identifying entry points for the exploration of topics, or for finding semantically related terms even if they are not explicitly linked.\n\nFrom “A Quality Metric for Visualization of Clusters in Graphs”:\n\nWe re-used some datasets from the validation experiments and created some new ones, listed in Table 2. We also selected real world graph datasets with existing vertex categorization, which are listed under the double line in Table 2. The datasets were taken from Pajek [2] and Stanford Network Analysis Project’s (SNAP) repository [23, 40].\n\n\n\n\nFrom “Energy Models for Graph Clustering”:\n\n\n\n\n\n\n\n\n\n\n\n\nThe SNAP repository is a collection of datasets assembled as part of the Stanford Network Analysis Platform, which started in 2004 and launched their website in 2009. Well-known, widely used graph repository.  A number of graphs that became relevant individually are included in SNAP, such as Enron, Amazon, Protein Interactions datasets and various Social Network graphs. SNAP contains generic graphs, directed and undirected graphs, dynamic graphs and more. Graphs are presented with name and descriptions and a few statistics such as a general description, numbers of nodes and edges, source and reference information.\n\n\n\n\n\n\nSNAP (Stanford Network Analysis Platform)\n\n\n\n\n\n\n\nOriginally found at: http://snap.stanford.edu/data/index.html\n\n \n\nSize: 1008 unique graphs (excluding graph classification tasks consisting of 352,536 graphs)\n\n \n\nOrigin paper: \n\n\n\n[@snapnets]\n\n\nSNAP Datasets: Stanford Large Network Dataset Collection\n\n\n\n\nUsage examples: \n\n\n\n[@Arleo2019]\n\n\nA Distributed Multilevel Force-Directed Algorithm\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Meidiana2019]\n\n\nA Quality Metric for Visualization of Clusters in Graphs\n\n\n\nclusters (generated)\n\n\n\n\n\n\n\n\nForceAtlas2\n\n\n\n\n\n\n\n\n\n\na Continuous Graph Layout Algorithm for Handy Network Visualization Designed for the Gephi Software\n\n\n\n\n\n\n\n\n\n\nA Random Sampling O\n\n\n\n\n\n\n\n[@zhong2023]\n\n\nForce-Directed Graph Layouts Revisited: A New Force Based on the T-Distribution\n\n\n\ngeneric\n\n\n\n\n\n[@meidiana2023]\n\n\nShape-Faithful Graph Drawings\n\n\n\nalmost proximity drawable graphs\n\n\nmesh graphs\n\n\nscale-free graphs\n\n\nstrong proximity drawable graphs\n\n\nweak proximity drawable graphs\n\n\n\n\n\n\nFrom “ForceAtlas2, a Continuous Graph Layout Algorithm for Handy Network Visualization Designed for the Gephi Software”:\n\nWe benchmarked our algorithm with a dataset of 68 networks from 5 to 23,133 nodes. We tried to gather varied networks corresponding to the actual use of Gephi (a lot of social networks, and scale-free networks in general). Most of these networks are from the Stanford Large Network Dataset Collection (http://snap. stanford.edu/data/) and include social networks (Facebook and Twitter ego-networks), collaboration networks (from Arxiv) and autonomous systems (peering information inferred from Oregon route-views).\n\n\n\n\nFrom “ForceAtlas2, a Continuous Graph Layout Algorithm for Handy Network Visualization Designed for the Gephi Software”:\n\n\n\n\n\n\n\n\nCompiled by Donald Knuth, the Stanford Graphbase consists of programs and datasets for network analysis. The datasets accompany a textbook, “The Stanford GraphBase: A Platform for Combinatorial Computing”.\n\n\n\n\n\n\nStanford GraphBase\n\n\n\n\n\n\n\nOriginally found at: https://www-cs-faculty.stanford.edu/~knuth/sgb.html\n\n\n\nOrigin paper: \n\n\n\n[@Knuth_2009]\n\n\nThe Stanford GraphBase: A Platform for Combinatorial Computing\n\n\n\n\nUsage examples: \n\n\n\n[@kruiger2017]\n\n\nGraph Layouts by t-SNE\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\nplanar\n\n\nspatial\n\n\n\n\n\n[@Raj2018]\n\n\nAnisotropic Radial Layout for Visualizing Centrality and Structure in Graphs\n\n\n\nclusters (generated)\n\n\nweighted edges\n\n\n\n\n\n[@Gronemann2016b]\n\n\nCrossing Minimization in Storyline Visualization\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@junger1997]\n\n\n2-Layer Straightline Crossing Minimization\n\n\n\nbipartite\n\n\nlayered graphs\n\n\n\n\n\n[@barth2002]\n\n\nSimple and Efficient Bilayer Cross Counting\n\n\n\nbipartite\n\n\nlayered graphs\n\n\n\n\n\n\n\n\nA Random Sampling O\n\n\n\n\n\n\n\n\nFrom “Crossing Minimization in Storyline Visualizations”:\n\nSince the instances “Anna Karenina” and “Les Miserables” are very big, we have split them into chapters and sequences of chapters. The resulting test-bed is made of eight chapters, seven pairs of chapters, six triples of chapters and five quadruples of chapters from “Anna Karenina”, and five chapters, four pairs of chapters and three triples of chapters from “Les Mis ́erables”, plus the entire “Adventures of Huckleberry Finn”, “Inception-sf”, “Inception”, “Star Wars”, “The Matrix-sf”, and “The Matrix”.\n\nFrom “Anisotropic Radial Layout for Visualizing Centrality and Structure in Graphs”:\n\nThe third dataset is a graph of character associations in the famous French novel Les Miserables (Fig. 5) [18]. This graph consists of 77 nodes, each representing a character in the novel, and 254 weighted edges where the weights represent the number of chapters that feature both characters associated with an edge. We see the that the main protagonist Valjean (marked in red) is placed prominently in all three visualizations (Fig. 5). However, other key characters in the plot such as Inspector Javert (blue) and Cosett (orange), who do not appear often with characters other than the protagonist (and thus have low betweenness centrality) are treated differently. While the radial layout relegates them to the periphery (far from Valjean) (Fig. 5b), MDS (Fig. 5a) paints a conflicting picture with regard to their centrality, e.g., Cosett’s node almost overlaps with Valjean despite its low centrality. In contrast, the proposed ARL (Fig.5c) is able to coherently convey the low centrality of the Inspector Javert and Cosett, as well as, their closeness to Valjean. The above issue of distance distortion appears to be a frequent occurrence in the radial layout due to many characters who have a low centrality value causing them to end up being packed in the outer periphery. A case of contrast is that of the character Bishop Myriel (green) who despite being associated with several characters, is only seen with Valjean once.\n\n\n\n\nFrom “Crossing Minimization in Storyline Visualizations”:\n\n\n\nFrom “Graph Layouts by t-SNE”:\n\n\n\nlesmis is the GraphBase Les Miserables graph\nFrom “Anisotropic Radial Layout for Visualizing Centrality and Structure in Graphs”:\n\n\n\n\n\n\n\n\nThe SuiteSparse Matrix Collection, formerly known as the University of Florida Sparse Matrix Collection, is a comprehensive repository of 2893 sparse matrices. All graphs in SuiteSparse belong to groups which will have more information about the graphs and the sub-collections they belong to. In our Descriptions from the Literature section we also highlight a few tables with the specific graphs used in a couple of papers. From “The university of Florida Sparse Matrix Collection”, Davis and Hu describe the origin of this network repository. Namely they cite the Harwell-Boeing collection as the starting point for SuiteSparse, then called the University of Florida (UF) Sparse matrix collection, back in 1991. Other groups, or collections, have then been added to SuitseSparse through the years, mainly focusing on real-world matrices and other relevant problems related to them.\n\n\n\n\n\n\nSuiteSparse Matrix Collection\n\n\n\n\n\n\n\nOriginally found at: https://sparse.tamu.edu/\n\n\n\nSize: 2893\n\n\n\nOrigin paper: \n\n\n\n[@davis2011]\n\n\nThe University of Florida Sparse Matrix Collection\n\n\n\n\nUsage examples: \n\n\n\n[@Gansner2013]\n\n\nA Maxent-Stress Model for Graph Layout\n\n\n\ngeneric\n\n\n\n\n\n[@Ortmann2017]\n\n\nA Sparse Stress Model\n\n\n\nlarge\n\n\nweighted edges\n\n\n\n\n\n[@Eades2018]\n\n\nDrawing Big Graphs Using Spectral Sparsification\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Hong2019]\n\n\nMulti-level Graph Drawing Using Infomap Clustering\n\n\n\nmultilevel\n\n\n\n\n\n[@Brsig2020]\n\n\nStochastic Gradient Descent Works Really Well for Stress Minimization\n\n\n\ngeneric\n\n\n\n\n\n[@kruiger2017]\n\n\nGraph Layouts by t-SNE\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\nplanar\n\n\nspatial\n\n\n\n\n\n[@zheng2019]\n\n\nGraph Drawing by Stochastic Gradient Descent\n\n\n\ngeneric\n\n\n\n\n\n[@DRGraph21]\n\n\nDRGraph: An Efficient Graph Layout Algorithm for Large-scale Graphs by Dimensionality Reduction\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@zhong2023]\n\n\nForce-Directed Graph Layouts Revisited: A New Force Based on the T-Distribution\n\n\n\ngeneric\n\n\n\n\n\n[@miller2023]\n\n\nSpherical Graph Drawing by Multi-dimensional Scaling\n\n\n\ngeneric\n\n\n\n\n\n[@meidiana2023]\n\n\nShape-Faithful Graph Drawings\n\n\n\nalmost proximity drawable graphs\n\n\nmesh graphs\n\n\nscale-free graphs\n\n\nstrong proximity drawable graphs\n\n\nweak proximity drawable graphs\n\n\n\n\n\n\nFrom “A Sparse Stress Model”:\n\nWe conducted our experiments on a series of different graphs, see Tab. 1, most of them taken from the sparse matrix collection [9]. We selected these graphs as they differ in their structure and size, and are large enough to compare the results of different techniques. Two of the graphs, LeHavre and commanche, have predefined edge lengths that were derived from the node coordinates. We did not modify the graphs in any way, except for those that were disconnected, in which case we only kept the largest component.\n\n\n\n\nFrom “A Maxent-Stress Model for Graph Layout”:\n\nWith the exception of graph gd, which is an author collaboration graph of the International Symposium on Graph Drawing between 1994 and 2007, the graphs used are from the University of Florida Sparse Matrix Collection [9]. Our selection covers a range of graph sizes, and includes mesh-like and other nonmesh graphs, and graphs from Brandes and Pich’s experimental study of distance scaling [5].\n\n\n\n\nTable 2. Test Graphs\nFrom “DRGraph: An Efficient Graph Layout Algorithm for Large-scale Graphs by Dimensionality Reduction”:\n\nWe perform experiments on a broad range of datasets selected from the University of Florida Sparse Matrix Collection [10] and tsNET [34] (Table 1).\n\n\n\n\nTable 1. Test Datasets\n\n\n\nFrom “The university of Florida sparse matrix collection”:\n\n\n\nFig. 13. A sample of matrices from the Collection, for the purpose of illustrating the complexity and diversity of matrices arising in real applications\nFrom “DRGraph: An Efficient Graph Layout Algorithm for Large-scale Graphs by Dimensionality Reduction”:\n\n\n\nFig. 8. Visualizations of selected graph datasets using FR, KK, S.M., FM3, SFDP, PMDS, tsNET and DRGraph.\n\n\n\n\n\n\n\nA number of papers used individual, Single Graphs for their experiments instead of a collection. These graphs have become popular because of their properties as individual graphs - see, for example, the Enron dataset below, a huge individual graph that has a large variance in node degree distribution. Many of these graphs are also available in other repositories - their locations are noted wherever known.\n\n\n\n\n\n\n\nEnron\n\n\n\n\n\n\nData made public by the Federal Energy Regulatory Commission when investigating Enron. It has had a few changes over time documented in the link provided as its source. The data is currently hosted by William W. Cohen from CMU on a webiste, and it is also hosted on SNAP. SNAP asks to cite the paper linked in Origin paper. Very high variance in node degrees. Data can be considered threaded and directed, although SNAP provides a version of the network that is explicitly undirected. This dataset proves useful for evaluating algorithms that work on very large graphs, due to its very large size.\n\nOriginally found at: https://www.cs.cmu.edu/~enron/\n\n\n\nSize: The data consists of 150 Enron executives, who sent 500,000 messages between themselves.\n\n\n\nOrigin paper: \n\n\n\n[@Klimt2004IntroducingTE]\n\n\nIntroducing the Enron Corpus\n\n\n\n\nUsage examples: \n\n\n\n[@Tanahashi2015]\n\n\nAn Efficient Framework for Generating Storyline Visualizations from Streaming Data\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n[@vandenElzen2013]\n\n\nReordering massive sequence views: Enabling temporal and structural analysis of dynamic networks\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n\nFrom “Reordering massive sequence views: Enabling temporal and structural analysis of dynamic networks”:\n\nWe cleaned the data set by removing duplicates, spam and only to contain internal communication between Enron employees annotated with employee function leaving us with 151 nodes (employees) and 21374 edges (emails). Visualization using a node-link diagram enables the identification of stronger connections (see Figure 9(a)). However, temporal patterns and the evolution of the network cannot be analysed. From the standard MSV (Figure 9(b)) it becomes somewhat clear that transaction density increases over time and we can distinguish between different phases. We cannot, however, see features and identify communities due to visual clutter\n\n\n\n\nFrom “An Efficient Framework for Generating Storyline Visualizations from Streaming Data”:\n\n\n\nFrom “Reordering massive sequence views: Enabling temporal and structural analysis of dynamic networks”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCalifornia\n\n\n\n\n\n\nData contains links related to an online search of the word “California” as nodes - the edges are links between webpages. We found this dataset on the webpage of a 2002 computer science course at Cornell, instructed by Jon Kleinberg. The original name was Pages that match the word “California”. They mention how the data was queried from a search engine, and that many of the original links are broken. It is not clear whether Kleinberg collected the data, or compiled it for the course.\n\nOriginally found at: https://www.cs.cornell.edu/courses/cs685/2002fa/data/gr0.California\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 4772 nodes, 8965 edges\n\n\n\nOrigin paper: \n\n\n\n[@Kleinberg_2002]\n\n\nThe Structure of Information Networks\n\n\n\n\nUsage examples: \n\n\n\n[@muelder2008b]\n\n\nA Treemap Based Method for Rapid Layout of Large Graphs\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@muelder2008]\n\n\nRapid Graph Layout Using Space Filling Curves\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “A Treemap Based Method for Rapid Layout of Large Graphs”:\n\nThis particular graph is a non-weighted graph of links between search results for the word “California” (also in Figures 6, 8, and 9, |V|=6107,|E|=15160).\n\nFrom “Rapid Graph Layout Using Space Filling Curves”:\n\nThe “california” dataset (shown in Figures 5 and 8) consists of the links between the webpages found from a search for the word ‘California’ [4].\n\n\n\n\nFrom “A Treemap Based Method for Rapid Layout of Large Graphs”:\n\n\n\nFig. 1. A graph laid out using our treemap based approach. This graph portrays the links between websites that came from a search on the word “California” [7]. Nodes are clustered into a hierarchy, and laid out by applying a treemap to this hierarchy. Levels of the hierarchy below a threshold are clustered together into larger nodes. It can very easily be seen that there are three primary groups of websites that link to each other, and a plethora of others that are not as tightly linked.\nFrom “Rapid Graph Layout Using Space Filling Curves”:\n\n\n\nFig. 5 Separating clusters. By adjusting the spacing between nodes according to the clustering information, clusters can be separated.\n\n\n\n\n\n\n\n\n\n\n\nWorld Greenhouse Gas Emissions\n\n\n\n\n\n\nData collected by the WRI. Linked data is from a different year than the data used by Optimal Sankey Diagrams Via Integer Programming, for which data could not be found. Contains weighted edges, weighted nodes, categorical nodes, and layers.\n\nOriginally found at: https://www.wri.org/data/world-greenhouse-gas-emissions-2005 https://www.wri.org/search?keys=world%20greenhouse%20gas%20emissions&f%5B0%5D=content_type%3Adata https://github.com/lhc70000/sankey/tree/master\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 40 nodes, 85 edges\n\n\n\nOrigin paper: \n\n\n\n[@navigating_numbers]\n\n\nNavigating the Numbers: Greenhouse Gas Data and International Climate Policy\n\n\n\n\nUsage examples: \n\n\n\n[@zarate2018]\n\n\nOptimal Sankey Diagrams via Integer Programming\n\n\n\nclusters (pre-existing)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have tested our method on the “World Greenhouse Gas Emissions” data from the World Resources Institute [8]. After transforming the “long” edges of the graph into “short” edges and adding the corresponding dummy nodes, as described in Section 3, this example has 4 layers, 55 nodes and 100 edges. The node ordering in the layout of the Sankey diagram shown in Figure 1 has been computed using Sugiyama’s heuristic method [13].\n\n\n\n\nFrom Optimal Sankey Diagrams via Integer Linear Programming:\n\n\n\n\n\n\n\n\n\n127.0.0.1:5501:150:21\n\n\n\n\n\n\n\n\n\n\nChess Games\n\n\n\n\n\n\n20,058 chess openings from games in a database of played online chess games. The authors of “Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes” collected the dataset online from the data science platform kaggle. The dataset was collected by user Mitchell J. and collects data from the chess website Lichess.org. The data used in the literature focuses on the 200 most common openings. These are all sequences of 6 moves and are topologically equivalent. It is a layered graph with categorical nodes and layers, and can be seen as a temporal event sequence.\n\nOriginally found at: https://www.kaggle.com/datasets/datasnaek/chess?resource=download https://github.com/VisDunneRight/sequence_braiding/blob/master/data/chess.json\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: The data consists of 20058 sequences, which result in a disconnected graph of 118164 nodes, and 98106 edges.\n\n\n\nOrigin paper: \n\n\n\n[@Jolly_2017]\n\n\nChess Game Dataset (Lichess)\n\n\n\n\nUsage examples: \n\n\n\n[@Bartolomeo2021]\n\n\nSequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n\nFrom “Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes”:\n\n200 Chess openings displayed with Sequence Braiding. Each line represents a sequence of moves of the white player, each group is a chess piece type. Most openings start with a pawn, and very little with the knight.\n\n\n\n\nFrom “Sequence Braiding: Visual Overviews of Temporal Event Sequences and Attributes”:\n\n\n\nFig. 7. 200 Chess openings displayed with Sequence Braiding. Each line represents a sequence of moves of the white player, each group is a chess piece type. Most openings start with a pawn, and very little with the knight. After moving a pawn, it is common to move a knight or a pawn, it is a little less common to move a bishop, and only a little number of openings move the queen on the second move.\n\n\n\n\n\n\n\n\n\n\n\nTree of Life\n\n\n\n\n\n\nPart of the http://tolweb.org/tree/to characterize information about biodiversity and their evolutionary genealogy. It is a tree tree with categorical nodes.\n\nOriginally found at: https://www.kaggle.com/datasets/konivat/tree-of-life?resource=download\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 35,960 nodes, 35,959 edges\n\n\n\nOrigin paper: \n\n\n\n[@gkab301]\n\n\nInteractive Tree Of Life (iTOL) v5: an online tool for phylogenetic tree display and annotation\n\n\n\n\n[@maddison2007]\n\n\nThe Tree of Life Web Project\n\n\n\n\nUsage examples: \n\n\n\n[@gray2023]\n\n\nVisualizing Evolving Trees\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\n\n\n\n\nFrom “Visualizing Evolving Trees”:\n\nThe Tree of Life: captures the evolutionary progression of life on Earth [37]. The underlying data is a tree structure with a natural time component. As a new species evolves, a new node in the tree is added. The edges give the parent-child relation of the nodes, where the parent is the original species, and the child is the new species. We use a subset of this graph with 500 nodes. The maximum node degree of this tree is 5, and the radius is 24\n\n\n\n\nFrom “Visualizing Evolving Trees”:\n\n\n\nFig. 4. Layouts obtained by the seven methods for the tree of life dataset.\n\n\n\n\n\n\n\n\n\n\n\n\nWorld Bank Trade Data\n\n\n\n\n\n\nBilateral trade value in 1999 (total imports+exports), from wits.worldbank.org. It is dense and has categorical nodes.\n\nOriginally found at: https://wits.worldbank.org/module/ALL/sub-module/ALL/reporter/ALL/year/ALL/tradeflow/ALL/pagesize/50/page/1\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n \n\nSize: 194 nodes, 10080 edges\n\n\n\nOrigin paper: \n\n\n\n[@SUBRAMANIAN2007151]\n\n\nThe WTO promotes trade strongly but unevenly\n\n\n\n\nUsage examples: \n\n\n\n[@noack2004]\n\n\nEnergy Models for Graph Clustering\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\n\n\n\n[@nocaj2015]\n\n\nUntangling the Hairballs of Multi-Centered Small-World Online Social Media Networks\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n\n\n\n\n\n\n\nFrom “Energy Models for Graph Clustering”:\n\nThe difference between conventional energy models, node-repulsion LinLog, and edge-repulsion LinLog can be illustrated with a model of the trade between ten North American and European countries. The nodes of the graph correspond to the countries, and the edge weights specify the trade volume between each pair of countries. Because of geographical closeness and free trade agreements, countries on the same continent trade more intensively than countries on different continents. Figure 1 shows the minimum energy layouts of the trade graph for the three force and energy models. The layout of the widely used Fruchterman-Reingold model [20] does not show any clear groups at all. The layout of the node-repulsion LinLog energy model groups the countries (nodes) primarily according to their total trade volume (degree). Only the layout of the edge-repulsion LinLog energy model shows the expected grouping according to continents.\n\n\n\n\nFrom “Untangling the Hairballs of Multi-Centered Small-World Online Social Media Networks”:\n\n\n\nFrom “Energy Models for Graph Clustering”:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInvestment Interdependence\n\n\n\n\n\n\nData collected in a survey of Ohio State University students by D. W. Malone. Students were presented with two potential obstacles to investment in Columbus, Ohio’s business district and asked, “does obstacle A aggravate or intensify obstacle B?”. Contains directed edges and is hierarchical.\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 25 nodes, 30 edges\n\n\n\nOrigin paper: \n\n\n\n[@malone1975]\n\n\nAn introduction to the application of interpretive structural modeling\n\n\n\n\nUsage examples: \n\n\n\n[@Sugiyama1981]\n\n\nMethods for Visual Understanding of Hierarchical System Structures\n\n\n\nhierarchical\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n\n\n\n\n\n\n\nFrom Methods for Visual Understanding of Hierarchical System Structures:\n\nPresented in Fig. 5 are drawings of the nine-level hierarchy which appeared in Malone [11] and represent the interdependence of obstacles to investment in the Columbus, Ohio, central business district.\n\n\n\n\nFrom Methods for Visual Understanding of Hierarchical System Structures:\n\n\n\nFig. 5. (cropped): Maps of the nine-level hierarchy [11]. (a) Initial. (b) BC + QP methods (c = 1.0). (c) BC + QP methods (cL= 0.5). (d) BC + QP methods (c = 0.05). (e) BC + PR methods.\n\n\n\n\n\n\n\n\n\n\n\nProtein Interactions\n\n\n\n\n\n\nProtein Interaction Publications were collected from the Biological Pathway Commons Database. Various types of protein interaction graphs are recorded in other network collections. We highlight two of them from the surveyed papers. First, we have the temporal Protein Interaction Publications, showing the history of how protein interactions were described in the literature. Second, the Protein Homology graph was provided by the Large Graph Layout project, their links are now broken and the dataset lost. Nonetheless, SNAP and Konect both also have various dataset of human/other species protein interactions.\n\nOriginally found at: https://github.com/CreativeCodingLab/TimeArcs/tree/master/IndexCards https://lgl.sourceforge.net/ (download link broken)\n\n\n\nDownload formatted data:  GEXF GML GRAPHML JSON\n\n\n\nSize: 2961 nodes, 5267 edges\n\n\n\nOrigin paper: \n\n\n\n[@ADAI2004179]\n\n\nLGL: Creating a Map of Protein Function with an Algorithm for Visualizing Very Large Biological Networks\n\n\n\nUsage examples: \n\n\n\n[@muelder2008]\n\n\nRapid Graph Layout Using Space Filling Curves\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Dang2016]\n\n\nTimeArcs: Visualizing Fluctuations in Dynamic Networks\n\n\n\ndynamic\n\n\ndynamic (discrete)\n\n\nlayered graphs\n\n\nn-layers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom TimeArcs: Visualizing Fluctuations in Dynamic Networks:\n\nThe data contains the publication information (such as publication year, author, and textual evidence) of interactions between pairs of proteins, as well as their specific interaction type.\n\n\nWhen there are multiple arcs connecting two proteins, it falls into one of the two circumstances. If they have the same color, these arcs indicate that there are supporting evidences in different publications which confirm the interaction between two elements. On the other hand, if they have the different colors, the more recent appearance provides either more detailed knowledge about the interaction or shows a conflict between different articles regarding the way in which these proteins interact.\n\n\n\n\nFrom TimeArcs: Visualizing Fluctuations in Dynamic Networks:\n\n\n\nFig. 10: TimeArcs visualization for interactions around PCAF protein. (1), (2), and (3) in the figure are supporting evidences in literature of “PCAF binds MAML”.\n\n\n\n\n\n\nFrom [Rapid Graph Layout Using Space Filling Curves:](https://ieeexplore.ieee.org/document/4658143)\n\nThe “pgraph” dataset (shown in Figures 2 and 6) is a protein homology graph, which is relatively dense [7].\n\nConsists of 28, 854 vertices and 1,180, 816 edges, found in Table 1 of paper above.\n\n\n\nFrom Rapid Graph Layout Using Space Filling Curves:\n\n\n\nFig. 2. A protein homology graph laid out with our space filling curve based approach. Color corresponds to depth in the clustering hierarchy. |V| = 28, 854,|E| = 1, 180, 816\nFrom LGL: Creating a Map of Protein Function with an Algorithm for Visualizing Very Large Biological Networks\n\n\n\nFig. 3. The complete protein homology map. A layout of the entire protein homology map; a total of 11,516 connected sets containing 111,604 proteins (vertices) with 1,912,684 edges. The largest connected set is shown more clearly in the inset and is enlarged further in Figure 4.\n\n\n\n\n\n\n\n\n\nMany papers used graphs from specific domains that contain particular characteristics (e.g., geographical coordinates are often found in airline data). Instead of collecting each one of these individual, contextual datasets, we aggregated them in further subcategories, and called them Aggregate collections. Individual information about about each aggregate collection can be found in the papers that contain them.\n\n\n\n\n\n\nAssorted Collaboration Network\n\n\n\n\n\n\nmake_sparkline(\"Assorted_CollaborationNetwork\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAirlines, Migrations, and Air Traffic\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode Dependency Graphs\n\n\n\n\n\n//| echo: false\n\nmake_sparkline(\"Code_DependencyGraphs\")\n\n\n\n\n\n\n\n\n\n\n\n\nBlogposts, Tweets, and Forums\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSocial Networks\n\n\n\n\n\n//| echo: false\n\nmake_sparkline(\"Social_Networks\")\n\n\n\n\n\n\n\n\n\n\n\n\nTransportation Networks\n\n\n\n\n\n\nmake_sparkline(\"Transportation_Networks\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFinally, we collected some datasets that we noticed being subsets of existing collections. This is a phenomenon that can happen through the years, through the redistribution and through the merging of different sources: the Walshaw dataset, for instance, was and still is distributed and cited as its own standalone dataset, but its graphs can be found as part of many other larger collections, such as SNAP. We classified these datasets as Subsets.\n\n\n\n\n\n\n\nWalshaw\n\n\n\n\n\nC. Walshaw, collected for an archive of graph partitions which has been maintained since 2000. These are multilevel mesh partitions of heterogeneous networks from a variety of domains.\nWe do not provide the the data ourselves. Walshaw requests to be emailed for the distribution of the data, and so we link to their site and to the graphs found in the SuiteSparse Matrix Collection.\n\n\nOriginally found at: https://chriswalshaw.co.uk/partition/ where C. Walshaw requests to be emailed for the dataset at mailto:c.walshaw@gre.ac.uk. the individual graphs can also be found on the SuiteSparse Matrix Collection under different groups.\n\n\n\nSize: 34 graphs, 2395-448695 nodes, 6837-3314611 edges. Node-weighted, edge-weighted. Partitions of the 34 graphs are given with various partition sizes and imbalance percentages.\n\n\n\nOrigin paper: \n\n\n\n[@soper_combined_2004]\n\n\nA Combined Evolutionary Search and Multilevel Optimisation Approach to Graph Partitioning\n\n\n\n\n[@walshaw2000]\n\n\nMesh Partitioning: a Multilevel Balancing and Refinement Algorithm\n\n\n\n\nUsage examples: \n\n\n\n[@walshaw2001]\n\n\nA Multilevel Algorithm for Force-Directed Graph Drawing\n\n\n\nclusters (generated)\n\n\ngeneric\n\n\n\n\n\n[@frishman2007]\n\n\nMulti-Level Graph Layout on the GPU\n\n\n\ngeneric\n\n\n\n\n\n[@koren2002]\n\n\nACE: A Fast Multiscale Eigenvectors Computation for Drawing Huge Graphs\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@KOREN20051867]\n\n\nDrawing graphs by eigenvectors: theory and practice\n\n\n\ngeneric\n\n\n\n\n\n[@civril2006]\n\n\nSDE: Graph Drawing Using Spectral Distance Embedding\n\n\n\ngeneric\n\n\n\n\n\n\n\n\nEfficient and High Quality Force-Directed Graph Drawing\n\n\n\ngeneric\n\n\n\n\n\n\n\n\nLarge-Graph Layout with the Fast Multipole Multilevel Method\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Hachul2005]\n\n\nDrawing Large Graphs with a Potential-Field-Based Multilevel Algorithm\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Eades2018]\n\n\nDrawing Big Graphs Using Spectral Sparsification\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Hachul2006]\n\n\nAn Experimental Comparison of Fast Algorithms for Drawing General Large Graphs\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@brandes2006]\n\n\nEigensolver methods for progressive multidimensional scaling of large data\n\n\n\ngeneric\n\n\nlarge\n\n\n\n\n\n[@Gansner2005b]\n\n\nTopological fisheye views for visualizing large graphs\n\n\n\ngeneric\n\n\nhigh degree\n\n\nlarge\n\n\n\n\n\n[@Frishman2008]\n\n\nOnline Dynamic Graph Drawing\n\n\n\ndynamic\n\n\n\n\n\n[@Hong2019]\n\n\nMulti-level Graph Drawing Using Infomap Clustering\n\n\n\nmultilevel\n\n\n\n\n\n\n\n\nA Random Sampling O\n\n\n\n\n\n\n\n[@meidiana2020]\n\n\nSublinear Time Force Computation for Big Complex Network Visualization\n\n\n\nlarge\n\n\n\n\n\n\nFrom “An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs”:\n\nThe rest of the test graphs are taken from real-world applications. In particular, we selected graphs from the AT&T graph library [1], from C. Walshaw’s graph collection [20], and a graph that describes a social network of 2113 people that we obtained from C. Lipp.\n\nFrom “A Combined Evolutionary Search and Multilevel Optimisation Approach to Graph-Partitioning”:\n\nThe test graphs have been chosen to be a representative sample of small to medium scale real-life problems (mostly mesh-based) and include both 2D and 3D examples of nodal graphs (where the mesh nodes are partitioned) and dual graphs (where the mesh elements are partitioned). In addition there is a 3D semi-structured graph, cti, which is unstructured in the x−y plane but extended regularly along the z-axis. Finally the test suite includes three non mesh-based graphs (add32, vibrobox, bcsstk32) which arise from various scientific computing applications2. None of the graphs have either vertex or edge weights; such graphs are not widely available since most applications do not accurately instrument costs and it is difficult to draw meaningful conclusions from the few examples that we have access to.\n\n\n\n\n\n\n\nFrom “An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs”:\n\n\n\nFrom “Multi-Level Graph Layout on the GPU”:\n\n\n\nFig. 11. 4elt. Red: our layout, black: Kamada-Kawai layout\n\n\n\nFrom Group DIMACS10 in the SuiteSparse Matrix Collection:\nChris Walshaw's graph partitioning archive contains 34 graphs that\n    have been very popular as benchmarks for graph partitioning algorithms\n    ( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).\n\n    17 of them are already in the UF Collection.  Only the 17 new graphs\n    not yet in the collection are added here in the DIMACS10 set.\n\nDIMACS10 graph:                 new?   UF matrix:\n    ---------------                 ----   -------------\n    walshaw/144                      *     DIMACS10/144\n    walshaw/3elt                           AG-Monien/3elt\n    walshaw/4elt                           Pothen/barth5\n    walshaw/598a                     *     DIMACS10/598a\n    walshaw/add20                          Hamm/add20\n    walshaw/add32                          Hamm/add32\n    walshaw/auto                     *     DIMACS10/auto\n    walshaw/bcsstk29                       HB/bcsstk29\n    walshaw/bcsstk30                       HB/bcsstk30\n    walshaw/bcsstk31                       HB/bcsstk31\n    walshaw/bcsstk32                       HB/bcsstk32\n    walshaw/bcsstk33                       HB/bcsstk33\n    walshaw/brack2                         AG-Monien/brack2\n    walshaw/crack                          AG-Monient/crack\n    walshaw/cs4                      *     DIMACS10/cs4\n    walshaw/cti                      *     DIMACS10/cti\n    walshaw/data                     *     DIMACS10/data\n    walshaw/fe_4elt2                 *     DIMACS10/fe_4elt2\n    walshaw/fe_body                  *     DIMACS10/fe_body\n    walshaw/fe_ocean                 *     DIMACS10/fe_ocean\n    walshaw/fe_pwt                         Pothen/pwt\n    walshaw/fe_rotor                 *     DIMACS10/fe_rotor\n    walshaw/fe_sphere                *     DIMACS10/fe_sphere\n    walshaw/fe_tooth                 *     DIMACS10/fe_tooth\n    walshaw/finan512                       Mulvey/finan512\n    walshaw/m14b                     *     DIMACS10/m14b\n    walshaw/memplus                        Hamm/memplus\n    walshaw/t60k                     *     DIMACS10/t60k\n    walshaw/uk                       *     DIMACS10/uk\n    walshaw/vibrobox                       Cote/vibrobox\n    walshaw/wave                           AG-Monien/wave\n    walshaw/whitaker3                      AG-Monien/whitaker3\n    walshaw/wing                     *     DIMACS10/wing\n    walshaw/wing_nodal               *     DIMACS10/wing_nodal\n\n\n\n\n\n\n\n\n\n\n\nPert DAG\n\n\n\n\n\n//| echo: false\n\nmake_sparkline(\"Pert_DAG\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmazon\n\n\n\n\n\n\nmake_sparkline(\"Amazon\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAutonomous System Network\n\n\n\n\n\n\nmake_sparkline(\"Autonomous_SystemNetwork\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nControl Flow Graphs\n\n\n\n\n\n\nmake_sparkline(\"Control_FlowGraphs\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnfortunately, some of the datasets that were used in the papers in our corpus are lost, or not available anymore. While we did go through the effort, for each one of them, to recover them and store them on OSF, we could not find anywhere the following list of datasets:\n\n\n\n\n\n\nGION\n\n\n\n\n\n\nmake_sparkline(\"GION\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFM3\n\n\n\n\n\n\nmake_sparkline(\"FM3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPadia Stories\n\n\n\n\n\n\nmake_sparkline(\"Padia_Stories\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Mapping Project\n\n\n\n\n\n\nmake_sparkline(\"Internet_MappingProject\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMathematics Genealogy\n\n\n\n\n\n\nmake_sparkline(\"Mathematics_Genealogy\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMedical Patient Records\n\n\n\n\n\n\nmake_sparkline(\"Medical_PatientRecords\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssorted Fiscal Network\n\n\n\n\n\n\nmake_sparkline(\"Assorted_FiscalNetwork\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDebates\n\n\n\n\n\n\nmake_sparkline(\"Debates\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCar Features\n\n\n\n\n\n\nmake_sparkline(\"Car_Features\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBusiness Processes\n\n\n\n\n\n\nmake_sparkline(\"Business_Processes\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the data we collected, we also found several instances of custom-made datasets. We consider custom-made datasets either edits to pre-existing datasets, where the authors found it necessary to either split or modify the dataset in a particular way, or datasets completely made up from scratch using random generators or custom-made code. This can happen in cases where the authors of a paper needed a dataset containing particular characteristics which was not easy to find in the wild, so a new dataset was crafted.\nFor instance, consider the case where the authors of a paper develop an algorithm that works on hypergraphs. They want to test that the algorithm works, and test its performance on hypergraphs of various sizes, but datasets containing hypergraphs are difficult to find. For this reason, the authors craft one dataset synthetically, or take a pre-existing dataset and edit it so that it now contains hyperedges.\nWe split custom-made datasets in three categories, with their occurrences in the corpus of papers illustrated below:\n\n{ \n  let d = []\n  \n  let allbenchmarkdatasets = [...new Set(literature.map(l =&gt; l[\"Dataset tag clean\"].split(\",\").map(d =&gt; d.trim())).flat())].filter(a =&gt; a != \"\")\n\n  for (let dataset of allbenchmarkdatasets){\n    if (!dataset.includes(\"Custom\")) continue;\n    let literature_entries_with_this_dataset = literature.filter(l =&gt; l[\"Dataset tag clean\"].includes(dataset))\n\n    d.push({\"dataset\": dataset, \"count\": literature_entries_with_this_dataset.length})\n  }\n  \n  return Plot.plot({\n    color: {\n      // legend: true,\n      type: \"categorical\",\n      // domain: d3.range(10).map((d, i) =&gt; `Category ${i + 1}`),\n      scheme: \"Tableau10\" // use the \"accent\" scheme\n    },\n    y: {\n      // tickFormat: \"s\"\n    },\n    marks: [\n      Plot.barX(d, {x: \"count\", y: \"dataset\", fill: \"dataset\",inset: 2, sort: {y: \"x\", reverse: true}}),\n      Plot.axisY({label: null, lineWidth: 12, marginLeft: 150}),\n    ]\n  })\n}\n\n\n\n\n\n\nReplicable datasets indicate cases where the authors have given enough information so that the experiment can be replicated exactly as it was run by the authors of a paper, or closely enough that the results obtained reflect the published ones very closely. This includes cases where either the authors published the entire dataset they used, they published the code they used to generate the dataset, or include an exact description of the steps they took to generate it.\nReproducible datasets are cases where the authors described the steps they took to generate and/or edit their datasets, but not in-depth enough so that the exact same graphs can be reproduced, and did not redistribute it. Results can still be reproduces somewhat closely if the authors took care to report enough information about their graphs.\nFor non-replicable datasets, we indicate cases where the authors did not distribute their datasets and did not include enough information in the paper so that their results could be replicated.\nThis information is closely tied to the distribution of supplemental material in papers, that is shown in the chart below:\n\n{ \n  let d = []\n  \n  let allbenchmarkdatasets = [...new Set(literature.map(l =&gt; l[\"Supplemental material (Multi-select)\"].split(\",\").map(d =&gt; d.trim())).flat())].filter(a =&gt; a != \"\")\n\n  for (let dataset of allbenchmarkdatasets){\n    let literature_entries_with_this_dataset = literature.filter(l =&gt; l[\"Supplemental material (Multi-select)\"].includes(dataset))\n\n    d.push({\"dataset\": dataset, \"count\": literature_entries_with_this_dataset.length})\n  }\n  \n  return Plot.plot({\n    color: {\n      // legend: true,\n      type: \"categorical\",\n      // domain: d3.range(10).map((d, i) =&gt; `Category ${i + 1}`),\n      scheme: \"Tableau10\" // use the \"accent\" scheme\n    },\n    y: {\n      // tickFormat: \"s\"\n    },\n    marks: [\n      Plot.barX(d, {x: \"count\", y: \"dataset\", fill: \"dataset\",inset: 2, sort: {y: \"x\", reverse: true}}),\n      Plot.axisY({label: null, lineWidth: 12, marginLeft: 150}),\n    ]\n  })\n}\n\n\n\n\n\n\nThis discussion is part of a larger discourse on research replicability, that is gaining traction in the scientific community. The ACM, for instance, has a policy on artifact review and badging, where authors are encouraged to submit their artifacts for review, and if they pass, they receive a badge that indicates the artifact is available for review. This is a step towards making research more replicable and reproducible, and we hope that our work will contribute to this effort.\nSee, e.g., ACM’s definitions at https://www.acm.org/publications/policies/artifact-review-and-badging-current.\n\nfunction make_dataset_name_and_title_list(chosen_collection_type, include_num_graphs){ \n  let collection_type = benchmark_datasets.map(a =&gt; a[\"Type of Collection\"]).filter(c =&gt; c == chosen_collection_type);\n  let y_distance = 20;\n  let svgwidth = 700;\n  let numgraphs_offset = 40;\n\n  const svg = d3.create('svg')\n    .attr('width', svgwidth)\n    .attr('height', y_distance * collection_type.length + 60);\n\n  svg.append(\"text\")\n    .attr(\"x\", svgwidth/2)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"font-weight\", \"bold\")\n    .text(\"List of datasets tagged as \" + chosen_collection_type + \" and their sources\")\n\n  svg.append(\"text\")\n      .attr(\"x\", 200)\n      .attr(\"y\", 45)\n      .style(\"text-anchor\", \"end\")\n      .style(\"font-size\", \"small\")\n      .style(\"fill\", \"#aaa\")\n      .text(\"Name\")\n\n  if (include_num_graphs) {\n    svg.append(\"text\")\n        .attr(\"x\", 240)\n        .attr(\"y\", 45)\n        .style(\"text-anchor\", \"middle\")\n        .style(\"font-size\", \"small\")\n        .style(\"fill\", \"#aaa\")\n        .text(\"#Graphs\")\n  }\n\n  svg.append(\"text\")\n      .attr(\"x\", 320 - (include_num_graphs ? 0 : numgraphs_offset))\n      .attr(\"y\", 45)\n      .style(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"small\")\n      .style(\"fill\", \"#aaa\")\n      .text(\"Original link\")\n\n  svg.append(\"text\")\n      .attr(\"x\", 370 - (include_num_graphs ? 0 : numgraphs_offset))\n      .attr(\"y\", 45)\n      .style(\"text-anchor\", \"start\")\n      .style(\"font-size\", \"small\")\n      .style(\"fill\", \"#aaa\")\n      .text(\"Origin paper / website\")\n\n  for (let c of [... new Set(collection_type)]){\n    if (c == \"Skip\" || c == \"Missed It\") continue;\n    // console.log(c)\n    let instances = benchmark_datasets.filter(a =&gt; a[\"Type of Collection\"] == c);\n    if (c.includes(\"No report\")) c = \"Established Network Repository\";\n\n    for (let i in instances){\n      svg.append(\"text\")\n        .attr(\"x\", 200)\n        .attr(\"y\", 65 + i * y_distance)\n        .style(\"text-anchor\", \"end\")\n        .style(\"font-size\", \"small\")\n        .text(instances[i][\"Name\"] + \" \")\n\n      if (include_num_graphs){\n        svg.append(\"text\")\n          .attr(\"x\", 240)\n          .attr(\"y\", 65 + i * y_distance)\n          .style(\"text-anchor\", \"middle\")\n          .style(\"font-size\", \"small\")\n          .text(instances[i][\"Number of Graphs\"] + \" \")\n      }\n      \n      if (instances[i][\"Originally found at\"] != \"\" && instances[i][\"Originally found at\"] != undefined) {\n        const xPosOff = (include_num_graphs ? 0 : numgraphs_offset);\n        const yPos = (y_distance * i + 65);\n        svg.append(\"a\")\n        .attr(\"href\", instances[i][\"Originally found at\"])\n        .attr(\"transform\", \"translate(\"+ (310 - xPosOff) +\", \" + yPos + \")\")\n        .attr(\"target\", \"_blank\")\n        .append(\"text\")\n        .text(\"[link]\")\n        .style(\"fill\", \"#88d\")\n        .style(\"font-size\", \"small\")\n        \n        const paper = (paper_source.find(a =&gt; a.Name == instances[i][\"Origin paper plaintext\"]) || {})\n        let link = \"\"\n        if('bib' in paper){\n          const res = extractDOIUrl(paper.bib)\n          if (res) link = res;\n        }\n        \n        if(link != \"\"){\n          link = extractDOIUrl(paper.bib)\n          svg.append(\"a\")\n          .attr(\"href\", link)\n          .attr(\"transform\", \"translate(\"+ (370 - xPosOff)+\", \" + yPos + \")\")\n          .attr(\"target\", \"_blank\")\n          .append(\"text\")\n          .text(instances[i][\"Origin paper plaintext\"].split(\"(\")[0])\n          // .style(\"fill\", \"rgb(136, 136, 221)\")\n          .style(\"fill\",\"#1565c0\")\n          .style(\"font-size\", \"small\")\n        } else {\n          // What do we do here\n          svg.append(\"text\")\n          .attr(\"transform\", \"translate(\"+ (370 - xPosOff)+\", \" + yPos + \")\")\n          .text(instances[i][\"Origin paper plaintext\"].split(\"(\")[0])\n          .style(\"fill\", \"#616161\")\n          .style(\"font-size\", \"small\")\n        }\n        \n      }\n    }\n  }\n\n  return svg.node();\n}\n\nfunction extractDOIUrl(bibtex) {\n    // Regular expression to find the DOI within the BibTeX entry\n    const doiRegex = /doi\\s*=\\s*{([^}]+)}/i;\n    \n    // Try to match the DOI in the BibTeX entry\n    const match = bibtex.match(doiRegex);\n    \n    // Check if a DOI was found\n    if (match) {\n        // Return the DOI as a full URL\n        return `https://doi.org/${match[1].trim()}`;\n    } else {\n        // Return null or an appropriate message if DOI is not found\n        return null;\n    }\n}"
  },
  {
    "objectID": "chapters/datasets_in_use.html#protein-interaction-publications",
    "href": "chapters/datasets_in_use.html#protein-interaction-publications",
    "title": "1 Datasets in use",
    "section": "",
    "text": "From TimeArcs: Visualizing Fluctuations in Dynamic Networks:\n\nThe data contains the publication information (such as publication year, author, and textual evidence) of interactions between pairs of proteins, as well as their specific interaction type.\n\n\nWhen there are multiple arcs connecting two proteins, it falls into one of the two circumstances. If they have the same color, these arcs indicate that there are supporting evidences in different publications which confirm the interaction between two elements. On the other hand, if they have the different colors, the more recent appearance provides either more detailed knowledge about the interaction or shows a conflict between different articles regarding the way in which these proteins interact.\n\n\n\n\nFrom TimeArcs: Visualizing Fluctuations in Dynamic Networks:\n\n\n\nFig. 10: TimeArcs visualization for interactions around PCAF protein. (1), (2), and (3) in the figure are supporting evidences in literature of “PCAF binds MAML”."
  },
  {
    "objectID": "chapters/datasets_in_use.html#protein-homology-lost",
    "href": "chapters/datasets_in_use.html#protein-homology-lost",
    "title": "1 Datasets in use",
    "section": "",
    "text": "From [Rapid Graph Layout Using Space Filling Curves:](https://ieeexplore.ieee.org/document/4658143)\n\nThe “pgraph” dataset (shown in Figures 2 and 6) is a protein homology graph, which is relatively dense [7].\n\nConsists of 28, 854 vertices and 1,180, 816 edges, found in Table 1 of paper above.\n\n\n\nFrom Rapid Graph Layout Using Space Filling Curves:\n\n\n\nFig. 2. A protein homology graph laid out with our space filling curve based approach. Color corresponds to depth in the clustering hierarchy. |V| = 28, 854,|E| = 1, 180, 816\nFrom LGL: Creating a Map of Protein Function with an Algorithm for Visualizing Very Large Biological Networks\n\n\n\nFig. 3. The complete protein homology map. A layout of the entire protein homology map; a total of 11,516 connected sets containing 111,604 proteins (vertices) with 1,912,684 edges. The largest connected set is shown more clearly in the inset and is enlarged further in Figure 4."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Airlines, Migrations, and Air Traffic 45ffa6caedd141b082e163d7da6eb895.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Airlines, Migrations, and Air Traffic 45ffa6caedd141b082e163d7da6eb895.html",
    "title": "1 Airlines, Migrations, and Air Traffic",
    "section": "",
    "text": "1 Airlines, Migrations, and Air Traffic\nOrigin Notes: Data collected from the Edge-Path bundling paper by Markus Wallinger et al. They cite the Airlines dataset to Force Directed Edge Bundling for Graph Visualization and the migrations dataset to Geometry-Based Edge Clustering for Graph Visualization. graph features handled: bundled edges (generated), directed edges, generic, spatial Graph features in papers: generic,spatial,spatial,clusters (generated),dynamic,spatial,bundled edges (generated),generic,bundled edges (generated),spatial,dynamic,dynamic (discrete),bundled edges (generated),directed edges,spatial Origin Paper: Force-Directed Edge Bundling for Graph Visualization (https://www.notion.so/Force-Directed-Edge-Bundling-for-Graph-Visualization-597d0c38c51e433090a7706cdc9bd6a3?pvs=21), Geometry-Based Edge Clustering for Graph Visualization (https://www.notion.so/Geometry-Based-Edge-Clustering-for-Graph-Visualization-72e7c5d193e34645a3cbca78df6fd1c8?pvs=21), Edge-Path Bundling: A Less Ambiguous Edge Bundling Approach (https://www.notion.so/Edge-Path-Bundling-A-Less-Ambiguous-Edge-Bundling-Approach-be7daf7cd0ce4a73b1ad00bb25af472c?pvs=21) Originally found at: https://github.com/mwallinger-tu/edge-path-bundling/tree/master/data Size: 235-1702 nodes, 2101-16494 edges Number of Graphs: 3 format: JSON file but with spcific attributes for their tool so needs to be parsed Appeared in years: 2011,2009,2016,2008,2017,2020,2022,2023 Type of Collection: Aggregate collection is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Force-directed edge bundling for graph visualization (https://www.notion.so/Force-directed-edge-bundling-for-graph-visualization-09ec16bfe40d4fbea880bfc4e640bbfa?pvs=21), MLSEB: Edge Bundling Using Moving Least Squares Approximation (https://www.notion.so/MLSEB-Edge-Bundling-Using-Moving-Least-Squares-Approximation-474c60d6caff41a3a09b5ba2f1f513d8?pvs=21), HOTVis: Higher-Order Time-Aware Visualisation of Dynamic Graphs (https://www.notion.so/HOTVis-Higher-Order-Time-Aware-Visualisation-of-Dynamic-Graphs-4ce353bf13094484988b5f8bb306c8d8?pvs=21), MobilityGraphs: Visual Analysis of Mass Mobility Dynamics via Spatio-Temporal Graphs and Clustering (https://www.notion.so/MobilityGraphs-Visual-Analysis-of-Mass-Mobility-Dynamics-via-Spatio-Temporal-Graphs-and-Clustering-69e89e0d31134f8997cdaaa266e4ba9c?pvs=21), Edge-Path Bundling: A Less Ambiguous Edge Bundling Approach (https://www.notion.so/Edge-Path-Bundling-A-Less-Ambiguous-Edge-Bundling-Approach-932f56be1ec24c50a2c3fc65a37ed172?pvs=21), Geometry-Based Edge Clustering for Graph Visualization (https://www.notion.so/Geometry-Based-Edge-Clustering-for-Graph-Visualization-c3e8767d7784426f815b386900c6cee9?pvs=21), Skeleton-Based Edge Bundling for Graph Visualization (https://www.notion.so/Skeleton-Based-Edge-Bundling-for-Graph-Visualization-f62005dde2124553a06f4f0883976ca9?pvs=21) cleaned format?: Yes duplicate?: No link works?: Yes Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90e774cf7480ef0055631 Origin paper plaintext: Force-Directed Edge Bundling for Graph Visualization, Geometry-Based Edge Clustering for Graph Visualization, Edge-Path Bundling: A Less Ambiguous Edge Bundling Approach Page id: 45ffa6caedd141b082e163d7da6eb895 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d9490a1101aa0dcf6a0ba5 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96d8c0c2b4d0f64386243 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d971241101aa0e9f6a0c0b first look: No sparkline data: {‘min’: 235, ‘max’: 1702, ‘step_size’: 1500, ‘num_bins’: 2, ‘bins’: [0, 1500], ‘num_nodes’: [1, 2]} Related to Literature - Algorithm (Dataset tag relations) 1: Skeleton-Based Edge Bundling for Graph Visualization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Skeleton-Based%20Edge%20Bundling%20for%20Graph%20Visualizati%206dd78ad2473945c99d670dea9546af1c.md), Force-directed edge bundling for graph visualization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Force-directed%20edge%20bundling%20for%20graph%20visualizati%201a6dc388a0f4443ca2d3693f8bff3f74.md), MobilityGraphs: Visual Analysis of Mass Mobility Dynamics via Spatio-Temporal Graphs and Clustering (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/MobilityGraphs%20Visual%20Analysis%20of%20Mass%20Mobility%20Dy%2003cbcaf73d9b4c0784e8e44b38185eb6.md), Geometry-Based Edge Clustering for Graph Visualization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Geometry-Based%20Edge%20Clustering%20for%20Graph%20Visualiza%204266d74d6ae1420a970d2b1a74a38fc7.md), MLSEB: Edge Bundling Using Moving Least Squares Approximation (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/MLSEB%20Edge%20Bundling%20Using%20Moving%20Least%20Squares%20App%20bf3edb74a4cd4476838fdcc3d531f9b5.md), HOTVis: Higher-Order Time-Aware Visualisation of Dynamic Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/HOTVis%20Higher-Order%20Time-Aware%20Visualisation%20of%20Dy%20bd698d90a24a4b8e9527007489d139b5.md), Edge-Path Bundling: A Less Ambiguous Edge Bundling Approach (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Edge-Path%20Bundling%20A%20Less%20Ambiguous%20Edge%20Bundling%20%20fcfa5882e692481298cbee906e005c30.md), Interactive Structure-aware Blending of Diverse Edge Bundling Visualizations (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Interactive%20Structure-aware%20Blending%20of%20Diverse%20Ed%204fbfba72a5b046f8baf7211508790373.md), Faster Edge-Path Bundling through Graph Spanners (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Faster%20Edge-Path%20Bundling%20through%20Graph%20Spanners%2064dc9f75adc942ffb7dd7259a8357cf8.md)\n\n\n2 Body\n\nStatistics\n\n\n\nfour_in_one.svg\n\n\n\n\nDescriptions from Literature\nFrom “Skeleton-Based Edge Bundling for Graph Visualization”:\n\nFigure 7 illustrates the SBEB and compares it with several existing bundling methods. Note that in all images here generated with our method, we used simple additive edge blending only, as our focus here is the layout, not the rendering. Images (a,b) show an air traffic graph (nodes are city locations, edges are interconnecting flights)… Images (e-h) show the US migrations graph bundled with the WR, GBEB, FDEB, and our method (SBEB) respectively. Overall, SBEB produces stronger bundling, due to the many iterations I = 10 being used), and emphasizes the structure of connections between groups of close cities (due to the skeleton layout cues). If less bundling is desired, fewer iterations can be used (Fig. 4). Adjusting the postprocessing smoothing and relaxation parameters, SBEB can create bundling styles similar to either GBEB (higher bundle curvatures, more emphasis on the graph structure) or FDEB (smoother bundles). Finally, images (i,j) show the US airlines graph bundled with the FDEB and SBEB respectively. SBEB generates stronger bundling (more overdraw) but arguably less clutter. Note also that SBEB generates treelike bundle structures which is useful when the exploration task at hand has an inherent (local) hierarchical nature, e.g. see how traffic connections merge into and/or split from main traffic routes.\n\n\n\nExample Figures\nFrom “Edge-Path Bundling: A Less Ambiguous Edge Bundling Approach”:\n\n\n\nUntitled\n\n\nFig. 1. Edge bundling of the migrations dataset. (a) Straight line drawing. (b) Force-directed edge bundling aggregates edges well, but overaggregates at the centre of the drawing making it difficult to see patterns in the east-west flow (red bundle). (c) Cubu has a similar drawback at the centre of the map to a lesser degree. (d) Winding roads divides this structure into several smaller flows, but they may not be necessarily related to graph structure. (e) Edge-path bundling is able to distinguish between several flows that reflect paths in the underlying graph. (f) When edge direction is considered, the algorithm is able to further subdivide these flows based on direction.\n\n\n\nUntitled\n\n\nFig. 8. Airlines (undirected). (a) Input drawing. (b) Force-directed bundling is able to cluster edges into the major flows, but some overaggregation prevents details from being visualised. (c) Cubu provides a good bundling, but also has overaggregation. (c) Confluent drawings can be imposed on the layout, but as the approach cannot layout the graph bicliques can be distantly located, resulting in suboptimal performance. (e) Winding roads divides the flows into many streams, but these streams can be unfaithful to graph structure. (f) Edge-path bundling aggregates edges using weighted paths. The four prominent bundle intersections on the east coast correspond to major airports: Atlanta, Detroit, Minneapolis, and Dallas.\n\n\n\nUntitled\n\n\nFig. 10. Results of four algorithms on the air traffic network. (a) Force-directed bundling is able to recover the major trajectories but does not strongly bundle the network. (b) Cubu strongly bundles the main flows of airtraffic, but can suffer from overaggregation. (c) Winding roads divides the traffic into many smaller bundles, but this may not be reflective of underlying graph structure. (d) With edge-path bundling, each bundle necessarily reflects a path in the network. There are separate flows across the atlantic and asia that correspond to paths through the network.\nFrom “Skeleton-Based Edge Bundling for Graph Visualization”:\n\n\n\nScreen Shot 2023-08-14 at 3.42.37 PM.png\n\n\n== STOP RENDERING ==\ngd contest: http://www.research.att.com/conf/gd96/contest.html\nlook here: https://github.com/mwallinger-tu/edge-path-bundling/tree/master/data from Edge-Path Bundling: A Less Ambiguous Edge Bundling Approach"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Collaboration Network 6062ff126f474a50b5f3dc9b945d43da.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Collaboration Network 6062ff126f474a50b5f3dc9b945d43da.html",
    "title": "1 Assorted Collaboration Network",
    "section": "",
    "text": "Note: Contains IEEEVis Publication Data, DBLP collaborations, and CPAN, which contains collaboration information among developers using Perl. Origin Notes: The VIS publication data was found online in the following website: https://sites.google.com/site/vispubdata. However, we also downloaded the text file fromhttps://www.cc.gatech.edu/gvu/ii/citevis/, a tool/poster associated to the publication: http://vispubdata.org/: A Metadata Collection about IEEE Visualization (VIS) Publications. graph features handled: categorical nodes, directed edges, dynamic Graph features in papers: categorical nodes,high degree,labeled nodes,generic,clusters (pre-existing),dynamic (discrete),layered graphs,n-layers,dynamic,dynamic,dynamic (continuous),clusters (generated),high degree,clusters (pre-existing),dynamic,dynamic (discrete),dynamic,dynamic (discrete),layered graphs,n-layers,clusters (generated),dynamic,dynamic (discrete),hypergraphs,layered graphs,n-layers,dynamic,dynamic (continuous),large,dynamic (discrete),dynamic,layered graphs,n-layers,weighted edges,clusters (generated),dynamic,dynamic (continuous),tripartite,clusters (pre-existing) Origin Paper: vispubdata.org: A Metadata Collection about IEEE Visualization VIS Publications (https://www.notion.so/vispubdata-org-A-Metadata-Collection-about-IEEE-Visualization-VIS-Publications-3fddec5436dc45539a82b0274ac17020?pvs=21), CPAN-explorer, an interactive exploration of the Perl Ecosystem (https://www.notion.so/CPAN-explorer-an-interactive-exploration-of-the-Perl-Ecosystem-0d1d0132440c438798a1880a6e200d8d?pvs=21), Preserving Minority Structures in Graph Sampling (https://www.notion.so/Preserving-Minority-Structures-in-Graph-Sampling-d0f9e612663d434e85599c402c9b700c?pvs=21) Originally found at: https://www.cc.gatech.edu/gvu/ii/citevis/ https://sites.google.com/site/vispubdata/home?authuser=0 https://dblp.uni-trier.de/ https://github.com/csuvis/MCGS/tree/master/dataset Size: 3503-7102 nodes, 2112-25677 edges format: Vis Pub Data text file: year range at top (1995 - 2015) then each entry is a paper\narticle {node ID} {doi} {some number} {paper title} {attr: val} &lt;- then some collection of attiribute value pairs (like author, keyword…) citations: {list of line separated citations (to articles within the document) via nodeID}\nAppeared in years: 2019,2006,2010,2014,2017,2007,2020,2016,2021,2022,2013,2011 Type of Collection: Aggregate collection is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Six methods for transforming layered hypergraphs to apply layered graph layout algorithms (https://www.notion.so/Six-methods-for-transforming-layered-hypergraphs-to-apply-layered-graph-layout-algorithms-0911f648bad1486fa859c9bd0de82a6b?pvs=21), Automatic Polygon Layout for Primal-Dual Visualization of Hypergraphs (https://www.notion.so/Automatic-Polygon-Layout-for-Primal-Dual-Visualization-of-Hypergraphs-09ec6b5a17ae4f5eb6aebedf0dde6467?pvs=21), Drawing Dynamic Graphs Without Timeslices (https://www.notion.so/Drawing-Dynamic-Graphs-Without-Timeslices-15310bfa5a2f4015b7a4ae0098e6c151?pvs=21), Software evolution storylines (https://www.notion.so/Software-evolution-storylines-2d8caf914a9f407482d30a7b21cf66c2?pvs=21), Content-based text mapping using multi-dimensional projections for exploration of document collections (https://www.notion.so/Content-based-text-mapping-using-multi-dimensional-projections-for-exploration-of-document-collectio-3e4cd1cd8bec41f1b819aec0330880a8?pvs=21), GraphDiaries: Animated Transitions and Temporal Navigation for Dynamic Networks (https://www.notion.so/GraphDiaries-Animated-Transitions-and-Temporal-Navigation-for-Dynamic-Networks-6c0bf6c194924eef9b824c7acb61174b?pvs=21), Storyline Visualizations with Ubiquitous Actors (https://www.notion.so/Storyline-Visualizations-with-Ubiquitous-Actors-73d912634128468b9de9775a16ed543c?pvs=21), A Maxent-Stress Model for Graph Layout (https://www.notion.so/A-Maxent-Stress-Model-for-Graph-Layout-8da4fc24a7c7438c9d10c3113841b7fd?pvs=21), TimeArcs: Visualizing Fluctuations in Dynamic Networks (https://www.notion.so/TimeArcs-Visualizing-Fluctuations-in-Dynamic-Networks-968889d3ca4a4109aca698513515e837?pvs=21), ChordLink: A New Hybrid Visualization Model (https://www.notion.so/ChordLink-A-New-Hybrid-Visualization-Model-9f4abf15618f462c962e68d2974043c9?pvs=21), Fast filtering and animation of large dynamic networks (https://www.notion.so/Fast-filtering-and-animation-of-large-dynamic-networks-a9ecbc1aa880473b834754638c54026b?pvs=21), Preserving Minority Structures in Graph Sampling (https://www.notion.so/Preserving-Minority-Structures-in-Graph-Sampling-cf062d6fa8f5484ab1190edd125f739f?pvs=21), NodeTrix: a Hybrid Visualization of Social Networks (https://www.notion.so/NodeTrix-a-Hybrid-Visualization-of-Social-Networks-e3453e98221a45d99d1aae2a9ead9d14?pvs=21) cleaned format?: Yes duplicate?: No link works?: Yes Added in paper: Yes OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90e6f4cf7480eef0556cd Origin paper plaintext: vispubdata.org: A Metadata Collection about IEEE Visualization VIS Publications, CPAN-explorer, an interactive exploration of the Perl Ecosystem, Preserving Minority Structures in Graph Sampling Page id: 6062ff126f474a50b5f3dc9b945d43da unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d948ba94a6be101d12e880 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96d7d0c2b4d0f65386287 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d971834cf748115b055998 first look: No sparkline data: {‘min’: 3503, ‘max’: 7102, ‘step_size’: 5000, ‘num_bins’: 2, ‘bins’: [0, 5000], ‘num_nodes’: [2, 1]} Related to Literature - Algorithm (Dataset tag relations) 1: ChordLink: A New Hybrid Visualization Model0 (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/ChordLink%20A%20New%20Hybrid%20Visualization%20Model0%20dd9d1e548bfa46949279e4ecbfeb18b6.md), Content-based text mapping using multi-dimensional projections for exploration of document collections (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Content-based%20text%20mapping%20using%20multi-dimensional%20f138d261ae1249b1bc677e59384d0b47.md), Software evolution storylines (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Software%20evolution%20storylines%20ff8261ac4a6d498faa6fe14773b58369.md), GraphDiaries: Animated Transitions and Temporal Navigation for Dynamic Networks (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/GraphDiaries%20Animated%20Transitions%20and%20Temporal%20Nav%201db1c63ef3e3417ebc7867fcf72c3813.md), Drawing Dynamic Graphs Without Timeslices (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Drawing%20Dynamic%20Graphs%20Without%20Timeslices%204da7155eac4b4979ae165f3b0f1d2b1b.md), NodeTrix: a Hybrid Visualization of Social Networks (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/NodeTrix%20a%20Hybrid%20Visualization%20of%20Social%20Networks%205f8162fa50f3449b89d20b25e9f2cfef.md), Storyline Visualizations with Ubiquitous Actors (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Storyline%20Visualizations%20with%20Ubiquitous%20Actors%20fed14c376f3b4eb095022422ba483a32.md), TimeArcs: Visualizing Fluctuations in Dynamic Networks (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/TimeArcs%20Visualizing%20Fluctuations%20in%20Dynamic%20Netwo%209d27b7e02aec4b80bc15447255eb4f4c.md), Automatic Polygon Layout for Primal-Dual Visualization of Hypergraphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Automatic%20Polygon%20Layout%20for%20Primal-Dual%20Visualiza%2078257e61a97c4b9ca0eb0a128ce89101.md), Six methods for transforming layered hypergraphs to apply layered graph layout algorithms (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Six%20methods%20for%20transforming%20layered%20hypergraphs%20t%2053032e4c32f243108e20bcee60d50c11.md), A Maxent-Stress Model for Graph Layout (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Maxent-Stress%20Model%20for%20Graph%20Layout%2000c097ef77dd46d6a2df74869581a5c9.md), Preserving Minority Structures in Graph Sampling (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Preserving%20Minority%20Structures%20in%20Graph%20Sampling%202d52160d6ac04019aaf808496f7d4240.md), Fast filtering and animation of large dynamic networks (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Fast%20filtering%20and%20animation%20of%20large%20dynamic%20netw%2004f8b4c82871465fb46f8ad2a01d6815.md), Optimizing Stepwise Animation in Dynamic Set Diagrams (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Optimizing%20Stepwise%20Animation%20in%20Dynamic%20Set%20Diagr%20b8b9576da7364282aeaeaf9337de8863.md), A Random Sampling O(n) Force-calculation Algorithm for Graph Layouts (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Random%20Sampling%20O(n)%20Force-calculation%20Algorithm%2086599a831f314d1cb8871a5a92420d0f.md), Event-based Dynamic Graph Drawing without the Agonizing Pain (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Event-based%20Dynamic%20Graph%20Drawing%20without%20the%20Agon%20e67037f1481b48fab8cbd0c2802fcbe5.md), Parallel Edge Splatting for Scalable Dynamic Graph Visualization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Parallel%20Edge%20Splatting%20for%20Scalable%20Dynamic%20Graph%208fed21af91cf4c4aaf6a05ccb0335d43.md), ContexTour: Contextual Contour Visual Analysis on Dynamic Multi- Relational Clustering (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/ContexTour%20Contextual%20Contour%20Visual%20Analysis%20on%20D%203c45c490d66242a58cd9953fefe6c1ab.md), Comparing Node-Link and Node-Link-Group Visualizations From An Enjoyment Perspective (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Comparing%20Node-Link%20and%20Node-Link-Group%20Visualizat%20a363d90a50ee4f04b1defe271548131c.md)"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Collaboration Network 6062ff126f474a50b5f3dc9b945d43da.html#example-figures",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Collaboration Network 6062ff126f474a50b5f3dc9b945d43da.html#example-figures",
    "title": "1 Assorted Collaboration Network",
    "section": "2.1 Example Figures",
    "text": "2.1 Example Figures\nFrom “Six methods for transforming layered hypergraphs to apply layered graph layout algorithms”\n\n\n\nUntitled\n\n\nFig. 7. Collaborations in papers published at VIS between a set of universities—in particular, these are the collaborators of Harvard University and the collaborators of the collaborators (up to 2 degrees of separation). This figure shows the result of the application of  aggregate-collapse.\nFrom “TimeArcs: Visualizing Fluctuations in Dynamic Networks”\n\n\n\nUntitled\n\n\nFigure 5. The TimeArcs visualization applied to the IEEE VIS publication co-authorship network of the top 50 researchers from 2010 to 2014 (i.e., the same data in Fig. 4)."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Collaboration Network 6062ff126f474a50b5f3dc9b945d43da.html#descriptions-from-literature",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Collaboration Network 6062ff126f474a50b5f3dc9b945d43da.html#descriptions-from-literature",
    "title": "1 Assorted Collaboration Network",
    "section": "3.1 Descriptions from Literature",
    "text": "3.1 Descriptions from Literature\nFrom Preserving Minority Structures in Graph Sampling\n\n6.3.2 Cpan Graph Data Set\nThe Cpan data set is a collaboration network with 839 nodes and 2,127 edges [1]. It depicts the relationships between the developers using the same Perl modules. The original graph and samples obtained by FF, TIES, and MCGS are shown in Figure 6. This case focused on the preservation of parachute-like rims at marginal areas."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Collaboration Network 6062ff126f474a50b5f3dc9b945d43da.html#example-figures-1",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Collaboration Network 6062ff126f474a50b5f3dc9b945d43da.html#example-figures-1",
    "title": "1 Assorted Collaboration Network",
    "section": "3.2 Example Figures",
    "text": "3.2 Example Figures\nFrom Preserving Minority Structures in Graph Sampling\n\n\n\nUntitled\n\n\nFig. 6. Visual illustration of the cpan graph data set (a) and three samples generated by ff (b), ties (c), and mcgs (d) with a sampling rate of 30%."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Collaboration Network 6062ff126f474a50b5f3dc9b945d43da.html#descriptions-from-the-literature",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Collaboration Network 6062ff126f474a50b5f3dc9b945d43da.html#descriptions-from-the-literature",
    "title": "1 Assorted Collaboration Network",
    "section": "4.1 Descriptions from the Literature",
    "text": "4.1 Descriptions from the Literature\nFrom ChordLink: A New Hybrid Visualization Model\n\nThe second case study considers co-authorship networks extracted from the DBLP dataset [30], which contains publication data in computer science. Through a query consisting of keywords and Boolean operators, one can retrieve a set of publications on a desired topic. We use the results returned by DBLP to construct networks where nodes are authors and edges indicate co-authorships, weighted by the number of papers shared by their end-nodes. Nodes are labeled with authors’ names and edges with the titles of the corresponding publications. We performed the query “network AND visualization” and limited to 500 the number of search results (i.e., publications) to be returned. The resulting network consists of 1766 nodes, 3780 edges, and 382 connected components. The largest of these components contains 118 nodes and 322 edges."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Collaboration Network 6062ff126f474a50b5f3dc9b945d43da.html#example-figures-2",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Collaboration Network 6062ff126f474a50b5f3dc9b945d43da.html#example-figures-2",
    "title": "1 Assorted Collaboration Network",
    "section": "4.2 Example Figures",
    "text": "4.2 Example Figures\nFrom Parallel Edge Splatting for Scalable dynamic Graph Visualization\n\n\n\nUntitled\n\n\nFig. 8. The evolution of the word graph generated from paper titles containing the words “vis” and “web”. 21 graphs are shown for the years 1990 until 2010. A total of 264, 311 edges with weights of more than five are displayed.\nFrom ChordLink: A New Hybrid Visualization Model\n\n\n\nUntitled\n\n\nFig. 1. A CHORDLINK visualization of a co-authorship network. The drawing has four clusters, represented as chord diagrams. In each chord diagram, circular arcs of the same color are copies of the same author. For example, in the smallest cluster, F. Montecchiani has two (green) copies, each connected to some nodes external to the cluster.\nFrom Automatic Polygon Layout for Primal-Dual Visualization of Hypergraphs\n\n\n\nUntitled\n\n\nFig. 10. Paper and authorship data from the online database DBLP [26] for publications from 2013 to 2015 in IEEE Transactions on Pattern Analysis and Machine Intelligence. Each N-ary relationship is either a paper with N authors (left: the primal view) or an author with N papers (right: the dual view).\n== STOP RENDERING ==\nfrom Drawing Dynamic Graphs Without Timeslices\nInfoVis Co-Authorship (Discrete): a co-authorship network for papers published\nin the InfoVis conference from 1995 to 2015 [1]. Authors collaborating on a paper\nare connected in a clique at the time of publication of the paper. Note this is\nnot a cumulative network as authors can appear, disappear, and appear again.\nThe data is of discrete nature with exactly 21 timeslices (one per year).\nhttps://cs.swan.ac.uk/~dynnoslice/software.html\n\n\n\nUntitled\n\n\n^ not really a description of the graph\nfrom A Maxent-Stress Model for Graph Layout\n\n\n\nUntitled\n\n\nith the exception of graph gd, which is an author collaboration graph of the International Symposium on Graph Drawing between 1994 and 2007, the graphs used are from the University of Florida Sparse Matrix Collection [9]. Our selection covers a range of graph sizes, and includes mesh-like and other nonmesh graphs, and graphs from Brandes and Pich’s experimental study of distance scaling"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Collaboration Network 6062ff126f474a50b5f3dc9b945d43da.html#cpan-explorer-graphs",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Assorted Collaboration Network 6062ff126f474a50b5f3dc9b945d43da.html#cpan-explorer-graphs",
    "title": "1 Assorted Collaboration Network",
    "section": "4.3 CPAN-Explorer graphs",
    "text": "4.3 CPAN-Explorer graphs\nLink works, but subpages do not\nhttps://gephi.wordpress.com/2009/06/25/cpan-explorer-an-interactive-exploration-of-the-perl-ecosystem/"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/AT&T e86f130c42344169a9d75a61abc7e487.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/AT&T e86f130c42344169a9d75a61abc7e487.html",
    "title": "1 AT&T",
    "section": "",
    "text": "1 AT&T\nNote: Same as North DAG collection. Origin Notes: Originally collected by Stephen North at AT&T Bell Labs. The original link from 1995 is broken: ftp://ftp.research.att.com/dist/drawdag. Di Battista et al. modified the dataset by removing isomorphic graphs, connecting disconnected graphs, and removing cycles. graph features handled: acyclic, directed edges Graph features in papers: generic,large,directed edges,layered graphs,n-layers,DAG,hierarchical,layered graphs,n-layers,layered graphs,n-layers,generic,bipartite,layered graphs Origin Paper: Drawing Directed Acyclic Graphs: An Experimental Study (https://www.notion.so/Drawing-Directed-Acyclic-Graphs-An-Experimental-Study-7f730ceea4a744e08bf091e8c23e8a95?pvs=21) Originally found at: http://www.graphdrawing.org/data.html Size: 1277 graphs, 10 to 100 nodes, 9 to 241 edges Number of Graphs: 1277 format: GraphML Child collections: North DAGs (North%20DAGs%20a58f7143ef524c8a8c737df90162d3fb.md) Appeared in years: 2004,2005,2016,2018,2019,2011,1996,2017 Type of Collection: Uniform Benchmark is it stored properly?: No must be analyzed: Yes In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Drawing Large Graphs with a Potential-Field-Based Multilevel Algorithm (https://www.notion.so/Drawing-Large-Graphs-with-a-Potential-Field-Based-Multilevel-Algorithm-27a6b266bb2c4c92976ed04d2afe9bed?pvs=21), Simple and Efficient Bilayer Cross Counting (https://www.notion.so/Simple-and-Efficient-Bilayer-Cross-Counting-6f978d8b0ceb4a6eb7df52ed82999861?pvs=21), Drawing Large Graphs with a Potential-Field-Based Multilevel Algorithm (https://www.notion.so/Drawing-Large-Graphs-with-a-Potential-Field-Based-Multilevel-Algorithm-a4fe70c68ad64ed3849c47d95afc8798?pvs=21), An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs (https://www.notion.so/An-Experimental-Comparison-of-Fast-Algorithms-for-Drawing-General-Large-Graphs-bbb7bb7d51d84d109030dee3c06d895d?pvs=21), A Natural Quadratic Approach to the Generalized Graph Layering Problem (https://www.notion.so/A-Natural-Quadratic-Approach-to-the-Generalized-Graph-Layering-Problem-bc71a4b3349649668c28d843a3e69037?pvs=21), Advances in the Planarization Method: Effective Multiple Edge Insertions (https://www.notion.so/Advances-in-the-Planarization-Method-Effective-Multiple-Edge-Insertions-c518ce875daa4fe7b003ad506eb9a347?pvs=21), Large-Graph Layout with the Fast Multipole Multilevel Method (https://www.notion.so/Large-Graph-Layout-with-the-Fast-Multipole-Multilevel-Method-def1fdc467f441abb94868eccd8a5a34?pvs=21), A Flow Formulation for Horizontal Coordinate Assignment with Prescribed Width (https://www.notion.so/A-Flow-Formulation-for-Horizontal-Coordinate-Assignment-with-Prescribed-Width-e1369233a80f4ae8a1ffbedd48c05be2?pvs=21), Compact Layered Drawings of General Directed Graphs (https://www.notion.so/Compact-Layered-Drawings-of-General-Directed-Graphs-f985ab75f9cb40d382f62f61eeff25c7?pvs=21) cleaned format?: Yes duplicate?: No link works?: Yes Added in paper: Yes OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90e87803e0c0b04558c1f Origin paper plaintext: Drawing Directed Acyclic Graphs: An Experimental Study Page id: e86f130c42344169a9d75a61abc7e487 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d949574cf748107605564e OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96e3b1101aa0ea66a0c45 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d970d31101aa0ea36a0cb0 first look: No sparkline data: {‘min’: 10, ‘max’: 100, ‘step_size’: 5, ‘num_bins’: 21, ‘bins’: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], ‘num_nodes’: [0, 0, 282, 169, 191, 103, 81, 81, 81, 58, 24, 49, 41, 17, 12, 24, 16, 18, 14, 13, 3]} Related to Literature - Algorithm (Dataset tag relations) 1: Drawing Large Graphs with a Potential-Field-Based Multilevel Algorithm (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Drawing%20Large%20Graphs%20with%20a%20Potential-Field-Based%20%203c0831d7e44545b0894bb5b8a4aa8f54.md), An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20Experimental%20Comparison%20of%20Fast%20Algorithms%20for%20%20190e5036cf974a879b50614cfff525f1.md), Large-Graph Layout with the Fast Multipole Multilevel Method (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Large-Graph%20Layout%20with%20the%20Fast%20Multipole%20Multile%20b88c56b7799741ccbbb9d4f05ea8df4b.md), Compact Layered Drawings of General Directed Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Compact%20Layered%20Drawings%20of%20General%20Directed%20Graph%209591b47221954ff68fc0758e8e0a8dd8.md), A Flow Formulation for Horizontal Coordinate Assignment with Prescribed Width (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Flow%20Formulation%20for%20Horizontal%20Coordinate%20Assig%205274be7cd9aa4d90815f8958773c6fa7.md), A Natural Quadratic Approach to the Generalized Graph Layering Problem (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Natural%20Quadratic%20Approach%20to%20the%20Generalized%20Gr%20dcd688b1f87c44f28511297c3091f86e.md), Advances in the Planarization Method: Effective Multiple Edge Insertions (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Advances%20in%20the%20Planarization%20Method%20Effective%20Mul%20884c2bc419eb4197be261c1f1b3898ce.md), Simple and Efficient Bilayer Cross Counting (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Simple%20and%20Efficient%20Bilayer%20Cross%20Counting%20f879285ff264423cb974db4969614248.md), Drawing Directed Acyclic Graphs: An Experimental Study (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Drawing%20Directed%20Acyclic%20Graphs%20An%20Experimental%20St%201677531652194663b7fdf25025c61cc6.md), Measuring Symmetry in Drawings of Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Measuring%20Symmetry%20in%20Drawings%20of%20Graphs%203aac09f89def4584a9cddd63aa0d7efc.md)\n\n\n2 Body\n\nStatistics\n\n\n\nfour_in_one.svg\n\n\n\n\nDescriptions from Literature\nFrom “Drawing Directed Acyclic Graphs: An Experimental Study”:\n\nThe experimental study was performed on two different sets of DAGs, both with a strong connection to “real-life” applications. We considered two typical contexts where DAGs play a fundamental role, namely software engineering and project planning.\n\n\nThe first set of test DAGs are what we call the North DAGs. They are obtained from a collection of directed graphs [28], that North collected at AT&T Bell Labs by running for two years Draw DAG, an e-mail graph drawing service that accepts directed graphs formatted as e-mail messages and returns messages with the corresponding drawings [27].\n\n\nOriginally, the North DAGs consisted of 5114 directed graphs, whose number of vertices varied in the range 1 … 7602. However, the density of the directed graphs with a number of vertices that did not fall in the range 10 … 100 was very low (see also the statistics in [28]); since such directed graphs represent a very sparse statistical population we decided to discard them. Then we noted that many directed graphs were isomorphic; since the vertices of the directed graphs have labels associated with them, the problem is tractable. For each isomorphism class, we kept only one representative directed graph. Also, we deleted the directed graphs where subgraphs were specified as clusters, to be drawn in their own distinct rectangular region of the layout, because constrained algorithms are beyond the scope of this study. This filtering left us with 1277 directed graphs.\n\n\nStill, 491 directed graphs were not connected and this was a problem for running algorithms implemented in G D W (they assume input directed graphs to be connected). Instead of discarding the directed graphs, we followed a more practical approach, by randomly adding a minimum set of directed edges that makes each directed graph connected. Finally, we made the directed graph acyclic, where necessary, by applying some heuristics for inverting the direction of a small subset of edges.\n\n\nWe then ran a first set of experiments and produced the statistics by grouping the DAGs by number of vertices. Although the comparison among the algorithms looked consistent (the produced plots never oddly overlapped), each single plot was not satisfactory, because it showed peaks and valleys. We went back to study the test suite and observed that grouping them by number of vertices was not the best approach. In fact, the North DAGs come from very heterogeneous sources, mainly representing different phases of various software engineering projects; as a result, directed graphs with more or less the same number of vertices may be either very dense or very sparse.\n\n\nSince most of the analyzed quality measures strongly depend on the number of edges of the DAG (e.g. area, number of bends, and number of crossings), we decided that a better approach was to group the DAGs by number of edges. After some tests, we clustered the DAGs into nine groups, each with at least 40 DAGs, so that the number of edges in the DAGs belonging to group i, 1 ≤ i ≤ 9, is in the range 10 i … 10 i+9 (see Fig. 3). The resulting test suite consists of 1158 DAGs, each with edges in the range 10 … 99.\n\nFrom “Layer-Free Upward Crossing Minimization”:\n\nNorth DAGs. The North DAGs have been introduced in an experimental comparison of algorithms for drawing DAGs [Di Battista et al. 2000]. The benchmark set contains 1,158 DAGs collected by Stephen North, which were slightly modified by Di Battista et al. The graphs are grouped into nine sets, where set i contains graphs with 10 i to 10 i+9 arcs for i=1, …, 9.\n\n\n\nExample Figures\nFrom “Drawing Directed Acyclic Graphs: An Experimental Study”:\n\n\n\nUntitled\n\n\n\n\n\nUntitled\n\n\nFrom “A Natural Quadratic Approach to the Generalized Graph Layering Problem”:\n\n\n\nScreen Shot 2023-08-09 at 4.26.57 PM.png\n\n\nFrom “A Flow Formulation for Horizontal Coordinate Assignment with Prescribed Width”:\n\n\n\nScreen Shot 2023-08-09 at 4.24.19 PM.png"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Biological Pathways (KEGG) 6d302b16e7af4982a57c5b9aeecfe3b8.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Biological Pathways (KEGG) 6d302b16e7af4982a57c5b9aeecfe3b8.html",
    "title": "1 Biological Pathways (KEGG)",
    "section": "",
    "text": "1 Biological Pathways (KEGG)\nNote: The pathway data is separated by module, but the individual modules can be combined into a large graph as visualized at https://www.kegg.jp/kegg-bin/show_pathway?map01100 Origin Notes: According to https://www.kegg.jp/kegg-bin/show_pathway?map01100, “the KEGG PATHWAY database is a collection of manually drawn graphical diagrams, called KEGG pathway maps, for metabolic pathways, signaling pathways, pathways involved in various cellular processes and organismal systems, and perturbed pathways associated with human diseases.” graph features handled: clusters, directed edges, large, partition Graph features in papers: categorical nodes,clusters (pre-existing),labeled nodes Origin Paper: KEGG: Kyoto Encyclopedia of Genes and Genomes (https://www.notion.so/KEGG-Kyoto-Encyclopedia-of-Genes-and-Genomes-328d3a813a174805a37121dd63678b4d?pvs=21) Originally found at: https://www.kegg.jp/kegg/pathway.html#global Size: 47-292 nodes, 41-327 edges Number of Graphs: 13 Appeared in years: 2020 Type of Collection: Uniform Benchmark is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Multi-Level Area Balancing of Clustered Graphs (https://www.notion.so/Multi-Level-Area-Balancing-of-Clustered-Graphs-2d16323782f343ddbe5829efec909c74?pvs=21) cleaned format?: Yes duplicate?: No link works?: No Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90e80803e0c0b04558c14 Origin paper plaintext: KEGG: Kyoto Encyclopedia of Genes and Genomes Page id: 6d302b16e7af4982a57c5b9aeecfe3b8 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d948fe803e0c0c0c558b95 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96d6e1101aa0ea76a0be4 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d970ab4cf748115a055802 first look: No sparkline data: {‘min’: 47, ‘max’: 292, ‘step_size’: 50, ‘num_bins’: 6, ‘bins’: [0, 50, 100, 150, 200, 250], ‘num_nodes’: [2, 2, 3, 2, 2, 2]} Related to Literature - Algorithm (Dataset tag relations) 1: Multi-Level Area Balancing of Clustered Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Multi-Level%20Area%20Balancing%20of%20Clustered%20Graphs%201a25e529913b49e2acf235d5f3ec89bb.md)\n\n\n2 Body\n\nStatistics\n\n\n\nfour_in_one.svg\n\n\n\n\nDescriptions from Literature\nFrom “Multi-Level Area Balancing of Clustered Graphs”:\n\nKEGG Overview Pathway. Fig. 6 is the result of reproducing the KEGG overview pathway map using our approach. The color coding of the category here is directly retrieved from the original KEGG database [43], as similarly incorporated in Metabopolis [64] (see figures in supplementary materials, available online). We also set the same threshold for specifying unimportant vertices as in Metabopolis, so that readers can refer to the paper for comparison (Fig. 6). The advantage of this technique allows us to arrange the vertexts in a balanced fashion by pushing vertexts away from each other. This initially gives users an idea of how big each category is, and explicitly shows which reaction is classified under which category. Users can also identify sub-components effectively since those components with identical topological structures are aligned as neighbors. This also helps users to comprehend which structures are associated with certain types of pathways, such as small chains, stars, etc.\n\n\n\nExample Figures\nFrom “Multi-Level Area Balancing of Clustered Graphs”:\n\n\n\nScreen Shot 2023-01-25 at 10.50.53 AM.png\n\n\n=== STOP RENDERING ===\n\n\n\nScreen Shot 2023-01-25 at 10.52.55 AM.png\n\n\n\n\n\nUntitled"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Business Processes 9d09430927704fcf8fdf1ee4e00cabbc.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Business Processes 9d09430927704fcf8fdf1ee4e00cabbc.html",
    "title": "1 Business Processes",
    "section": "",
    "text": "1 Business Processes\nNote: Dataset links in supplemental materials are broken. After contacting the author, they mentioned that the other datasets were internal and could not be shared. Origin Notes: The Origin Paper collects various graphs from a few of sources. Some of these datasets are from international business process intelligence challenges, and others are specific processes from companies in a certain domain (hospital, road traffic management, pay processes, etc.). graph features handled: labeled nodes, layered graphs Graph features in papers: labeled nodes,layered graphs,n-layers Origin Paper: A Stable Graph Layout Algorithm for Processes (https://www.notion.so/A-Stable-Graph-Layout-Algorithm-for-Processes-35d585a25b63442b89c4977095ec923f?pvs=21) Originally found at: https://robinmennens.github.io/Portfolio/stableprocessgraphs.html Size: 13 graphs from 11 to 50 nodes and up to 772 edges Number of Graphs: 0 Appeared in years: 2019 Type of Collection: Lost/Unavailable is it stored properly?: No must be analyzed: No In repo?: No cleaned format?: No duplicate?: No link works?: No Added in paper: No Origin paper plaintext: A Stable Graph Layout Algorithm for Processes Page id: 9d09430927704fcf8fdf1ee4e00cabbc unavailable/skip: Yes Cleaned ALL data: No first look: Yes Related to Literature - Algorithm (Dataset tag relations) 1: A stable graph layout algorithm for processes (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20stable%20graph%20layout%20algorithm%20for%20processes%20c1a2e3baaf814eb7b38e3f4e8a553471.md)\n\n\n2 Body\n\nDescription From Literature\nFrom A stable graph layout algorithm for processes:\n\nWe use 13 datasets (see supplementary material), which represent real-world processes. For every dataset, we ran 500 tests on both methods. Each test involved a pair of randomly generated graphs  \\(G_1, G_2 \\subseteq \\bar{G}\\)  , which were obtained by randomly removing a subset of the edges \\(\\bar{E}\\) and then removing all nodes \\(n \\in \\bar{V}\\) that became disconnected. Consequently, \\(G_1\\) and \\(G_2\\) are random sub-graphs of \\(\\bar{G}\\) .\n\nTable from Supplementary Materials:\n\n\n\nUntitled\n\n\n\n\nExample Figures\nFrom A stable graph layout algorithm for processes:\n\n\n\nUntitled\n\n\n== STOP RENDERING ==\n“Hi! Thanks for reaching out! The dataset used is an internal one that I cannot share unfortunately. Some other datasets were public datasets and I think I did include urls in my references”\n-urls are broken"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Car Features 3365100498bc4a1eb77bcadcace2b2fa.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Car Features 3365100498bc4a1eb77bcadcace2b2fa.html",
    "title": "1 Car Features",
    "section": "",
    "text": "1 Car Features\nNote: Dataset is unavailable per the author. Origin Notes: The origin of this dataset is not disclosed by the author. Graph features in papers: clusters (pre-existing),multivariate,spatial Number of Graphs: 1 Appeared in years: 2011 Type of Collection: Lost/Unavailable is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): DICON: Interactive Visual Analysis of Multidimensional Clusters (https://www.notion.so/DICON-Interactive-Visual-Analysis-of-Multidimensional-Clusters-641ae65985524ca5abb9c9a90eb361a2?pvs=21) cleaned format?: No duplicate?: No link works?: No Added in paper: No Page id: 3365100498bc4a1eb77bcadcace2b2fa unavailable/skip: Yes Cleaned ALL data: No first look: Yes Related to Literature - Algorithm (Dataset tag relations) 1: DICON: Interactive Visual Analysis of Multidimensional Clusters (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/DICON%20Interactive%20Visual%20Analysis%20of%20Multidimensio%20c9dc02a2f0ed4cdf938e610c3945e465.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “DICON: Interactive Visual Analysis of Multidimensional Clusters”:\n\nWe applied DICON to a cars dataset which has also been used to evaluate both parallel coordinates (PCP) and scatter plot matrices (SPM) (see Fig. 8(a) and (b)). The cars dataset contains 407 cars described by 7 different dimensions from which we selected 5 quantitative dimensions as features. The two remaining dimensions, year and origin, were used as additional attributes.\n\n\n\nExample Figures\nFrom “DICON: Interactive Visual Analysis of Multidimensional Clusters”:\n\n\n\nIMG_0010.jpeg"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Co-Phylogenetic Trees 2440f3927d254148abd93168c1399b43.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Co-Phylogenetic Trees 2440f3927d254148abd93168c1399b43.html",
    "title": "1 Co-Phylogenetic Trees",
    "section": "",
    "text": "1 Co-Phylogenetic Trees\nNote: Each element of the data set is two binary co-phylogentic trees. “Caryophyllaceae & Microbotryum” and “Stinkbugs & Bacteria” are missing but our dataset includes all other files from “https://doi.org/10.1007/978-3-319-73915-1_27”. An additional dataset from “https://almob.biomedcentral.com/articles/10.1186/s13015-014-0031-3”, called “Wolbachia”, is included. Origin Notes: Collected by the authors of “https://almob.biomedcentral.com/articles/10.1186/s13015-014-0031-3”. graph features handled: trees Graph features in papers: binary trees,trees Origin Paper: EUCALYPT: efficient tree reconciliation enumerator (https://www.notion.so/EUCALYPT-efficient-tree-reconciliation-enumerator-fb8986c3955845d6b05b5df381305502?pvs=21) Originally found at: https://gitlab.inria.fr/erable/eucalypt/-/blob/master/html/PaperDatasets.zip Size: 13-773 nodes, 12-772 edges Number of Graphs: 30 Appeared in years: 2017 Type of Collection: Uniform Benchmark is it stored properly?: No must be analyzed: Yes In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Visualizing Co-phylogenetic Reconciliations (https://www.notion.so/Visualizing-Co-phylogenetic-Reconciliations-3f8b94b104d94e498eb0eeb1ec687f1f?pvs=21) cleaned format?: Yes duplicate?: No link works?: No Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90ee40c2b4d0d2e3862b7 Origin paper plaintext: EUCALYPT: efficient tree reconciliation enumerator Page id: 2440f3927d254148abd93168c1399b43 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d948a24cf748105905574b OSF link gml: https://osf.io/download/m9wf2/ OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d970c00c2b4d0f5d3862a4 first look: No sparkline data: {‘min’: 13, ‘max’: 773, ‘step_size’: 100, ‘num_bins’: 8, ‘bins’: [0, 100, 200, 300, 400, 500, 600, 700], ‘num_nodes’: [23, 5, 0, 0, 0, 0, 0, 2]} Related to Literature - Algorithm (Dataset tag relations) 1: Visualizing Co-phylogenetic Reconciliations (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Visualizing%20Co-phylogenetic%20Reconciliations%20fd4b98c0071f4e96924bacd938e706b5.md)\n\n\n2 Body\n\nStatistics\n\n\n\nfour_in_one.svg\n\n\n\n\nDescriptions from Literature\nFrom “EUCALYPT: efficient tree reconciliation enumerator”:\n\nTo test EUCALYPT, we selected 12 datasets from the literature. As we are mostly interested in host-parasite systems, the first 10 datasets concern such relations: EC Encyrtidae & Coccidae [23], GL Gopher & Lice [24], SC Seabirds & Chewing Lice [25], RP Rodents & Pinworms [26], SCF Smut Fungi & Caryophillaceus plants [27], PLML Pelican Lice ML [28] (the trees are generated through a maximum likelihood approach), PLMP Pelican Lice MP [28] (the trees are generated through a maximum parsimony approach), RH Rodents & Hantaviruses [29], PP Primates & Pinworm [30], and FD Fishs and Dactylogyrus [31].\n\n\nIn addition, we used a dataset of our own which corresponds to arthropod hosts and a bacterium genus, Wolbachia, living inside the cells of their hosts [32,33]. The datasets were chosen to provide a variety in terms of size of the host and parasite trees: those from the literature are relatively small (from 7 to 100 leaves), while our own data provide an example of much bigger host and parasite trees, each having 387 leaves. Moreover, we were careful that the selected datasets cover, as much as possible, a range of situations in terms of coevolution and of the expected frequencies of each event\n\n\n\nExample Figures\nFrom “Visualizing Co-phylogenetic Reconciliations”:\n\n\n\nScreen Shot 2023-08-15 at 10.50.19 AM.png\n\n\n\n\n\nScreen Shot 2023-08-15 at 10.50.09 AM.png\n\n\n\n\n\nScreen Shot 2023-08-15 at 10.49.57 AM.png\n\n\n=== STOP RENDERING ===\nfrom Visualizing Co-phylogenetic Reconciliations Eucalypt tool (Donati, B., Baudet, C., Sinaimeri, B., Crescenzi, P., Sagot, M.F.: EUCALYPT: efficient tree reconciliation enumerator. Algorithms Mol. Biol. 10(1), 3 (2015)), trees from a bioinfromatics journal (Wieseke, N., Hartmann, T., Bernt, M., Middendorf, M.: Cophylogenetic reconcil- iation with ILP. IEEE/ACM Trans. Comput. Biol. Bioinform. 12(6), 1227–1235 (2015))\nFigure below: An HP-drawing of a reconciliation of Gopher & Lice drawn by SearchMaximalPlanar. (2) The same instance drawn by ShortenHostSwitch.\n\n\n\nUntitled\n\n\n\n\n\nevolu.png"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Complete Graphs 202f26621cf34604935433a41b130f10.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Complete Graphs 202f26621cf34604935433a41b130f10.html",
    "title": "1 Complete Graphs",
    "section": "",
    "text": "1 Complete Graphs\nNote: The linked dataset includes both the complete graphs \\(K_n\\) for \\(5≤n≤50\\) and the complete bipartite graphs \\(K_{n_1,n_2}\\) for \\(5≤n1,n2≤40\\). Crossing number is conjectured for most of these, and while not proven, we found these used in papers to validate minimum crossing numbers. We also note that the papers in our literature review did not provide example figures. Origin Notes: Source code and data are not provided, but the graphs are well known and can be generated easily. graph features handled: bipartite, generic, known crossing number Graph features in papers: generic Size: 5-80 nodes, 10-1600 edges Number of Graphs: 1342 Appeared in years: 2019 Type of Collection: Uniform Benchmark is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): An effective crossing minimisation heuristic based on star insertion (https://www.notion.so/An-effective-crossing-minimisation-heuristic-based-on-star-insertion-888933e03a604489ada5360688abe597?pvs=21) cleaned format?: Yes duplicate?: No link works?: No Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90ebb94a6be0ec012e7e6 Page id: 202f26621cf34604935433a41b130f10 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d94965803e0c0c10558bc8 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d94db50c2b4d0ea1386352 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d972030c2b4d0f5d3862dc first look: No sparkline data: {‘min’: 5, ‘max’: 80, ‘step_size’: 3, ‘num_bins’: 27, ‘bins’: [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78], ‘num_nodes’: [0, 1, 3, 6, 15, 24, 33, 42, 51, 60, 69, 78, 87, 96, 105, 108, 99, 87, 78, 69, 60, 51, 42, 33, 24, 15, 6]} Related to Literature - Algorithm (Dataset tag relations) 1: An effective crossing minimisation heuristic based on star insertion (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20effective%20crossing%20minimisation%20heuristic%20based%205fde465c129249599b79396bf3d3ae04.md)\n\n\n2 Body\n\nStatistics\n\n\n\nfour_in_one.svg\n\n\n\n\nDescriptions from Literature\nFrom “An effective crossing minimisation heuristic based on star insertion”:\n\nComplete graphs - Although the crossing number of the complete graph \\(K_n\\) is not known for for \\(n ≥ 13\\), the value is conjectured, and typically assumed to be correct. We compare the nine combinations of schemes to see how close to the conjectured value each of them is able to get, for various sizes of complete graphs up to \\(n = 50\\). We indicate how many crossings are obtained after the initial embedding, as well as at the conclusion of the heuristic. We also provide the runtimes, again separated into time spent producing the initial embedding, and time spent in the main loop of the heuristic.\n\n\nComplete bipartite graphs - Much like the complete graphs, the crossing number of the complete bipartite graph \\(K_{n1,n2}\\) is only known in general for \\(n_1 ≤ 6\\), but the value is conjectured and typically assumed to be correct. Again, we compare the nine combinations of schemes to see how close to the conjectured value they can get for values up to \\(n_1,n_2 = 40\\), and report the same data as for the Complete graphs.\n\n\nThe crossing number of the complete graph \\(K_n\\) is conjectured (e.g. see Guy [25]) to be equal to \\(H(n) := 1/4 \\left\\lfloor n/2\\right\\rfloor \\left\\lfloor (n − 1)/2\\right\\rfloor \\left\\lfloor(n − 2)/2\\right\\rfloor \\left\\lfloor (n − 3)/2\\right\\rfloor\\). Although this conjecture is widely believed to be correct, it has only been confirmed for \\(n ≤ 12\\) despite considerable effort to extend the results further [30]. We ran the graphs \\(K_n\\) for \\(5 ≤ n ≤ 50\\). Each graph was run with 100 random permutations and the minimum found solution was compared to \\(H(n)\\) by computing the percent relative deviation from \\(H(n)\\)… For these graphs, we observe that when \\(n\\) was odd, every scheme combination was able to obtain a drawing with \\(H(n)\\) crossings. However, when \\(n\\) was even, each scheme reached a value which was usually very close but not equal to \\(H(n)\\).\n\n\nThe crossing number of the complete bipartite graph \\(K_{n_1,n_2}\\) is conjectured (e.g. see Zarankiewicz [35]) to be equal to \\(Z(n_1, n_2) := \\left\\lfloor n_1/2\\right\\rfloor \\left\\lfloor (n_1 − 1)/2\\right\\rfloor \\left\\lfloor n_2/2\\right\\rfloor \\left\\lfloor (n_2 − 1)/2\\right\\rfloor\\). We ran the graphs \\(K_{n_1,n_2}\\) for \\(5 ≤ n1 ≤ n2 ≤ 40\\). Each graph was run with 100 random permutations and the minimum found solution was compared to \\(Z(n_1,n_2)\\)… As can be seen in Table 6, QuickCross was successful in obtaining the conjectured optimum in all cases and for all scheme combinations, except \\(K_{30,30}\\) and \\(K_{40,40}\\)"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Debates 54eb2cd4ba2c48eb945bd49e5f4bbf4f.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Debates 54eb2cd4ba2c48eb945bd49e5f4bbf4f.html",
    "title": "1 Debates",
    "section": "",
    "text": "1 Debates\nNote: The authors did not respond to requests to make this dataset available. While the debate transcripts are publicly available, the entity relationship data generated in “https://doi.org/10.1111/cgf.13181” is not. Origin Notes: Created by researchers at the University of Konstanz for the LingVis framework (https://lingvis.io/) and VisArgue project (http://www.visargue.uni-konstanz.de/en/). First appeared in “https://doi.org/10.1111/cgf.13181”. graph features handled: categorical nodes, directed edges, edge weighted, labeled nodes, multigraph Graph features in papers: categorical nodes,directed edges,labeled nodes,weighted edges Origin Paper: NEREx: Named-Entity Relationship Exploration in Multi-Party Conversations (https://www.notion.so/NEREx-Named-Entity-Relationship-Exploration-in-Multi-Party-Conversations-12a40012aece4cec81a8a2714c38d6cf?pvs=21) Appeared in years: 2017 Type of Collection: Lost/Unavailable is it stored properly?: No must be analyzed: No In repo?: No cleaned format?: No duplicate?: No link works?: No Added in paper: No Origin paper plaintext: NEREx: Named-Entity Relationship Exploration in Multi-Party Conversations Page id: 54eb2cd4ba2c48eb945bd49e5f4bbf4f unavailable/skip: Yes Cleaned ALL data: No first look: Yes Related to Literature - Algorithm (Dataset tag relations) 1: NEREx: Named-Entity Relationship Exploration in Multi-Party Conversations (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/NEREx%20Named-Entity%20Relationship%20Exploration%20in%20Mul%200c839bcf912a474595a556b7791ff4c2.md)\n\n\n2 Body\n\nDescription from Literature\nFrom “NEREx: Named-Entity Relationship Exploration in Multi-Party Conversations”:\n\nIn order to explore the relations between entities, we use a distance-restricted model for creating entity-pairs. As described in Section 2, prior work considers relations between entities either as semantic relations based on linguistic knowledge or regards two entities as related due to their presence in the same document. The often ungrammatical structure of utterances in verbatim text transcripts (including non-standard lexical items, syntactic patterns, interruptions, repetitions, and crosstalk) requires a simple extralinguistic model. To overcome these limitations, we introduce a model that bounds the scope in which we consider two entities to be related, using a distance threshold (maxDist). Our method creates a pair of entities if the entities appear in the same sentences within maxDist words of one another.\n\n\nHowever, not only are frequent entity-pairs important, but also pairs that are semantically similar (e.g., cut $5 trillion, cut $4 trillion). These often present opposing speaker opinions about a given topic. To maximize the chance that entity-pairs represent true semantic relations, we set the default value of maxDist to a low value (5 words). To vary the granularity of the analysis, the parameter can be changed interactively depending on the analysis task and data. Nevertheless, some infrequent longer-distance entity-pairs are discovered which do not represent salient relations. To reduce their impact, we calculate the average observed distance (in words) for each entity pair. We use both frequency and average distance in the visualization to reflect the strength of the entity-pair.\n\n\n\nExample Figures\nFrom “NEREx: Named-Entity Relationship Exploration in Multi-Party Conversations”:\n\n\n\ncgf13181-fig-0004-m.jpg\n\n\nEntity graph of the first first presidential debate between Trump and Clinton\n\n\n\ncgf13181-fig-0006-m.jpg\n\n\nEntity graph of the same debate, focusing on the concept of taxes"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/FM3 b3dc638f5d7541b8b01105483c356e11.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/FM3 b3dc638f5d7541b8b01105483c356e11.html",
    "title": "1 FM3",
    "section": "",
    "text": "1 FM3\nNote: FM3 contains trees, path graphs, cycle graphs, scale-free graphs, caterpillar graphs, planar graphs, and general graphs (connected simple graphs, generated with uniform probability distribution). Nonetheless, download links to data are broken. Origin Notes: The dataset was generated by the authors of “https://doi.org/10.1007/978-3-319-53925-6_11”. graph features handled: generic, planar, trees Graph features in papers: generic Originally found at: http://www.felicedeluca.com/ply/data.html (broken) Appeared in years: 2017 Type of Collection: Lost/Unavailable is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): An Interactive Tool to Explore and Improve the Ply Number of Drawings (https://www.notion.so/An-Interactive-Tool-to-Explore-and-Improve-the-Ply-Number-of-Drawings-9141cfad08234c60a979ca207ada6a86?pvs=21) cleaned format?: No duplicate?: No link works?: No Added in paper: No Page id: b3dc638f5d7541b8b01105483c356e11 unavailable/skip: Yes Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: An Interactive Tool to Explore and Improve the Ply Number of Drawings (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20Interactive%20Tool%20to%20Explore%20and%20Improve%20the%20Ply%20b8be8d1a88824561bc30d154b8a4603e.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “An Experimental Study on the Ply Number of Straight-Line Drawings”:\n\nGraph Datasets. To understand whether the experimental results are influenced by the structure of the graph we considered several graph families. All graphs are of small or medium size, expressed as the number of their vertices. In some cases, the size and the number of instances used for each graph family depends on the type of question we want to answer (see Sect. 5 for details). We used the following datasets: Trees. Generated with uniform probability distribution using Pru ̈fer sequences [28]. Planar. Connected simple planar graphs, generated with the OGDF library [6]. General. Connected simple graphs, generated with uniform probability distribution. Scale-free. Scale-free graphs, generated according to the Barabasi-Albert model [2]. Caterpillars. Each caterpillar of n vertices is generated by first creating a path (spine of the caterpillar) of length \\(k\\in [ \\frac{n}{4} , \\frac{n}{2} ]\\) (randomly chosen), and attaching each remaining vertex to a randomly selected vertex of the spine. Paths, Cycles. For each desired number of vertices n, there is only one (unlabeled) path and one (unlabeled) cycle of n vertices. k-ary Trees. Rooted trees where each node has either 0 or k children. Each tree is generated by starting with a single vertex and then creating k children of a randomly selected leaf, until the desired number n of vertices is achieved. When n cannot be obtained, we use a value close to it.\n\nFrom “An Interactive Tool to Explore and Improve the Ply Number of Drawings”:\n\nFM3data contains 50 caterpillars with 250 to 450 vertices… FM3data also contains planar graphs ranging from 250 to 400 vertices and a density ranging from 1.5 to 2… The remaining subset of FM3data consists of general graphs with 250 to 450 vertices and the densities 1.5 and 2.5.\n\n\n\nExample Figures\nFrom “An Experimental Study on the Ply Number of Straight-Line Drawings”:\n\n\n\nScreen Shot 2023-08-16 at 3.26.01 PM.png\n\n\n=== STOP RENDERING ===\nDownload links seem to be broken… 😓 in website"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Graphviz Examples e90aec42f02c4e8b8a6b8727fe2f86ae.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Graphviz Examples e90aec42f02c4e8b8a6b8727fe2f86ae.html",
    "title": "1 Graphviz Examples",
    "section": "",
    "text": "1 Graphviz Examples\nNote: Example graphs used to generate images with the https://www.graphviz.org for their https://www.graphviz.org/gallery/. Origin Notes: The graphs have various origins, most of which are described on the Graphviz https://www.graphviz.org/gallery/. graph features handled: clusters, directed edges, labeled nodes, layered graphs Graph features in papers: layered graphs,n-layers,large,generic Origin Paper: An open graph visualization system and its applications to software engineering (https://www.notion.so/An-open-graph-visualization-system-and-its-applications-to-software-engineering-f85328b544b744969aedaf56b21d25a5?pvs=21) Originally found at: https://gitlab.com/graphviz/graphviz/-/tree/main/tests/graphs Size: 1-1464 nodes, 0-5806 edges Number of Graphs: 195 Child collections: Control Flow Graphs (Control%20Flow%20Graphs%20af079f199a2c402d8633f6d41101934b.md) Appeared in years: 2010,2016,2023 Type of Collection: Uniform Benchmark is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Node Overlap Removal by Growing a Tree (https://www.notion.so/Node-Overlap-Removal-by-Growing-a-Tree-534753c850d64167892bde314403e2d6?pvs=21), Optimal k-level planarization and crossing minimization (https://www.notion.so/Optimal-k-level-planarization-and-crossing-minimization-97c176b0cca14663a27827f2f68f6478?pvs=21) cleaned format?: Yes duplicate?: No link works?: No Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90ea91101aa0c9e6a0c97 Origin paper plaintext: An open graph visualization system and its applications to software engineering Page id: e90aec42f02c4e8b8a6b8727fe2f86ae unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d948d60c2b4d0e8d38620a OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96ce394a6be111712e991 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d970e60c2b4d0f65386519 first look: No sparkline data: {‘min’: 1, ‘max’: 1464, ‘step_size’: 50, ‘num_bins’: 30, ‘bins’: [0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400, 1450], ‘num_nodes’: [169, 11, 6, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 2]} Related to Literature - Algorithm (Dataset tag relations) 1: Optimal k-level planarization and crossing minimization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Optimal%20k-level%20planarization%20and%20crossing%20minimiz%204b0f5887f98f4b95acccc354d6f9e518.md), Node Overlap Removal by Growing a Tree (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Node%20Overlap%20Removal%20by%20Growing%20a%20Tree%20c69ee6ac8232493b9f8d26ed56235a6b.md), FORBID: Fast Overlap Removal by Stochastic GradIent Descent for Graph Drawing (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/FORBID%20Fast%20Overlap%20Removal%20by%20Stochastic%20GradIent%20b58c9e4a77174a48b0c023b62f66c6d7.md)\n\n\n2 Body\n\nStatistics\n\n\n\nfour_in_one.svg\n\n\n\n\nDescriptions from Literature\nFrom “Node Overlap Removal by Growing a Tree”:\n\nOur data includes the same set of graphs that was used by the authors of PRISM to compare it with other algorithms [6]. The dataset is available in the Graphviz open source package.\n\nFrom “Optimal k-level planarization and crossing minimization”:\n\nThe first set of graphs are all the hierarchical network diagrams appearing in the GraphViz gallery [3]… Table 1 shows the results of minimizing edge crossings and maximizing planar subgraphs with MIP and SAT solvers, as well as the crossings resulting in the Graphviz heuristic layout for graphs from the GraphViz gallery.\n\n\n\nExample Figures\nFrom “Node Overlap Removal by Growing a Tree”:\n\n\n\nScreen Shot 2023-08-16 at 3.44.08 PM.png\n\n\n\n\n\nScreen Shot 2023-08-16 at 3.44.43 PM.png\n\n\nFrom “FORBID: Fast Overlap Removal by Stochastic GradIent Descent for Graph Drawing”:\n\n\n\nScreen Shot 2023-08-16 at 3.50.39 PM.png\n\n\nFrom “Optimal k-level planarization and crossing minimization”:\n\n\n\nScreen Shot 2023-08-16 at 3.35.58 PM.png"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Investment Interdependence 141028dac1c34b6dbb69710ea5c7ee10.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Investment Interdependence 141028dac1c34b6dbb69710ea5c7ee10.html",
    "title": "1 Investment Interdependence",
    "section": "",
    "text": "1 Investment Interdependence\nOrigin Notes: Data collected in a survey of Ohio State University students by D. W. Malone. Students were presented with two potential obstacles to investment in Columbus, Ohio’s business district and asked, “does obstacle A aggravate or intensify obstacle B?” graph features handled: directed edges, hierarchical Graph features in papers: hierarchical,layered graphs,n-layers Origin Paper: An introduction to the application of interpretive structural modeling (https://www.notion.so/An-introduction-to-the-application-of-interpretive-structural-modeling-6d2f2dbeecb94b9b833cc24ed98bacc2?pvs=21) Size: 25 nodes, 30 edges Number of Graphs: 1 Appeared in years: 1981 Type of Collection: Single Graph is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Methods for Visual Understanding of Hierarchical System Structures (https://www.notion.so/Methods-for-Visual-Understanding-of-Hierarchical-System-Structures-a2e509205d5b43bdb34e3546524290f1?pvs=21) cleaned format?: Yes duplicate?: No link works?: No Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90e6794a6be0ebd12e705 Origin paper plaintext: An introduction to the application of interpretive structural modeling Page id: 141028dac1c34b6dbb69710ea5c7ee10 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d949164cf7481076055631 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96e4d803e0c0caf558b9f OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d97042803e0c0cb3558c35 first look: Yes sparkline data: {‘min’: 0, ‘max’: 6, ‘step_size’: 1, ‘num_bins’: 7, ‘bins’: [0, 1, 2, 3, 4, 5, 6], ‘node_degree’: [3, 3, 5, 11, 2, 0, 1]} Related to Literature - Algorithm (Dataset tag relations) 1: Methods for Visual Understanding of Hierarchical System Structures (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Methods%20for%20Visual%20Understanding%20of%20Hierarchical%20S%208a4e07b400c5404f977451abad2f296d.md)\n\n\n2 Body\n\nStatistics\n\n\n\ntwo_in_one.svg\n\n\n\n\nDescription from Literature\nFrom Methods for Visual Understanding of Hierarchical System Structures:\n\nPresented in Fig. 5 are drawings of the nine-level hierarchy which appeared in Malone [11] and represent the interdependence of obstacles to investment in the Columbus, Ohio, central business district.\n\n\n\nExample Figures\nFrom Methods for Visual Understanding of Hierarchical System Structures:\n\n\n\nUntitled\n\n\nFig. 5. (cropped): Maps of the nine-level hierarchy [11]. (a) Initial. (b) BC + QP methods (c = 1.0). (c) BC + QP methods (cL= 0.5). (d) BC + QP methods (c = 0.05). (e) BC + PR methods."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Mathematics Genealogy 081ba4645aac48c19719b16033c637f3.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Mathematics Genealogy 081ba4645aac48c19719b16033c637f3.html",
    "title": "1 Mathematics Genealogy",
    "section": "",
    "text": "1 Mathematics Genealogy\nNote: Refer to the https://mathgenealogy.org/contact.php for the data, which consists of doctoral graduates in mathematics and some adjacent fields, alongside properties like the degree granting institution and tittle of thesis. Entries also have relations based on advisors. Origin Notes: Database from a project started by Harry Coonce and now supported by the North Dakota State University. graph features handled: dynamic, nonplanar, temporal, tree-like Graph features in papers: dynamic,dynamic (discrete) Origin Paper: The Mathematics Genealogy Project (https://www.notion.so/The-Mathematics-Genealogy-Project-c75a9e7eb263423c9d8ad1be3e898095?pvs=21) Originally found at: https://genealogy.math.ndsu.nodak.edu/ Size: 291014 records as of May 2023. In 2016 the graph consisted of 200037 nodes with 3.8% percent of them being isolated, and 1962 components of size two. The largest component contained 180094 nodes. Number of Graphs: 0 Appeared in years: 2023 Type of Collection: Lost/Unavailable is it stored properly?: No must be analyzed: No In repo?: No cleaned format?: No duplicate?: No link works?: Yes Added in paper: No Origin paper plaintext: The Mathematics Genealogy Project Page id: 081ba4645aac48c19719b16033c637f3 unavailable/skip: No Cleaned ALL data: No first look: Yes Related to Literature - Algorithm (Dataset tag relations) 1: Visualizing Evolving Trees (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Visualizing%20Evolving%20Trees%203596f84acbbe46799f4f093af2f28aae.md)\n\n\n2 Body\n\nDescription from Literature\nFrom “Visualizing Evolving Trees”:\n\nThe Mathematics Genealogy: shows advisor-advisee relationships in the world of mathematics, stretching back to the middle ages [36]. The dataset includes the thesis titles, students, advisors, dates, and number of descendants. The total number of nodes is around 260,000 and is continuously updated. While this data is not quite a tree (or even connected, or planar), we extract a subset to create a tree with 500 nodes. The maximum node degree of this tree is 5 and the radius is 14.\n\n\n\nExample Figures\nFrom The Mathematics Genealogy Project:\n\n\n\nUntitled\n\n\nFrom “Visualizing Evolving Trees”:\n\n\n\nUntitled\n\n\nFig. 4: Layouts from DynNoSlice, DynaGraph, Dagre, Radial, ImPrEd, DynaCola and DynaSafe of the same evolving math genealogy tree; each row adds six new nodes.\n== STOP RENDERING ==\nhttps://github.com/abureyanahmed/evolving_tree/tree/main/dataset\nThey make you request the data individually and in the linked form they have a note about not redistributing data:\nmgp-permission-agreement.pdf\n\n\n\nUntitled\n\n\nreached out to them 5/18/2023\nIt is non-planar because multiple advisors can advise the same person or a person can have multiple advisors! Infact, there is a K3,3 in it\nIn July 2016, Cosmin Ionita and Pat Quillen of MathWorks used MATLAB to analyze the Math Genealogy Project graph. At the time, the genealogy graph contained 200,037 vertices. There were 7639 (3.8%) isolated vertices and 1962 components of size two (advisor-advisee pairs where we have no information about the advisor). The largest component of the genealogy graph contained 180,094 vertices, accounting for 90% of all vertices in the graph. The main component has 7323 root vertices (individuals with no advisor) and 137,155 leaves (mathematicians with no students), accounting for 76.2% of the vertices in this component. The next largest component sizes were 81, 50, 47, 34, 34, 33, 31, 31, and 30. For historical comparisonn, we also have data from June 2010, when Professor David Joyner of the United States Naval Academy asked for data from our database to analyze it as a graph. At the time, the genealogy graph had 142,688 vertices. Of these, 7,190 were isolated vertices (5% of the total). The largest component had 121,424 vertices (85% of the total number). The next largest component had 128 vertices. The next largest component sizes were 79, 61, 45, and 42. The most frequent size of a nontrivial component was 2; there were 1937 components of size 2. The component with 121,424 vertices had 4,639 root verticies, i.e., mathematicians for whom the advisor is currently unknown.\nThe Mathematics Genealogy Project graph is nonplanar. Thanks to Professor Ezra Brown of Virginia Tech for assisting in finding the subdivision of K3,3 depicted below. The green vertices form one color class and the yellow ones form the other. Interestingly, Gauß is the only vertex that needs to be connected by paths with more than one edge."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Medical Patient Records 9bb4f4fc1e8242b2905eb286a0e00143.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Medical Patient Records 9bb4f4fc1e8242b2905eb286a0e00143.html",
    "title": "1 Medical Patient Records",
    "section": "",
    "text": "1 Medical Patient Records\nNote: Dataset was not found. Graph features in papers: clusters (pre-existing),multivariate,spatial Appeared in years: 2011 Type of Collection: Lost/Unavailable is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): DICON: Interactive Visual Analysis of Multidimensional Clusters (https://www.notion.so/DICON-Interactive-Visual-Analysis-of-Multidimensional-Clusters-641ae65985524ca5abb9c9a90eb361a2?pvs=21) cleaned format?: No duplicate?: No link works?: No Added in paper: No Page id: 9bb4f4fc1e8242b2905eb286a0e00143 unavailable/skip: Yes Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: DICON: Interactive Visual Analysis of Multidimensional Clusters (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/DICON%20Interactive%20Visual%20Analysis%20of%20Multidimensio%20c9dc02a2f0ed4cdf938e610c3945e465.md)\n\n\n2 Body\n\nDescription from Literature\nFrom “DICON: Interactive Visual Analysis of Multidimensional Clusters”:\n\nWe also applied DICON within the healthcare domain to visualize a dataset containing more than 10,000 patient records. The data includes claims, labs, pharmacy, and patient profile information. To augment this data, we applied a patient similarity algorithm to compute patient similarity scores across multiple dimensions (e.g., diagnoses, lab results, etc.). We also indexed the patient records to make the data searchable.\n\n\n\nExample Figures\nFrom “DICON: Interactive Visual Analysis of Multidimensional Clusters”:\n\n\n\nUntitled\n\n\n\n\n\nUntitled\n\n\n=== STOP RENDERING ===\nReached out to authors? ← saw this note but not Connor nor I"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Network Repository 8d5eb290b4274266986c4d4e98c7dc34.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Network Repository 8d5eb290b4274266986c4d4e98c7dc34.html",
    "title": "1 Network Repository",
    "section": "",
    "text": "1 Network Repository\nNote: Graphs in this repository are tagged with their real-world source, have in-depth analysis, and even a preview visualization of each individual graph. Types of graphs include social networks, infrastructure networks, biological networks, and many others. The repository also offers sources for individual graphs. It contains many graphs from other benchmark sets described here. Origin Notes: This repository was proposed in 2015 by Rossi and Ahmed of Purdue University as a visually interactive real world graph tool and database. graph features handled: categorical nodes, directed edges, dynamic, edge weighted, generic, labeled nodes, large, sparse, spatial, temporal Graph features in papers: generic,large Origin Paper: The Network Data Repository with Interactive Graph Analytics and Visualization (https://www.notion.so/The-Network-Data-Repository-with-Interactive-Graph-Analytics-and-Visualization-0f75154d4bf64f4b8a3c13dbddd671d4?pvs=21) Originally found at: https://networkrepository.com/ Number of Graphs: 6659 Appeared in years: 2017,2016 Type of Collection: Established Network Repo (No report) is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): Drawing Big Graphs Using Spectral Sparsification (https://www.notion.so/Drawing-Big-Graphs-Using-Spectral-Sparsification-89da2043d0444f75a6c663b1fc999512?pvs=21), A Distributed Multilevel Force-Directed Algorithm (https://www.notion.so/A-Distributed-Multilevel-Force-Directed-Algorithm-9d7a1734402948ecba4995ca617489ff?pvs=21) cleaned format?: No duplicate?: No link works?: No Added in paper: Yes Origin paper plaintext: The Network Data Repository with Interactive Graph Analytics and Visualization Page id: 8d5eb290b4274266986c4d4e98c7dc34 unavailable/skip: Yes Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: Drawing Big Graphs Using Spectral Sparsification (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Drawing%20Big%20Graphs%20Using%20Spectral%20Sparsification%20e5d3efdca48541f2b1789ec74357ebf6.md), A Distributed Multilevel Force-Directed Algorithm (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Distributed%20Multilevel%20Force-Directed%20Algorithm%200a5a2af21adb4edbbc41684e61b3db32.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “A Distributed Multilevel Force-Directed Algorithm”:\n\nTo evaluate the running time of MULTI-GILA, we used the REALGRAPHS and BIGGRAPHS benchmarks, which contain larger graphs extracted from both real-world applications and synthetic generators; see Table 4. The REALGRAPHS set includes the 5 largest real-world graphs (mainly scale-free graphs) used in the experimental study of GILA [5]. These graphs are taken from the Stanford Large Networks Dataset Collection [3] and from the Network Data Repository [46], and their number of edges is between 121523 and 1541514.\n\nFrom “Drawing Big Graphs Using Spectral Sparsification”:\n\nWe used three data sets. The first set of graphs is taken from “defacto-benchmark” graphs, including the Hachul library, Walshaw’s Graph Partitioning Archive, the sparse matrices collection [6] and the network repository [24]. These include two types of graphs that have been extensively studied in graph drawing research: grid-like graphs and scale-free graphs.\n\n\n\nExample Figures"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/North DAGs a58f7143ef524c8a8c737df90162d3fb.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/North DAGs a58f7143ef524c8a8c737df90162d3fb.html",
    "title": "1 North DAGs",
    "section": "",
    "text": "1 North DAGs\nNote: See AT&T Origin Notes: See AT&T graph features handled: acyclic, directed edges Graph features in papers: directed edges,layered graphs,n-layers,planar,generic,directed edges Origin Paper: Drawing Directed Acyclic Graphs: An Experimental Study (https://www.notion.so/Drawing-Directed-Acyclic-Graphs-An-Experimental-Study-7f730ceea4a744e08bf091e8c23e8a95?pvs=21) Originally found at: See AT&T Size: See AT&T Child collections: AT&T (AT&T%20e86f130c42344169a9d75a61abc7e487.md) Appeared in years: 2008,2016,2018,2021,1996,2022 Type of Collection: Uniform Benchmark is it stored properly?: No must be analyzed: Yes In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Placing Arrows in Directed Graph Drawings (https://www.notion.so/Placing-Arrows-in-Directed-Graph-Drawings-19300526a30441ff919001bf591b6711?pvs=21), A Greedy Heuristic for Crossing-Angle Maximization (https://www.notion.so/A-Greedy-Heuristic-for-Crossing-Angle-Maximization-3570c65b497c41e999463e9addefca2e?pvs=21), Layer-Free Upward Crossing Minimization (https://www.notion.so/Layer-Free-Upward-Crossing-Minimization-74e10beabfcd4c5c86314a0ccd287610?pvs=21), ? Aesthetic Discrimination of Graph Layouts (https://www.notion.so/Aesthetic-Discrimination-of-Graph-Layouts-98cc70abc7424e7895cf73e988563219?pvs=21), Drawing Directed Acyclic Graphs: An Experimental Study (https://www.notion.so/Drawing-Directed-Acyclic-Graphs-An-Experimental-Study-a1a382e468f74a14902ad4249f2eae6a?pvs=21), An ILP-based Proof System for the Crossing Number Problem (https://www.notion.so/An-ILP-based-Proof-System-for-the-Crossing-Number-Problem-b61271c4f96a4633aba0179af767a5e0?pvs=21), A Note on the Practicality of Maximal Planar Subgraph Algorithms (https://www.notion.so/A-Note-on-the-Practicality-of-Maximal-Planar-Subgraph-Algorithms-cbca5aa1135a4ba29ea6e508f1c4d02b?pvs=21), Star-Struck by Fixed Embeddings: Modern Crossing Number Heuristics (https://www.notion.so/Star-Struck-by-Fixed-Embeddings-Modern-Crossing-Number-Heuristics-d8f0e972b962439d8b368e8a28a7046a?pvs=21), A Generalization of the Directed Graph Layering Problem (https://www.notion.so/A-Generalization-of-the-Directed-Graph-Layering-Problem-dfe4f73388e84b199ad2ef1b5f3738fb?pvs=21) cleaned format?: Yes duplicate?: Yes link works?: Yes Added in paper: Yes OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90e87803e0c0b04558c1f Origin paper plaintext: Drawing Directed Acyclic Graphs: An Experimental Study Page id: a58f7143ef524c8a8c737df90162d3fb unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d949574cf748107605564e OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96e3b1101aa0ea66a0c45 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d970d31101aa0ea36a0cb0 first look: No sparkline data: {‘min’: 10, ‘max’: 100, ‘step_size’: 5, ‘num_bins’: 21, ‘bins’: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], ‘num_nodes’: [0, 0, 282, 169, 191, 103, 81, 81, 81, 58, 24, 49, 41, 17, 12, 24, 16, 18, 14, 13, 3]} Related to Literature - Algorithm (Dataset tag relations) 1: Layer-Free Upward Crossing Minimization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Layer-Free%20Upward%20Crossing%20Minimization%20676f8a507ff343b5ae83c34446796fb5.md), A Note on the Practicality of Maximal Planar Subgraph Algorithms (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Note%20on%20the%20Practicality%20of%20Maximal%20Planar%20Subgr%203b027747aec54f60a35f138958faff21.md), A Generalization of the Directed Graph Layering Problem (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Generalization%20of%20the%20Directed%20Graph%20Layering%20Pr%2064ff91b37bde4361a27ebf9f614b76ee.md), A Greedy Heuristic for Crossing-Angle Maximization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Greedy%20Heuristic%20for%20Crossing-Angle%20Maximization%202261d227fc2c49b294182a9d923ed4ce.md), Star-Struck by Fixed Embeddings: Modern Crossing Number Heuristics (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Star-Struck%20by%20Fixed%20Embeddings%20Modern%20Crossing%20Nu%20f31c2a6c7b8d4683a1820d8101f89448.md), An ILP-based Proof System for the Crossing Number Problem (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20ILP-based%20Proof%20System%20for%20the%20Crossing%20Number%20%20e172212e85b74e12bcf2d0320d2b1eb6.md), Drawing Directed Acyclic Graphs: An Experimental Study (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Drawing%20Directed%20Acyclic%20Graphs%20An%20Experimental%20St%201677531652194663b7fdf25025c61cc6.md), Placing Arrows in Directed Graph Drawings (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Placing%20Arrows%20in%20Directed%20Graph%20Drawings%20511531e30ad540549d938c1eba7ad3bf.md), Aesthetic Discrimination of Graph Layouts (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Aesthetic%20Discrimination%20of%20Graph%20Layouts%2025f75d8fd4b44bd99006e2316d28f6cd.md), Placing Arrows in Directed Graph Layouts: Algorithms and Experiments (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Placing%20Arrows%20in%20Directed%20Graph%20Layouts%20Algorithm%20b6ca2552470a4915b2bb57e5eeffff80.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “Layer-Free Upward Crossing Minimization”:\n\nNorth DAGs. The North DAGs have been introduced in an experimental comparison of algorithms for drawing DAGs [Di Battista et al. 2000]. The benchmark set contains 1,158 DAGs collected by Stephen North, which were slightly modified by Di Battista et al. The graphs are grouped into nine sets, where set \\(i\\) contains graphs with \\(10 i\\) to \\(10 i+9\\) arcs for \\(i=1, \\ldots, 9\\).\n\n=== STOP RENDERING ===\nis this the AT&T collection? http://www.graphdrawing.org/data/\nfrom Drawing Directed Acyclic Graphs: An Experimental Study\n\n\n\nUntitled\n\n\nfrom Layer-Free Upward Crossing Minimization\n\n\n\nUntitled"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Pajek e323e05a735d4151a0bccfec08aa3bd6.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Pajek e323e05a735d4151a0bccfec08aa3bd6.html",
    "title": "1 Pajek",
    "section": "",
    "text": "1 Pajek\nNote: Pajek means spider in Slovenian. Origin Notes: The Pajek Program for Large Network Analysis is a tool developed and hosted by Andrej Vlado and some of their colleges. As part of this program, they later compiled relevant graphs and links to other datasets, which we call today the Pajek collection. graph features handled: directed edges, generic, large Graph features in papers: clusters (generated),generic,clusters (generated) Origin Paper: Pajek datasets (https://www.notion.so/Pajek-datasets-f5e6157fc711492f921234be368dd865?pvs=21) Originally found at: http://vlado.fmf.uni-lj.si/pub/networks/data/ Child collections: SuiteSparse Matrix Collection (SuiteSparse%20Matrix%20Collection%20b8772d6a2cbb456894b4673e32c6f956.md) Appeared in years: 2006,2019 Type of Collection: Established Network Repo (No report) is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): A Quality Metric for Visualization of Clusters in Graphs (https://www.notion.so/A-Quality-Metric-for-Visualization-of-Clusters-in-Graphs-4f55f6f5086243d4bcda73e4aa3e2454?pvs=21), Energy Models for Graph Clustering (https://www.notion.so/Energy-Models-for-Graph-Clustering-650b53a4f2f8488f9e5eab77f118aefe?pvs=21) cleaned format?: No duplicate?: No link works?: Yes Added in paper: No Origin paper plaintext: Pajek datasets Page id: e323e05a735d4151a0bccfec08aa3bd6 unavailable/skip: Yes Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: Energy Models for Graph Clustering (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Energy%20Models%20for%20Graph%20Clustering%20b2b82813b6124d1fbd17b1e84e8043fe.md), A Quality Metric for Visualization of Clusters in Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Quality%20Metric%20for%20Visualization%20of%20Clusters%20in%20%20a1c61d2b87b4457ca462ce04f80b4720.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “Energy Models for Graph Clustering”:\n\nAirline Routing (Figure 5): The nodes of this graph represent US airports, and the (unweighted) edges represent direct flights. The probability that two airports are connected by a direct flight is strongly related to their geographical distance: Most direct flights are relatively short, and only few large hub airports are connected by direct long-range flights. The distances in the edge-repulsion LinLog layout resemble the relative geographical distances of the airports remarkably closely, given that the graph does not contain any explicit information about geographical distances.\n\n\nDictionary (Figure 7): The nodes represent terms in the Online Dictionary of Library and Information Science (ODLIS), and the edges represent hyperlinks. A hyperlink between two terms exists if one term is used to describe the meaning of the other term, and thus connects semantically related terms. The edge-repulsion LinLog layout indeed groups semantically related terms, which is better reflected in the VRML file on the supplementary web page than in Figure 7(c). Such a grouping is useful, for example, for discovering the global topic areas (like publishing, printing, information technology, etc.), for identifying entry points for the exploration of topics, or for finding semantically related terms even if they are not explicitly linked.\n\nFrom “A Quality Metric for Visualization of Clusters in Graphs”:\n\nWe re-used some datasets from the validation experiments and created some new ones, listed in Table 2. We also selected real world graph datasets with existing vertex categorization, which are listed under the double line in Table 2. The datasets were taken from Pajek [2] and Stanford Network Analysis Project’s (SNAP) repository [23, 40].\n\n\n\nExample Figures\nFrom “Energy Models for Graph Clustering”:\n\n\n\nScreen Shot 2023-08-17 at 4.05.25 PM.png\n\n\n\n\n\nScreen Shot 2023-08-17 at 4.06.19 PM.png\n\n\n=== STOP RENDERING ===\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/\nDirect flights between US airports (332 nodes, 2126 edges). Some\ndistant airports in Alaska and the South Sea (e.g. Guam) are omitted to improve\nreadability.\n\nCollection of other dataset that might not be linked into paper\nThere is another link to data not mentioned in their repo. (Also part of SuiteSpase Matrix Collection)"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Protein Interactions (Publications) fb5bc3bb0c5d40468da36d279a114a78.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Protein Interactions (Publications) fb5bc3bb0c5d40468da36d279a114a78.html",
    "title": "1 Protein Interactions (Publications)",
    "section": "",
    "text": "Note: Various types of protein interaction graphs are recorded in other network collections. We highlight two of them from the surveyed papers. First, we have the temporal Protein Interaction Publications, showing the history of how protein interactions were described in the literature. Second, the Protein Homology graph was provided by the Large Graph Layout project, their links are now broken and the dataset lost. Nonetheless, http://snap.stanford.edu/biodata/index.html and http://konect.cc/networks/ both also have various dataset of human/other species protein interactions. Origin Notes: Protein Interaction Publications were collected from the biological Pathway Commons Database: http://www.pathwaycommons.org/. graph features handled: dynamic (discrete), large, multigraph, temporal event sequence Graph features in papers: generic,large,dynamic,dynamic (discrete),layered graphs,n-layers Origin Paper: LGL: Creating a Map of Protein Function with an Algorithm for Visualizing Very Large Biological Networks (https://www.notion.so/LGL-Creating-a-Map-of-Protein-Function-with-an-Algorithm-for-Visualizing-Very-Large-Biological-Netw-518c7160f2f24cd08c6bbb7b4f43216c?pvs=21), TimeArcs: Visualizing Fluctuations in Dynamic Networks (https://www.notion.so/TimeArcs-Visualizing-Fluctuations-in-Dynamic-Networks-e671c46ecfa444efaf28392636402266?pvs=21) Originally found at: https://github.com/CreativeCodingLab/TimeArcs/tree/master/IndexCards\nhttps://lgl.sourceforge.net/ (download link broken) Size: 2961 nodes, 5267 edges Number of Graphs: 1 Appeared in years: 2008,2016 Type of Collection: Single Graph is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Rapid Graph Layout Using Space Filling Curves (https://www.notion.so/Rapid-Graph-Layout-Using-Space-Filling-Curves-847c46047b5c400bb9dcf339c8d42f12?pvs=21), TimeArcs: Visualizing Fluctuations in Dynamic Networks (https://www.notion.so/TimeArcs-Visualizing-Fluctuations-in-Dynamic-Networks-968889d3ca4a4109aca698513515e837?pvs=21) cleaned format?: Yes duplicate?: No link works?: No Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d94abc0c2b4d0e8d38629c Origin paper plaintext: LGL: Creating a Map of Protein Function with an Algorithm for Visualizing Very Large Biological Networks, TimeArcs: Visualizing Fluctuations in Dynamic Networks Page id: fb5bc3bb0c5d40468da36d279a114a78 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d9487494a6be101c12e7a5 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96cd4803e0c0ca9558d2b OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d971704cf748115a055882 first look: Yes sparkline data: {‘min’: 1, ‘max’: 227, ‘step_size’: 10, ‘num_bins’: 23, ‘bins’: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220], ‘node_degree’: [2768, 106, 38, 17, 12, 7, 3, 2, 3, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1]} Related to Literature - Algorithm (Dataset tag relations) 1: Rapid Graph Layout Using Space Filling Curves (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Rapid%20Graph%20Layout%20Using%20Space%20Filling%20Curves%2010601cd6078a4ea18b17c7d40eda0041.md), TimeArcs: Visualizing Fluctuations in Dynamic Networks (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/TimeArcs%20Visualizing%20Fluctuations%20in%20Dynamic%20Netwo%209d27b7e02aec4b80bc15447255eb4f4c.md)"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Protein Interactions (Publications) fb5bc3bb0c5d40468da36d279a114a78.html#protein-interaction-publications",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Protein Interactions (Publications) fb5bc3bb0c5d40468da36d279a114a78.html#protein-interaction-publications",
    "title": "1 Protein Interactions (Publications)",
    "section": "2.1 Protein Interaction Publications",
    "text": "2.1 Protein Interaction Publications\n\nStatistics\n\n\n\ndegree_distr.svg\n\n\n\n\nDescription from the Literature\nFrom TimeArcs: Visualizing Fluctuations in Dynamic Networks:\n\nThe data contains the publication information (such as publication year, author, and textual evidence) of interactions between pairs of proteins, as well as their specific interaction type.\n\n\nWhen there are multiple arcs connecting two proteins, it falls into one of the two circumstances. If they have the same color, these arcs indicate that there are supporting evidences in different publications which confirm the interaction between two elements. On the other hand, if they have the different colors, the more recent appearance provides either more detailed knowledge about the interaction or shows a conflict between different articles regarding the way in which these proteins interact.\n\n\n\nExample Figures\nFrom TimeArcs: Visualizing Fluctuations in Dynamic Networks:\n\n\n\nUntitled\n\n\nFig. 10: TimeArcs visualization for interactions around PCAF protein. (1), (2), and (3) in the figure are supporting evidences in literature of “PCAF binds MAML”."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Protein Interactions (Publications) fb5bc3bb0c5d40468da36d279a114a78.html#protein-homology-lost",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Protein Interactions (Publications) fb5bc3bb0c5d40468da36d279a114a78.html#protein-homology-lost",
    "title": "1 Protein Interactions (Publications)",
    "section": "2.2 Protein Homology (Lost)",
    "text": "2.2 Protein Homology (Lost)\n\nDescription from the Literature\nFrom [Rapid Graph Layout Using Space Filling Curves:](https://ieeexplore.ieee.org/document/4658143)\n\nThe “pgraph” dataset (shown in Figures 2 and 6) is a protein homology graph, which is relatively dense [7].\n\nConsists of 28, 854 vertices and 1,180, 816 edges, found in Table 1 of paper above.\n\n\nExample Figures\nFrom Rapid Graph Layout Using Space Filling Curves:\n\n\n\nUntitled\n\n\nFig. 2. A protein homology graph laid out with our space filling curve based approach. Color corresponds to depth in the clustering hierarchy. |V| = 28, 854,|E| = 1, 180, 816\nFrom LGL: Creating a Map of Protein Function with an Algorithm for Visualizing Very Large Biological Networks\n\n\n\nUntitled\n\n\nFig. 3. The complete protein homology map. A layout of the entire protein homology map; a total of 11,516 connected sets containing 111,604 proteins (vertices) with 1,912,684 edges. The largest connected set is shown more clearly in the inset and is enlarged further in Figure 4.\n== STOP RENDERING == broken link referenced in Rapid Graph Layout Using Space Filling Curves :\nSame link referenced in original paper,\nI also found https://lgl.sourceforge.net/ which contains the link to supposedly download the dataset but it is also broken\nReached out to author - Alex Adai"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Rome-Lib c2f20984de724f4c89764b0bc494e99e.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Rome-Lib c2f20984de724f4c89764b0bc494e99e.html",
    "title": "1 Rome-Lib",
    "section": "",
    "text": "1 Rome-Lib\nNote: Not layered, but often used in layered cases. Different versions have had various numbers of graphs. We include the largest of these datasets. Also sometimes referred to in the literature as “Pert DAG”. Origin Notes: Collected by Di Battista et al. and presented in their paper ”An experimental comparison of four graph drawing algorithms”. Mostly “real” networks such as software companies, government, software engineering books, database design, and journal articles on visualization. Originally sent as an extended abstract to Computational Geometry in 1995 — the same description was published as https://doi.org/10.1016/S0925-7721(96)00005-3 2 years later.\nhttp://graphdrawing.org describes it as: “Test suites of directed and undirected graphs from the http://www.dia.uniroma3.it/~gdt/ homepage (also known as the Rome Graphs).” graph features handled: generic Graph features in papers: generic,directed edges,layered graphs,n-layers,clusters (pre-existing),compound graphs,layered graphs,n-layers,circular,planar,sparse,trees,ortho,ortho-radial Origin Paper: An experimental comparison of four graph drawing algorithms (https://www.notion.so/An-experimental-comparison-of-four-graph-drawing-algorithms-4ef2a9eb95d6462fa997a16dc6ed2c2f?pvs=21), An experimental comparison of three graph drawing algorithms (extended abstract) (https://www.notion.so/An-experimental-comparison-of-three-graph-drawing-algorithms-extended-abstract-85bcd0ec675440fab9ba0c4f187b9e02?pvs=21) Originally found at: http://www.graphdrawing.org/data.html Size: 11534 graphs, 10 to 100 nodes, 9 to 158 edges Number of Graphs: 11534 format: GraphML Child collections: Pert DAG (Pert%20DAG%2096b0f23e2c66409c928697e247c77d7c.md) Appeared in years: 2008,2006,2022,2018,2021,2003,1997,2016,2017,2020,2019,2011 Type of Collection: Uniform Benchmark is it stored properly?: No must be analyzed: Yes In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Experiments on Exact Crossing Minimization Using Column Generation (https://www.notion.so/Experiments-on-Exact-Crossing-Minimization-Using-Column-Generation-1cd4f50b26dd44caa895d17fab86667a?pvs=21), A New Approach to Exact Crossing Minimization (https://www.notion.so/A-New-Approach-to-Exact-Crossing-Minimization-2bfd0ee19a944002b50f519492a0c33d?pvs=21), Deep Neural Network for DrawiNg Networks, (DN N )2 (https://www.notion.so/Deep-Neural-Network-for-DrawiNg-Networks-DN-N-2-2c90c9d3d07e4b489840f77c364c60d3?pvs=21), A Greedy Heuristic for Crossing-Angle Maximization (https://www.notion.so/A-Greedy-Heuristic-for-Crossing-Angle-Maximization-3570c65b497c41e999463e9addefca2e?pvs=21), An Experimental Study of Crossing Minimization Heuristics (https://www.notion.so/An-Experimental-Study-of-Crossing-Minimization-Heuristics-421c870d311943faa795f2115d2ca17e?pvs=21), Layer-Free Upward Crossing Minimization (https://www.notion.so/Layer-Free-Upward-Crossing-Minimization-74e10beabfcd4c5c86314a0ccd287610?pvs=21), Stratisfimal Layout: A modular optimization model for laying out layered node-link network visualizations (https://www.notion.so/Stratisfimal-Layout-A-modular-optimization-model-for-laying-out-layered-node-link-network-visualiza-77fd27b418d64ef6ab570cffd0ec4a24?pvs=21), An effective crossing minimisation heuristic based on star insertion (https://www.notion.so/An-effective-crossing-minimisation-heuristic-based-on-star-insertion-888933e03a604489ada5360688abe597?pvs=21), Improved circular layouts (https://www.notion.so/Improved-circular-layouts-8e3c81eb7f5e488b9a9dde434ad155cb?pvs=21), An Interactive Tool to Explore and Improve the Ply Number of Drawings (https://www.notion.so/An-Interactive-Tool-to-Explore-and-Improve-the-Ply-Number-of-Drawings-9141cfad08234c60a979ca207ada6a86?pvs=21), ? Aesthetic Discrimination of Graph Layouts (https://www.notion.so/Aesthetic-Discrimination-of-Graph-Layouts-98cc70abc7424e7895cf73e988563219?pvs=21), A branch-and-cut approach to the crossing number problem (https://www.notion.so/A-branch-and-cut-approach-to-the-crossing-number-problem-9f6d0fc8bd22490eaa0419efd296f2fe?pvs=21), An ILP-based Proof System for the Crossing Number Problem (https://www.notion.so/An-ILP-based-Proof-System-for-the-Crossing-Number-Problem-b61271c4f96a4633aba0179af767a5e0?pvs=21), An experimental comparison of four graph drawing algorithms (https://www.notion.so/An-experimental-comparison-of-four-graph-drawing-algorithms-b66a426dec90451ea5335ae1a7a25290?pvs=21), A Heuristic Approach Towards Drawings of Graphs with High Crossing Resolution (https://www.notion.so/A-Heuristic-Approach-Towards-Drawings-of-Graphs-with-High-Crossing-Resolution-bfbf57711103440a818c190d42fdb3c1?pvs=21), Advances in the Planarization Method: Effective Multiple Edge Insertions (https://www.notion.so/Advances-in-the-Planarization-Method-Effective-Multiple-Edge-Insertions-c518ce875daa4fe7b003ad506eb9a347?pvs=21), Experimental Analysis of the Accessibility of Drawings with Few Segments (https://www.notion.so/Experimental-Analysis-of-the-Accessibility-of-Drawings-with-Few-Segments-c6a50c32ec8a4fde9501b61f89625df8?pvs=21), A Note on the Practicality of Maximal Planar Subgraph Algorithms (https://www.notion.so/A-Note-on-the-Practicality-of-Maximal-Planar-Subgraph-Algorithms-cbca5aa1135a4ba29ea6e508f1c4d02b?pvs=21), Star-Struck by Fixed Embeddings: Modern Crossing Number Heuristics (https://www.notion.so/Star-Struck-by-Fixed-Embeddings-Modern-Crossing-Number-Heuristics-d8f0e972b962439d8b368e8a28a7046a?pvs=21), An Integer-Linear Program for Bend-Minimization in Ortho-Radial Drawings (https://www.notion.so/An-Integer-Linear-Program-for-Bend-Minimization-in-Ortho-Radial-Drawings-dd7c606905064bd9931cf69e0c5fc828?pvs=21) cleaned format?: Yes duplicate?: No link works?: Yes Added in paper: Yes OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90ec4803e0c0b00558bc1 Origin paper plaintext: An experimental comparison of four graph drawing algorithms, An experimental comparison of three graph drawing algorithms (extended abstract) Page id: c2f20984de724f4c89764b0bc494e99e unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d947f91101aa0dc66a0c4d OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96db0803e0c0cb7558c0f OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d971aa4cf748115a055897 first look: No sparkline data: {‘min’: 10, ‘max’: 110, ‘step_size’: 5, ‘num_bins’: 23, ‘bins’: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110], ‘num_nodes’: [0, 0, 681, 726, 427, 412, 630, 1404, 1162, 638, 451, 594, 688, 484, 455, 553, 445, 343, 582, 713, 142, 3, 1]} Related to Literature - Algorithm (Dataset tag relations) 1: A branch-and-cut approach to the crossing number problem (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20branch-and-cut%20approach%20to%20the%20crossing%20number%20p%20624ac4312cf941d2be7d815abe24b5b1.md), Layer-Free Upward Crossing Minimization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Layer-Free%20Upward%20Crossing%20Minimization%20676f8a507ff343b5ae83c34446796fb5.md), Experiments on Exact Crossing Minimization Using Column Generation (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Experiments%20on%20Exact%20Crossing%20Minimization%20Using%20C%208eba57a3647f4f22960d2d0f794c3cbf.md), Stratisfimal Layout: A modular optimization model for laying out layered node-link network visualizations (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Stratisfimal%20Layout%20A%20modular%20optimization%20model%20f%20ad2a312108774bad92f36064f5fd59ed.md), Aesthetic Discrimination of Graph Layouts (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Aesthetic%20Discrimination%20of%20Graph%20Layouts%2025f75d8fd4b44bd99006e2316d28f6cd.md), A New Approach to Exact Crossing Minimization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20New%20Approach%20to%20Exact%20Crossing%20Minimization%202545ef78b5004999bf3804868ae42b57.md), Improved circular layouts (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Improved%20circular%20layouts%2028b32d84950043d6863d591c7958a289.md), Deep Neural Network for DrawiNg Networks (DNN)^2 (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Deep%20Neural%20Network%20for%20DrawiNg%20Networks%20(DNN)%5E2%2003d3da58c4f745d2a68f17a4f8a03d74.md), An Experimental Study of Crossing Minimization Heuristics (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20Experimental%20Study%20of%20Crossing%20Minimization%20Heu%202dcd254fe4054544b4b04ed8aefdf862.md), An experimental comparison of four graph drawing algorithms (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20experimental%20comparison%20of%20four%20graph%20drawing%20a%204e117b9ce73d431ab1d9a29414ffff3a.md), A Note on the Practicality of Maximal Planar Subgraph Algorithms (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Note%20on%20the%20Practicality%20of%20Maximal%20Planar%20Subgr%203b027747aec54f60a35f138958faff21.md), Experimental Analysis of the Accessibility of Drawings with Few Segments (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Experimental%20Analysis%20of%20the%20Accessibility%20of%20Draw%20fa75403823b64e53aa237f1a840f7749.md), An Interactive Tool to Explore and Improve the Ply Number of Drawings (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20Interactive%20Tool%20to%20Explore%20and%20Improve%20the%20Ply%20b8be8d1a88824561bc30d154b8a4603e.md), A Greedy Heuristic for Crossing-Angle Maximization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Greedy%20Heuristic%20for%20Crossing-Angle%20Maximization%202261d227fc2c49b294182a9d923ed4ce.md), A Heuristic Approach Towards Drawings of Graphs with High Crossing Resolution (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Heuristic%20Approach%20Towards%20Drawings%20of%20Graphs%20wi%209f9855a1d44149ecba17ecc622b576f2.md), An Integer-Linear Program for Bend-Minimization in Ortho-Radial Drawings (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20Integer-Linear%20Program%20for%20Bend-Minimization%20in%2003dc379afbc7449594201f5dbf23e048.md), Star-Struck by Fixed Embeddings: Modern Crossing Number Heuristics (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Star-Struck%20by%20Fixed%20Embeddings%20Modern%20Crossing%20Nu%20f31c2a6c7b8d4683a1820d8101f89448.md), An effective crossing minimisation heuristic based on star insertion (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20effective%20crossing%20minimisation%20heuristic%20based%205fde465c129249599b79396bf3d3ae04.md), Advances in the Planarization Method: Effective Multiple Edge Insertions (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Advances%20in%20the%20Planarization%20Method%20Effective%20Mul%20884c2bc419eb4197be261c1f1b3898ce.md), An ILP-based Proof System for the Crossing Number Problem (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20ILP-based%20Proof%20System%20for%20the%20Crossing%20Number%20%20e172212e85b74e12bcf2d0320d2b1eb6.md)\n\n\n2 Body\n\nStatistics\n\n\n\nfour_in_one.svg\n\n\n\n\nDescriptions from Literature\nFrom “A branch-and-cut approach to the crossing number problem”:\n\nTo test the performance of our new algorithm, we used a benchmark set of graphs of the University of Rome III, introduced in [11]. The set contains 11 389 graphs that consist of 10 to 100 nodes and 9 to 158 edges. These graphs were generated from a core set of 112 “real life” graphs used in database design and software engineering applications. Most of the graphs are sparse, which is a common property in most application areas of automatic graph drawing. The average ratio between the number of edges and the number of nodes of the graphs from the benchmark set is about 1.35.\n\nFrom “Layer-free upward crossing minimization”:\n\nThe Rome graphs [Di Battista et al. 1997] are a widely used benchmark set in graph drawing, obtained from a basic set of 112 real-world graphs. It contains 11,528 instances with 10 through 100 nodes and 9 through 158 edges. Although the graphs are originally undirected, they have been used as directed graphs—by artificially directing the edges according to the node order given in the input files—for showing the performance of the mixed-upward planarization approach [Eiglsperger et al. 2003]. In this case, all edges are directed and the graphs are acyclic; hence, the mixed-upward planarization approach turns into an upward planarization method.\n\nFrom “A New Approach to Exact Crossing Minimization”:\n\nWe say graphs are trivial, if they are planar or if the heuristic achieves a planarization with only one crossing, as in these cases we need not prove optimality. The Rome library contains 7172 non-trivial graphs.\n\nFrom “An Experimental Comparison of Four Graph Drawing Algorithms”\n\nOur test graph generation strategy is as follows. First, we have focused on the important application area of database and software visualization, where Entity-Relationship diagrams and Data-Flow diagrams are usually displayed with orthogonal drawings. Second, we have collected 112 “real life” graphs with number of vertices between 10 and 100, from now on called core graphs, from the following sources:\n\n\n• 54% of the graphs have been obtained from major Italian software companies (especially from Database Informatica) and large government organization (including the Italian Internal Revenue Service and the Italian National Advisory Council for Computer Applications in the Government (Autorita’ per l’Informatica nella Pubblica Amministrazione)); • 33% of the graphs were taken from well-known reference books in software engineering [18] and database design [1], and from journal articles on software visualization in the recent issues of Information Systems and the IEEE Transactions on Software Engineering; • 13% of the graphs were extracted from theses in software and database visualization written by students at the University of Rome “La Sapienza”.\n\n\nOur approach is based on the following scheme. We defined several primitive operations for updating graphs, which correspond to the typical operations performed by designers of Entity-Relationship and Data-Flow Diagrams, and attributed a certain probability to each of them. More specifically, the updating primitives we have used are the following: InsertEdge, which inserts a new edge between two existing vertices; DeleteEdge, which deletes an existing edge; InsertVertex, which splits an existing edge into two edges by inserting a new vertex; DeleteVertex, which deletes a vertex and all its incident edges; and MakeVertex, which creates a new vertex and connects it to a subset of vertices. The test graphs were then generated in several iterations starting from the core graphs by applying random sequences of operations with a “genetic” mechanism. Namely, at each iteration a new set of test graphs was obtained by applying a random sequence of operations to the current test set. Each new graph was then evaluated for “suitability”, and those found not suitable were discarded. The probability of each primitive operation was varied at the end of each iteration. The evaluation of the suitability of the generated graphs was conducted using both objective and subjective analyses. The objective analysis consisted of determining whether the new graph had similar structural properties with respect to the core graph it was derived from. We have taken into account parameters like the average ratio between number of vertices and number of edges and the average number of biconnected components. The subjective analysis consisted in a visual inspection of the new graph and an assessment by expert users of Entity-Relationship and Data-Flow diagrams of its similarity to a “real-life” diagram. For obvious reasons, the subjective analysis has been done on a randomly selected subset of the graphs.\n\n\n\nExample Figures\nFrom ”An Experimental Comparison of Four Graph Drawing Algorithms”:\n\n\n\nUntitled\n\n\nFrom “Experimental Analysis of the Accessibility of Drawings with Few Segments”:\n\n\n\nUntitled\n\n\nFrom: Deep Neural Network for DrawiNg Networks, (DNN)2:\n\n\n\nUntitled\n\n\nFig 5. Layout examples for (DNN)^2, (DNN)^2, tsNET∗ and S_GD^2.\n=== STOP RENDERING ===\n\n\n\n3 Fig. 5.\nLayout examples for (DNN)^2, (DNN)^2, tsNET∗ and S_GD^2.\nFrom “Deep Neural Network for DrawiNg Networks, (DNN)2 “\n\n\n\nUntitled\n\n\nStrastisfimal Layout Supplemental materials"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Amazon Product Co-purchasing networks e0dbc308da9a4aacb6e02529fcd908a4.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Amazon Product Co-purchasing networks e0dbc308da9a4aacb6e02529fcd908a4.html",
    "title": "1 Amazon Product Co-purchasing networks",
    "section": "",
    "text": "1 Amazon Product Co-purchasing networks\nDescription: nodes represent products and edges link commonly co-purchased products Features: Directed, Metadata Number of Graphs: 5"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Citation networks 79b425543e874471be7fd73b0a4b3ed7.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Citation networks 79b425543e874471be7fd73b0a4b3ed7.html",
    "title": "1 Citation networks",
    "section": "",
    "text": "1 Citation networks\nDescription: nodes represent papers, edges represent citation Features: Directed, Labeled, Temporal Number of Graphs: 3"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Communication networks 87cfbc3a78b840e8904f61947f5143d1.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Communication networks 87cfbc3a78b840e8904f61947f5143d1.html",
    "title": "1 Communication networks",
    "section": "",
    "text": "1 Communication networks\nDescription: email communication networks with edges representing communication Features: Directed, Temporal, Weighted, undirected Number of Graphs: 4"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Face-to-face communication networks 1b7957ca63da463f8bcd349dd4a2b0e5.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Face-to-face communication networks 1b7957ca63da463f8bcd349dd4a2b0e5.html",
    "title": "1 Face-to-face communication networks",
    "section": "",
    "text": "1 Face-to-face communication networks\nDescription: networks of face-to-face (non-online) interactions Features: Directed, Temporal, Weighted Number of Graphs: 1"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Internet peer-to-peer networks 3b9a5ded788d4815844e34d97c6236c5.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Internet peer-to-peer networks 3b9a5ded788d4815844e34d97c6236c5.html",
    "title": "1 Internet peer-to-peer networks",
    "section": "",
    "text": "1 Internet peer-to-peer networks\nDescription: nodes represent computers and edges communication Features: Directed Number of Graphs: 9"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Networks with ground-truth communities f2e48f4e2dad4539985da650810d8b70.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Networks with ground-truth communities f2e48f4e2dad4539985da650810d8b70.html",
    "title": "1 Networks with ground-truth communities",
    "section": "",
    "text": "1 Networks with ground-truth communities\nDescription: : ground-truth network communities in social and information networks Features: Communities, Directed, undirected Number of Graphs: 8"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Online reviews 52a7a0e41bb942efb816852009d7829f.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Online reviews 52a7a0e41bb942efb816852009d7829f.html",
    "title": "1 Online reviews",
    "section": "",
    "text": "1 Online reviews\nDescription: data from online review systems such as BeerAdvocate and Amazon Features: Amazon reviews (all categories), Beer reviews, Food reviews, Movie reviews, Wine reviews Number of Graphs: 6"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Signed networks cf64ef0f1fb841589cb10d4f11d643e4.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Signed networks cf64ef0f1fb841589cb10d4f11d643e4.html",
    "title": "1 Signed networks",
    "section": "",
    "text": "1 Signed networks\nDescription: networks with positive and negative edges (friend/foe, trust/distrust) Features: Attributed, Bipartite, Directed, Signed, Temporal, Weighted Number of Graphs: 9"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Temporal networks 2d46d940a95e4926b91972eb87e5665f.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Temporal networks 2d46d940a95e4926b91972eb87e5665f.html",
    "title": "1 Temporal networks",
    "section": "",
    "text": "1 Temporal networks\nDescription: networks where edges have timestamps Features: Attributed, Bipartite, Directed, Signed, Temporal, Weighted Number of Graphs: 12"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/User actions 7e3de06492d1407a9b0494e38d4779dd.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/User actions 7e3de06492d1407a9b0494e38d4779dd.html",
    "title": "1 User actions",
    "section": "",
    "text": "1 User actions\nDescription: actions of users on social platforms. Features: Attributed, Bipartite, Directed, Temporal Number of Graphs: 1"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Wikipedia networks, articles, and metadata 04810452c564438992c805e672aae335.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SNAP (Stanford Network Analysis Platform) 1cd77eaee57147ce8263b2f9eaa2589c/Children of SNAP 3e818a7183654308b6df67c82c1be9fa/Wikipedia networks, articles, and metadata 04810452c564438992c805e672aae335.html",
    "title": "1 Wikipedia networks, articles, and metadata",
    "section": "",
    "text": "1 Wikipedia networks, articles, and metadata\nDescription: talk, editing, voting, and article data from Wikipedia Features: Bipartite, Directed, Edits, Navigation paths, Signed, Wiki markup, undirected Number of Graphs: 8"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html",
    "title": "1 Social Networks",
    "section": "",
    "text": "Note: Various social network datasets are used in the literature and here we provide a collection of some of the ones found in our survey. Namely, the Zachary Karate Club, Facebook100, Infectious SocioPatterns dynamic contact networks, and the Van De Brunt Fraternity Data. Note that Facebook1684 refers to the ego network for user 1684, and this along various other users can be found in SNAP. Unfortunately, we are unable to provide this dataset at this time. graph features handled: clusters (generated), dynamic, generic, layered graphs Graph features in papers: generic,large,generic,dynamic,dynamic (continuous),clusters (generated),weighted edges,clusters (generated),clusters (pre-existing),generic,labeled nodes,layered graphs,n-layers,clusters (pre-existing),generic,large,spatial,clusters (pre-existing) Origin Paper: An Information Flow Model for Conflict and Fission in Small Groups (https://www.notion.so/An-Information-Flow-Model-for-Conflict-and-Fission-in-Small-Groups-34bb7441d1c4482a990c99d9d4990e14?pvs=21), Learning to discover social circles in ego networks (https://www.notion.so/Learning-to-discover-social-circles-in-ego-networks-742fdd60008348ed8271f3f039005c26?pvs=21), What’s in a crowd? analysis of face-to-face behavioral networks (https://www.notion.so/What-s-in-a-crowd-analysis-of-face-to-face-behavioral-networks-6e1997f78eb84272ac3fa79ecb571cb8?pvs=21), Friendship Networks Through Time: An Actor-Oriented Dynamic Statistical Network Model (https://www.notion.so/Friendship-Networks-Through-Time-An-Actor-Oriented-Dynamic-Statistical-Network-Model-06c4d3cdd29b4568ae1aa5c9e265041a?pvs=21), Social Structure of Facebook Networks (https://www.notion.so/Social-Structure-of-Facebook-Networks-d41db3795a424c1086f4b4cf2720528e?pvs=21), Comparing Community Structure to Characteristics in Online Collegiate Social Networks (https://www.notion.so/Comparing-Community-Structure-to-Characteristics-in-Online-Collegiate-Social-Networks-156b7ef6e40c4c89b20ee42dc57a551d?pvs=21) Originally found at: https://snap.stanford.edu/data/ego-Facebook.html https://cs.swan.ac.uk/~dynnoslice/software.html https://archive.org/details/oxford-2005-facebook-matrix https://osf.io/dcz5h http://www.sociopatterns.org/datasets/infectious-sociopatterns-dynamic-contact-networks/ http://www-personal.umich.edu/~mejn/netdata/ Number of Graphs: 156 Appeared in years: 2015,2021,2017,2018,2020,2005,2019 Type of Collection: Aggregate collection is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Automatic Polygon Layout for Primal-Dual Visualization of Hypergraphs (https://www.notion.so/Automatic-Polygon-Layout-for-Primal-Dual-Visualization-of-Hypergraphs-09ec6b5a17ae4f5eb6aebedf0dde6467?pvs=21), Drawing Dynamic Graphs Without Timeslices (https://www.notion.so/Drawing-Dynamic-Graphs-Without-Timeslices-15310bfa5a2f4015b7a4ae0098e6c151?pvs=21), The Turing Test for Graph Drawing Algorithms (https://www.notion.so/The-Turing-Test-for-Graph-Drawing-Algorithms-2a183bdf85bf4ab0acb311d5b9615440?pvs=21), Untangling the Hairballs of Multi-Centered Small-World Online Social Media Networks (https://www.notion.so/Untangling-the-Hairballs-of-Multi-Centered-Small-World-Online-Social-Media-Networks-8d6315c26f82480cb56a0256ef7ec569?pvs=21), Network Alignment by Discrete Ollivier-Ricci Flow (https://www.notion.so/Network-Alignment-by-Discrete-Ollivier-Ricci-Flow-b9a362d8006a44cf97a1fcbfec24ea57?pvs=21), An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs (https://www.notion.so/An-Experimental-Comparison-of-Fast-Algorithms-for-Drawing-General-Large-Graphs-bbb7bb7d51d84d109030dee3c06d895d?pvs=21), Anisotropic Radial Layout for Visualizing Centrality and Structure in Graphs (https://www.notion.so/Anisotropic-Radial-Layout-for-Visualizing-Centrality-and-Structure-in-Graphs-c604b563b3594a69b6c8e57b5ce9f02f?pvs=21), Preserving Minority Structures in Graph Sampling (https://www.notion.so/Preserving-Minority-Structures-in-Graph-Sampling-cf062d6fa8f5484ab1190edd125f739f?pvs=21) cleaned format?: Yes duplicate?: No link works?: No Added in paper: No Origin paper plaintext: An Information Flow Model for Conflict and Fission in Small Groups, Learning to discover social circles in ego networks, What’s in a crowd? analysis of face-to-face behavioral networks, Friendship Networks Through Time: An Actor-Oriented Dynamic Statistical Network Model, Social Structure of Facebook Networks, Comparing Community Structure to Characteristics in Online Collegiate Social Networks Page id: 90888b3285d042d49072985b05f95203 unavailable/skip: No Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: Untangling the Hairballs of Multi-Centered Small-World Online Social Media Networks (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Untangling%20the%20Hairballs%20of%20Multi-Centered%20Small-W%20690af12a963849cd80c0285d27221086.md), Preserving Minority Structures in Graph Sampling (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Preserving%20Minority%20Structures%20in%20Graph%20Sampling%202d52160d6ac04019aaf808496f7d4240.md), Drawing Dynamic Graphs Without Timeslices (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Drawing%20Dynamic%20Graphs%20Without%20Timeslices%204da7155eac4b4979ae165f3b0f1d2b1b.md), Anisotropic Radial Layout for Visualizing Centrality and Structure in Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Anisotropic%20Radial%20Layout%20for%20Visualizing%20Centrali%20c964c73e1c2946f992cb72bac2b19c42.md), Network Alignment by Discrete Ollivier-Ricci Flow (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Network%20Alignment%20by%20Discrete%20Ollivier-Ricci%20Flow%20f49d058c38ad42c59c2baec961170d7c.md), The Turing Test for Graph Drawing Algorithms (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/The%20Turing%20Test%20for%20Graph%20Drawing%20Algorithms%209927a9580ae74b49a468a8c2816334da.md), An Experimental Comparison of Fast Algorithms for Drawing General Large Graphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20Experimental%20Comparison%20of%20Fast%20Algorithms%20for%20%20190e5036cf974a879b50614cfff525f1.md), Automatic Polygon Layout for Primal-Dual Visualization of Hypergraphs (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Automatic%20Polygon%20Layout%20for%20Primal-Dual%20Visualiza%2078257e61a97c4b9ca0eb0a128ce89101.md), SetCoLa: High-Level Constraints for Graph Layout (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/SetCoLa%20High-Level%20Constraints%20for%20Graph%20Layout%20e1af8f01247d49b7bc7ac0562e1919cf.md), A Random Sampling O(n) Force-calculation Algorithm for Graph Layouts (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Random%20Sampling%20O(n)%20Force-calculation%20Algorithm%2086599a831f314d1cb8871a5a92420d0f.md), Structure-aware Fisheye Views for Efficient Large Graph Exploration (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Structure-aware%20Fisheye%20Views%20for%20Efficient%20Large%20%20690c77bbfc7647c098c21827e4491457.md), Revisiting Stress Majorization as a Unified Framework for Interactive Constrained Graph Visualization (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Revisiting%20Stress%20Majorization%20as%20a%20Unified%20Framew%200765ea891e9e403593025430656f35f3.md)"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#zachary-karate-club-dataset",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#zachary-karate-club-dataset",
    "title": "1 Social Networks",
    "section": "2.1 Zachary Karate Club Dataset",
    "text": "2.1 Zachary Karate Club Dataset\n\nDescriptions from Literature\nThe Turing Test for Graph Drawing Algorithms describes the dataset simply as “social network” in their Table 1.\nFrom Anisotropic Radial Layout for Visualizing Centrality and Structure in Graphs:\n\nThe Zachary’s karate club graph is a well known data set that is a social network of friendships in a karate club at a US university, as recorded during a study [32]. This graph contains 34 nodes, each representing an individual, and 78 unweighted edges that represent a friendship between the associated individuals (Fig. 1). During the period of observation, a conflict between two key members, identified as the “administrator” and “instructor”, leads to a split in the club, giving it an interesting two cluster structure. In Fig. 1, nodes representing members who are part of the instructor’s and administrator’s groups are drawn in green and blue, respectively.\n\n\n\nExample Figures\nFrom “The Turing Test for Graph Drawing Algorithms”:\n\n\n\nUntitled\n\n\nFigure from supplementary materials using a force directed layout.\nFrom “Anisotropic Radial Layout for Visualizing Centrality and Structure in Graphs”:\n\n\n\nUntitled\n\n\nFig. 1. Visualization of Zachary’s karate club social network using (a) MDS, (b) radial layout, and (c) anisotropic radial layout. Node sizes encode betweenness centrality.\n****From “Network Alignment by Discrete Ollivier-Ricci Flow”:\n\n\n\nUntitled\n\n\nFig. 1. An example of Ricci curvature on the karate club graph before and after Ricci flow. The colors represent the Ricci curvature while the thickness represents the edge weight. Ricci flow deformed the edge weights until Ricci curvatures converged (−0.0027 in this case)."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#facebook100",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#facebook100",
    "title": "1 Social Networks",
    "section": "2.2 Facebook100",
    "text": "2.2 Facebook100\n\nDescription from Literature\nFrom Untangling the Hairballs of Multi-Centered, Small-World Online Social Media Networks:\n\nAs real world samples, we use the Facebook100 dataset [40], which contains social relations of 100 higher educational institutes in the US. The network size varies from 762 to 41K vertices and from 16K to 1.6M edges. Thedataset is directly from Facebook, not sampled, and thus very complete in terms of capturing the social relations according to a widely used service at that time. Additional attributes obtained from the Facebook profiles are gender, expected year of graduation, dormitory, etc. Due to incomplete profiles, a number of attribute values are missing."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#example-figures-1",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#example-figures-1",
    "title": "1 Social Networks",
    "section": "2.3 Example Figures",
    "text": "2.3 Example Figures\nFrom Untangling the Hairballs of Multi-Centered, Small-World Online Social Media Networks\nFig. 1. Facebook friendships at California Institute of Technology (Caltech36). Vertex color corresponds to dormitory (gray for missing values), but has not been utilized by the layout algorithm. The layout in (a) is based on the entire graph, whereas (b)-(f) use edge embeddedness, which spreads the graph while keeping cohesive groups together. Embeddedness mapped to edge color; backbone edges dark gray.\n\n\n\nUntitled"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#description-from-literature-1",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#description-from-literature-1",
    "title": "1 Social Networks",
    "section": "3.1 Description from Literature",
    "text": "3.1 Description from Literature\nFrom ****Preserving Minority Structures in Graph Sampling\n\nThe Facebook1684 graph data set is an online social network with 775 nodes and 14,006 edges. The original graph and six samples are shown in Figure 4. This data set is an unbalanced graph in which two large communities include 705 nodes and two small communities/cliques contain only 70 nodes.\n\nThe supplemental material for *****Network Alignment by Discrete Ollivier-Ricci Flow* also provides user 1864 of the Facebook ego networks in their repository.\nFrom A Random Sampling O(n) Force-calculation Algorithm for Graph Layouts:\n\nThe ego graphs are Facebook ego graphs [ML12] with the ego vertex re-added to the graph."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#description-from-the-literature",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#description-from-the-literature",
    "title": "1 Social Networks",
    "section": "5.1 Description from the Literature",
    "text": "5.1 Description from the Literature\nFrom Preserving\n\nVan De Bunt (Discrete): shows the relationships between 32 freshmen at seven different time points. A discrete dynamic graph is built using the method of Brandes et al.  [9], with an undirected edge inserted into a timeslice if the participants reciprocally report “best friendship” or “friendship” at that time."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#description-from-the-literature-1",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#description-from-the-literature-1",
    "title": "1 Social Networks",
    "section": "6.1 Description from the Literature",
    "text": "6.1 Description from the Literature\nFrom"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#description-from-the-literature-2",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#description-from-the-literature-2",
    "title": "1 Social Networks",
    "section": "7.1 Description from the Literature",
    "text": "7.1 Description from the Literature\nFrom SetCoLa: High-Level Constraints for Graph Layout:\n\nSocial networks can be a powerful way to understand inter-personal relationships and are useful for tracking the spread of diseases that result from personal contact [RST*98, FHH*01, MRV*03, FHD*11]. The ability to track and identify at risk individuals can lead to treatment and help manage the spread of the disease. In addition to the links between individuals, structuring the layout by node properties such as the social or ethnographically-identified group may reveal additional details about how the disease is spread."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#example-figures-3",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Social Networks 90888b3285d042d49072985b05f95203.html#example-figures-3",
    "title": "1 Social Networks",
    "section": "7.2 Example Figures",
    "text": "7.2 Example Figures\nFrom SetCoLa: High-Level Constraints for Graph Layout:\n\n\n\nUntitled\n\n\nFig. 4. The layout for the syphilis social network from (a) Rothenberg et al. [RST*98]. (b) We recreated and improved the layout in SetCoLa by introducing additional padding, alignment, and circle constraints to further highlight the relative number of interactions among the different groups. For both figures, the nodes are split into three groups, from left to right: young affluent white men, younger white women, and young African-American men. Individuals not associated with any of these “core” groups are positioned above the others. In both figures, individuals diagnosed with syphilis during the outbreak are labeled with an “S” on the node label.\n=== STOP RENDERING ===\nContact Network\nThis dataset contains the daily dynamic contact networks collected during the Infectious SocioPatterns event that took place at the Science Gallery in Dublin, Ireland, during the artscience exhibition INFECTIOUS: STAY AWAY. Each file in the downloadable package contains a tab-separated list representing the active contacts during 20-second intervals of one day of data collection.  Each line has the form “t i j“, where i and j are the anonymous IDs of the persons in contact, and the interval during which this contact was active is [ t – 20s, t ]. If multiple contacts are active in a given interval, you will see multiple lines starting with the same value of t. Time is measured in seconds and expressed in UNIX ctime.\n“This evaluation uses 109 common graphs from network science and graph algorithm research (note: many graphs from older research are no longer available online).”"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SteinLib 4b766ffe22de40ecaa9307671862ea96.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SteinLib 4b766ffe22de40ecaa9307671862ea96.html",
    "title": "1 SteinLib",
    "section": "",
    "text": "1 SteinLib\nNote: SteinLib is a collection of Steiner tree problems in graphs and variants. Their https://steinlib.zib.de/steinlib.php has additional information about each problem in the dataset, including whether or not it has been solved. We omit two sets, https://steinlib.zib.de/showset.php?Relay and https://steinlib.zib.de/showset.php?EFST, from our provided data due to size constraints. Origin Notes: Introduced in “https://link.springer.com/chapter/10.1007/978-1-4613-0255-1_9” graph features handled: edge weighted, generic, mesh, sparse Graph features in papers: planar Origin Paper: SteinLib: An Updated Library on Steiner Tree Problems in Graphs (https://www.notion.so/SteinLib-An-Updated-Library-on-Steiner-Tree-Problems-in-Graphs-36c34a7a5596442ca7691590d7108732?pvs=21) Originally found at: https://steinlib.zib.de/steinlib.php Size: 6-38,418 nodes, 9-221,445 edges Number of Graphs: 1207 Appeared in years: 2016 Type of Collection: Uniform Benchmark is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): A Note on the Practicality of Maximal Planar Subgraph Algorithms (https://www.notion.so/A-Note-on-the-Practicality-of-Maximal-Planar-Subgraph-Algorithms-cbca5aa1135a4ba29ea6e508f1c4d02b?pvs=21) cleaned format?: No duplicate?: No link works?: No Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90e5e1101aa0c9f6a0c0f Origin paper plaintext: SteinLib: An Updated Library on Steiner Tree Problems in Graphs Page id: 4b766ffe22de40ecaa9307671862ea96 unavailable/skip: Yes Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d948684cf74810580556ac OSF link gml: https://osf.io/download/zbrf5/ OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d970300c2b4d0f61386324 first look: No sparkline data: {‘min’: 6, ‘max’: 38418, ‘step_size’: 1500, ‘num_bins’: 26, ‘bins’: [0, 1500, 3000, 4500, 6000, 7500, 9000, 10500, 12000, 13500, 15000, 16500, 18000, 19500, 21000, 22500, 24000, 25500, 27000, 28500, 30000, 31500, 33000, 34500, 36000, 37500], ‘num_nodes’: [1012, 121, 30, 8, 8, 6, 2, 4, 0, 1, 0, 1, 5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 1, 4]} Related to Literature - Algorithm (Dataset tag relations) 1: A Note on the Practicality of Maximal Planar Subgraph Algorithms (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/A%20Note%20on%20the%20Practicality%20of%20Maximal%20Planar%20Subgr%203b027747aec54f60a35f138958faff21.md)\n\n\n2 Body\n\nStatistics\n\n\n\nfour_in_one.svg\n\n\n\n\nDescriptions from Literature\nFrom A Note on the Practicality of Maximal Planar Subgraph Algorithms:\n\nWe use the non-planar graphs of the established benchmark sets North [12] (423 instances), Rome [11] (8249), and SteinLib [16] (586), all of which include real-world instances. In our plots, we group instances according to |V| rounded to the nearest multiple of 10; for Rome we only consider graph with ≥ 25 vertices.\n\n\n\nExample Figures\nFrom SteinLib: An Updated Library on Steiner Tree Problems in Graphs:\n\n\n\nScreen Shot 2023-08-09 at 4.09.50 PM.png\n\n\n=== STOP RENDERING ===\nIs it lost?"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/ACUSIM 1c8b1b6691b44109be9dbacabc065c99.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/ACUSIM 1c8b1b6691b44109be9dbacabc065c99.html",
    "title": "1 ACUSIM",
    "section": "",
    "text": "1 ACUSIM\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 715804 Number of Graphs: 1 Number of Nodes (Median): 14822 Number of Nodes (Range): 14822"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Alemdar 93db214b6a45420abc9d93fd5092852f.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Alemdar 93db214b6a45420abc9d93fd5092852f.html",
    "title": "1 Alemdar",
    "section": "",
    "text": "1 Alemdar\nKind: 2D/3D Problem Max Nonzeros: 42581 Number of Graphs: 1 Number of Nodes (Median): 6245 Number of Nodes (Range): 6245"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Andrews bc0484e002a14605bca0c09d312707d3.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Andrews bc0484e002a14605bca0c09d312707d3.html",
    "title": "1 Andrews",
    "section": "",
    "text": "1 Andrews\nKind: Computer Graphics/Vision Problem Max Nonzeros: 760154 Number of Graphs: 1 Number of Nodes (Median): 60000 Number of Nodes (Range): 60000"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/ANSYS 8b37059b3d584da5b6b2836c66209163.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/ANSYS 8b37059b3d584da5b6b2836c66209163.html",
    "title": "1 ANSYS",
    "section": "",
    "text": "1 ANSYS\nKind: Least Squares Problem Max Nonzeros: 4211599 Number of Graphs: 3 Number of Nodes (Median): 1785345 Number of Nodes (Range): 887058 - 1823928"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/ATandT 5cc2160148d4477cb9a2cfa825030e9b.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/ATandT 5cc2160148d4477cb9a2cfa825030e9b.html",
    "title": "1 ATandT",
    "section": "",
    "text": "1 ATandT\nKind: Frequency Domain Circuit Simulation Problem Max Nonzeros: 5834044 Number of Graphs: 4 Number of Nodes (Median): 78403.5 Number of Nodes (Range): 36057 - 659033"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bai 1bf959b7dd44430ba7be089673944e75.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bai 1bf959b7dd44430ba7be089673944e75.html",
    "title": "1 Bai",
    "section": "",
    "text": "1 Bai\nKind: 2D/3D Problem, Chemical Process Simulation Problem, Computational Fluid Dynamics Problem, Computational Fluid Dynamics Problem Sequence, Electromagnetics Problem, Materials Problem, Power Network Problem, Robotics Problem, Statistical/Mathematical Problem, Subsequent Computational Fluid Dynamics Problem Max Nonzeros: 463360 Number of Graphs: 78 Number of Nodes (Median): 961 Number of Nodes (Range): 62 - 23560\nMatrices from Z. Bai, D. Day, J. Demmel, and J. Dongarra. located at ftp.ms.uky.edu : pub/misc/bai/Collection.\nOriginal README file:\n--------------------------------------------------------------------------------\n\nThis directory contains the data files for the test matrices.\n\nTitle                                                                   Key\n-----------------------------------------------------------------------+--------\n\nsquare dielectric waveguid, H. Dong                                     DW256A\n                                                                        DW245B\n                                                                        DW1024\n                                                                        DW4096\n\nbounded finline waveguide eigenmodes, B. Shultz and S. Gedney           BFWA62\n                                                                        BFWB62\n                                                                        BFWA398\n                                                                        BFWB398\n                                                                        BFWA782\n                                                                        BFWB782\n\nMagneto-hydro-dynamics Alfven spectral problem,                         MHDA416\n                                                                        MHDB416\n\nAirfoil  (A. Mahajan)                                                   AF23560\n\nQuebec Hydro Power system, Deo                                          QH882\n\nChuck matrix (multiple eigenvalues)  J. Cullum                          CK104\n                                                                        CK400\n                                                                        CK656\n\nLOPSI Stochastic Test Matrix                                            LOP163\n\nModel ordinary differential eigenvalue problem                          ODEPA400\n                                                                        ODEPB400\n\nModel convection-diffusion differential equations                       CDDE1\n                                                                        CDDE2\n                                                                        CDDE3\n                                                                        CDDE4\n                                                                        CDDE5\n                                                                        CDDE6\n\nBrusselator wave model in transport interaction of chemical solutions   BWM200\n                                                                        BWM2000\n\nMarkov Chain Modeling, Random Walk  (m = 15)  G. W. Stewart             RW136\n                                    (m = 30)                            RW496\n                                    (m = 100)                           RW5151\n\nmodel PDE problem, H. Elman         nx = ny = 15                        PDE225\n                                    nx = ny = 30                        PDE900\n                                    nx=47, ny=63                        PDE2961\n\nQuantum chemistry (complex symmetric)                                   QC324\n                                                                        QC2534\n\n---------------- to be included ------------------------------------------------\nOrr-Sommerfeld  (complex matrix)\n\nIsing mode (size? and parameters?)\n\nRobotic control (CAD in C program)                                      ROB480\n\nTaylor-Couette flow\n\nNASA AMES arc2d problems (16,256 by 16,256)"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bates 2f1c8b755584462b930438dc9aca7cee.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bates 2f1c8b755584462b930438dc9aca7cee.html",
    "title": "1 Bates",
    "section": "",
    "text": "1 Bates\nKind: Least Squares Problem, Statistical/Mathematical Problem Max Nonzeros: 6804304 Number of Graphs: 3 Number of Nodes (Median): 31022 Number of Nodes (Range): 2541 - 1748122"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/BenElechi 688f655b6a6d46329dd9a670b65358f2.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/BenElechi 688f655b6a6d46329dd9a670b65358f2.html",
    "title": "1 BenElechi",
    "section": "",
    "text": "1 BenElechi\nKind: 2D/3D Problem Max Nonzeros: 13150496 Number of Graphs: 1 Number of Nodes (Median): 245874 Number of Nodes (Range): 245874"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bodendiek db5af3f891504af883f7d15fb730aa90.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bodendiek db5af3f891504af883f7d15fb730aa90.html",
    "title": "1 Bodendiek",
    "section": "",
    "text": "1 Bodendiek\nKind: Model Reduction Problem Max Nonzeros: 26515867 Number of Graphs: 5 Number of Nodes (Median): 806529 Number of Nodes (Range): 11083 - 2380515"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bomhof 5650d110ad194afaa3764185bfeb56d5.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bomhof 5650d110ad194afaa3764185bfeb56d5.html",
    "title": "1 Bomhof",
    "section": "",
    "text": "1 Bomhof\nKind: Circuit Simulation Problem Max Nonzeros: 307604 Number of Graphs: 4 Number of Nodes (Median): 8318.5 Number of Nodes (Range): 2624 - 80209"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bourchtein efab34307e8944b9a09f56a48757d3a1.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bourchtein efab34307e8944b9a09f56a48757d3a1.html",
    "title": "1 Bourchtein",
    "section": "",
    "text": "1 Bourchtein\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 10319760 Number of Graphs: 4 Number of Nodes (Median): 1380092 Number of Nodes (Range): 1270432 - 1489752"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Brethour 34e982d60c2241919446f550b81d7063.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Brethour 34e982d60c2241919446f550b81d7063.html",
    "title": "1 Brethour",
    "section": "",
    "text": "1 Brethour\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 207308 Number of Graphs: 2 Number of Nodes (Median): 5444 Number of Nodes (Range): 1348 - 9540"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Brunetiere ba6f895671d645efa6b150f4ed8fc21a.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Brunetiere ba6f895671d645efa6b150f4ed8fc21a.html",
    "title": "1 Brunetiere",
    "section": "",
    "text": "1 Brunetiere\nKind: Thermal Problem Max Nonzeros: 66528 Number of Graphs: 1 Number of Nodes (Median): 3456 Number of Nodes (Range): 3456"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bydder 9367e74de43548a7a13c62eec692e3cc.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Bydder 9367e74de43548a7a13c62eec692e3cc.html",
    "title": "1 Bydder",
    "section": "",
    "text": "1 Bydder\nKind: Computer Graphics/Vision Problem Max Nonzeros: 589824 Number of Graphs: 2 Number of Nodes (Median): 147456 Number of Nodes (Range): 147456"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Castrillon 6701c3505f9747218a698c99458f41e2.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Castrillon 6701c3505f9747218a698c99458f41e2.html",
    "title": "1 Castrillon",
    "section": "",
    "text": "1 Castrillon\nKind: Counter Example Problem Max Nonzeros: 1156224 Number of Graphs: 1 Number of Nodes (Median): 89400 Number of Nodes (Range): 89400"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Chen 98489631783841caad674d6fa7de3ed9.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Chen 98489631783841caad674d6fa7de3ed9.html",
    "title": "1 Chen",
    "section": "",
    "text": "1 Chen\nKind: Structural Problem Max Nonzeros: 14836504 Number of Graphs: 14 Number of Nodes (Median): 49377 Number of Nodes (Range): 10800 - 151926"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Clark fb5933bd896a4d379154324fc3421758.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Clark fb5933bd896a4d379154324fc3421758.html",
    "title": "1 Clark",
    "section": "",
    "text": "1 Clark\nKind: Computer Graphics/Vision Problem Max Nonzeros: 647495 Number of Graphs: 1 Number of Nodes (Median): 73159 Number of Nodes (Range): 73159"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/CPM 03e4ef7dcf924daebf181eeff47c44d0.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/CPM 03e4ef7dcf924daebf181eeff47c44d0.html",
    "title": "1 CPM",
    "section": "",
    "text": "1 CPM\nKind: 2D/3D Problem Max Nonzeros: 412148 Number of Graphs: 9 Number of Nodes (Median): 2548 Number of Nodes (Range): 148 - 40948"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Cylshell 3cde1af3ac8a4858a94f576738fd3b37.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Cylshell 3cde1af3ac8a4858a94f576738fd3b37.html",
    "title": "1 Cylshell",
    "section": "",
    "text": "1 Cylshell\nKind: Structural Problem Max Nonzeros: 263351 Number of Graphs: 7 Number of Nodes (Median): 5489 Number of Nodes (Range): 5357 - 5489"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Davis 31fa52c5a2944f77b06d416735b623b2.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Davis 31fa52c5a2944f77b06d416735b623b2.html",
    "title": "1 Davis",
    "section": "",
    "text": "1 Davis\nKind: Term/Document Graph Max Nonzeros: 301899 Number of Graphs: 1 Number of Nodes (Median): 9498 Number of Nodes (Range): 9498"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/DIMACS10 67fa9fe25b634a1db4dae5a3ec0eb8bd.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/DIMACS10 67fa9fe25b634a1db4dae5a3ec0eb8bd.html",
    "title": "1 DIMACS10",
    "section": "",
    "text": "1 DIMACS10\nKind: Random Undirected Graph, Random Unweighted Graph, Undirected Graph, Undirected Multigraph, Undirected Random Graph, Undirected Weighted Graph Max Nonzeros: 265114400 Number of Graphs: 151 Number of Nodes (Median): 196621 Number of Nodes (Range): 39 - 50912018\n\nhttp://www.cc.gatech.edu/dimacs10/index.shtml\nhttp://www.cise.ufl.edu/research/sparse/dimacs10\n\nProblems Addressed\n\n    * Graph partitioning\n    * Graph clustering\n\nThere are 12 data sets in the DIMACS10 collection:\n\nclustering: real-world graphs commonly used as benchmarks\ncoauthor:   citation and co-author networks\nDelaunay:   Delaunay triangulations of random points in the plane\ndyn-frames: frames from a 2D dynamic simulation\nKronecker:  synthetic graphs from the Graph500 benchmark\nnumerical:  graphs from numerical simulation\nrandom:     random geometric graphs (random points in the unit square)\nstreets:    real-world street networks\nWalshaw:    Chris Walshaw's graph partitioning archive\nmatrix:     graphs from the UF collection (not added here)\nredistrict: census networks\nstar-mixtures : artificially generated from sets of real graphs\n\nSome of the graphs already exist in the UF Collection.  In some cases,\nthe original graph is unsymmetric, with values, whereas the DIMACS\ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate\npatterns to the UF Collection, a MATLAB script is provided at\nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads\neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the\nDIMACS *.graph files into MATLAB.\n\n--------------------------------------------------------------------------------\nclustering:  Clustering Benchmarks\n--------------------------------------------------------------------------------\n\n    These real-world graphs are often used as benchmarks in the graph\n    clustering and community detection communities.  All but 4 of the 27\n    graphs already appear in the UF collection in other groups.  The\n    DIMACS10 version is always symmetric, binary, and with zero-free\n    diagonal.  The version in the UF collection may not have those\n    properties, but in those cases, if the pattern of the UF matrix\n    is symmetrized and the diagonal removed, the result is the DIMACS10\n    graph.\n\n    DIMACS10 graph:                 new?   UF matrix:\n    ---------------                 ----   -------------\n    clustering/adjnoun                     Newman/adjoun\n    clustering/as-22july06                 Newman/as-22july06\n    clustering/astro-ph                    Newman/astro-ph\n    clustering/caidaRouterLevel      *     DIMACS10/caidaRouterLevel\n    clustering/celegans_metabolic          Arenas/celegans_metabolic\n    clustering/celegansneural              Newman/celegansneural\n    clustering/chesapeake            *     DIMACS10/chesapeake\n    clustering/cnr-2000                    LAW/cnr-2000\n    clustering/cond-mat-2003               Newman/cond-mat-2003\n    clustering/cond-mat-2005               Newman/cond-mat-2005\n    clustering/cond-mat                    Newman/cond-mat\n    clustering/dolphins                    Newman/dolphins\n    clustering/email                       Arenas/email\n    clustering/eu-2005                     LAW/eu-2005\n    clustering/football                    Newman/football\n    clustering/hep-th                      Newman/hep-th\n    clustering/in-2004                     LAW/in-2004\n    clustering/jazz                        Arenas/jazz\n    clustering/karate                      Arenas/karate\n    clustering/lesmis                      Newman/lesmis\n    clustering/netscience                  Newman/netscience\n    clustering/PGPgiantcompo               Arenas/PGPgiantcompo\n    clustering/polblogs                    Newman/polblogs\n    clustering/polbooks                    Newman/polbooks\n    clustering/power                       Newman/power\n    clustering/road_central          *     DIMACS10/road_central\n    clustering/road_usa              *     DIMACS10/road_usa\n\n    the following graphs were added on July 2012:\n\n    G_n_pin_pout\n    preferentialAttachment\n    smallworld\n\n    uk-2002 was 'added' on July 2012 to the dimacs10 MATLAB interface,\n    but it already appears as the LAW/uk-2002 matrix.\n\n    uk-2007-05 is in the DIMACS10 collection but is not yet added here,\n    because it's too large for the file format of the UF collection.\n\n--------------------------------------------------------------------------------\ncoauthor:  Citation Networks\n--------------------------------------------------------------------------------\n\n    These graphs are examples of social networks used in R. Geisberger, P.\n    Sanders, and D. Schultes. Better approximation of betweenness\n    centrality. In 10th Workshop on Algorithm Engineering and\n    Experimentation, pages 90-108, San Francisco, 2008. SIAM.\n\n--------------------------------------------------------------------------------\nDelaunay:  Delaunay Graphs\n--------------------------------------------------------------------------------\n\n    These files have been generated as Delaunay triangulations of random\n    points in the unit square.\n\n    Engineering a scalable high quality graph partitioner,\n    M. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010\n    http://dx.doi.org/10.1109/IPDPS.2010.5470485\n\n--------------------------------------------------------------------------------\ndyn-frames:  Frames from 2D Dynamic Simulations\n--------------------------------------------------------------------------------\n\n    These files have been created with the generator described in Oliver\n    Marquardt, Stefan Schamberger: Open Benchmarks for Load Balancing\n    Heuristics in Parallel Adaptive Finite Element Computations. In Proc.\n    International Conference on Parallel and Distributed Processing\n    Techniques and Applications (PDPTA 2005), Volume 2, pp. 685-691. CSREA\n    Press 2005, ISBN 1-932415-59-9685-691.\n\n    The graphs are meshes taken from indivudual frames of a dynamic\n    sequence that resembles two-dimensional adaptive numerical simulations.\n    Smaller versions of these files (and their dynamic sequences as videos)\n    can be found on Stefan Schamberger's website (\n    http://www.upb.de/cs/schaum/benchmark.html ) dedicated to these\n    benchmarks. The files presented here are the frames 0, 10, and 20 of\n    the sequences, respectively.\n\n--------------------------------------------------------------------------------\nKronecker:  Kronecker Generator Graphs\n--------------------------------------------------------------------------------\n\n    The original Kronecker files contain self-loops and multiple edges.\n    These properties are also present in real-world data sets. However,\n    some tools cannot handle these \"artifacts\" at the moment. That is why\n    we present \"cleansed\" versions of the data sets as well.  For the\n    Challenge you should expect to be confronted with the original data\n    with self-loops and multiple edges. However, the final decision on\n    this issue will be made based on participant feedback.\n\n    All files have been generated with the R-MAT parameters A=0.57, B=0.19,\n    C=0.19, and D=1-(A+B+C)=0.05 and edgefactor=48, i.e., the number of\n    edges equals 48*n, where n is the number of vertices. Details about the\n    generator and the parameter meanings can be found on the Graph500\n    website.  ( http://www.graph500.org/Specifications.html )\n\n    There are 12 graphs in the DIMACS10 test set at\n    http://www.cc.gatech.edu/dimacs10/index.shtml .  Them come in 6 pairs.\n    One graph in each pair is a multigraph, with self-edges.  The other\n    graph is the nonzero pattern of the first (binary), with self-edges\n    removed.  MATLAB cannot directly represent multigraph, so in the UF\n    Collection the unweighted multigraph G is represented as a matrix A\n    where A(i,j) is an integer equal to the number edges (i,j) in G.\n\n    The binary graphs include the word 'simple' in their\n    name In the UF Collection, only the multigraph is included,\n    since the simple graph can be constructed from the multigraph.\n    If A is the multigraph, the simple graph S can be computed as:\n\n       S = spones (tril (A,-1)) + spones (triu (A,1)) ;\n\n    DIMACS10 graph:                        UF matrix:\n    ---------------                        -------------\n    kronecker/kron_g500-logn16             DIMACS10/kron_g500-logn16\n    kronecker/kron_g500-simple-logn16\n\n    kronecker/kron_g500-logn17             DIMACS10/kron_g500-logn17\n    kronecker/kron_g500-simple-logn17\n\n    kronecker/kron_g500-logn18             DIMACS10/kron_g500-logn18\n    kronecker/kron_g500-simple-logn18\n\n    kronecker/kron_g500-logn19             DIMACS10/kron_g500-logn19\n    kronecker/kron_g500-simple-logn19\n\n    kronecker/kron_g500-logn20             DIMACS10/kron_g500-logn20\n    kronecker/kron_g500-simple-logn20\n\n    kronecker/kron_g500-logn21             DIMACS10/kron_g500-logn21\n    kronecker/kron_g500-simple-logn21\n\n    References: \"Introducing the Graph 500,\" Richard C. Murphy, Kyle B.\n    Wheeler, Brian W. Barrett, James A. Ang, Cray User's Group (CUG), May\n    5, 2010.\n\n    D.A. Bader, J. Feo, J. Gilbert, J. Kepner, D. Koester, E. Loh, K.\n    Madduri, W. Mann, Theresa Meuse, HPCS Scalable Synthetic Compact\n    Applications #2 Graph Analysis (SSCA#2 v2.2 Specification), 5\n    September 2007.\n\n    D. Chakrabarti, Y. Zhan, and C. Faloutsos, R-MAT: A recursive model\n    for graph mining, SIAM Data Mining 2004.\n\n    Section 17.6, Algorithms in C (third edition). Part 5 Graph\n    Algorithms, Robert Sedgewick (Programs 17.7 and 17.8)\n\n    P. Sanders, Random Permutations on Distributed, External and\n    Hierarchical Memory, Information Processing Letters 67 (1988) pp\n    305-309.\n\n    \"DFS: A Simple to Write Yet Difficult to Execute Benchmark,\" Richard C.\n    Murphy, Jonathan Berry, William McLendon, Bruce Hendrickson, Douglas\n    Gregor, Andrew Lumsdaine, IEEE International Symposium on Workload\n    Characterizations 2006 (IISWC06), San Jose, CA, 25-27 October 2006.\n\n   \n\n--------------------------------------------------------------------------------\nnumerical: graphs from numerical simulations\n--------------------------------------------------------------------------------\n\n    For the graphs adaptive and venturiLevel3, please refer to the preprint:\n\n    Hartwig Anzt, Werner Augustin, Martin Baumann, Hendryk Bockelmann,\n    Thomas Gengenbach, Tobias Hahn, Vincent Heuveline, Eva Ketelaer,\n    Dimitar Lukarski, Andrea Otzen, Sebastian Ritterbusch, Bjo\"rn Rocker,\n    Staffan Ronnås, Michael Schick, Chandramowli Subramanian, Jan-Philipp\n    Weiss, and Florian Wilhelm.  Hiflow3 - a flexible and hardware-aware\n    parallel Finite element package. In Parallel/High-Performance Object-\n    Oriented Scientific Computing (POOSC'10).\n\n    For the graphs channel-500x100x100-b050 and packing-500x100x100-b050,\n    please refer to:\n\n    Markus Wittmann, Thomas Zeiser. Technical Note: Data Structures of\n    ILBDC Lattice Boltzmann Solver.\n    http://www.cc.gatech.edu/dimacs10/archive/numerical-overview-Erlangen.pdf\n\n    The instances NACA0015, M6, 333SP, AS365, and NLR are 2-dimensional FE\n    triangular meshes with coordinate information. 333SP and AS365 are actually\n    converted from existing 3-dimensional models to 2D places, while the rest\n    are created from geometry. The corresponding coordinate files have been\n    assembled in one archive. They have been created and contributed by Chan\n    Siew Yin with the help of Jian Tao Zhang, Department of Mechanical\n    Engineering, University of New Brunswick, Fredericton, Canada. \n\n--------------------------------------------------------------------------------\nrandom:  Random Geometric Graphs\n--------------------------------------------------------------------------------\n\n    rggX is a random geometric graph with 2^X vertices. Each vertex is a\n    random point in the unit square and edges connect vertices whose\n    Euclidean distance is below 0.55 (ln n)/n. This threshold was choosen\n    in order to ensure that the graph is almost connected.\n\n    Note:  the UF Collection is a collection of matrices primarily from\n    real applications.  The only random matrices I add to the collection\n    are those used in established benchmarks (such as DIMACS10).\n\n    Engineering a scalable high quality graph partitioner,\n    M. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010.\n    http://dx.doi.org/10.1109/IPDPS.2010.5470485\n\n--------------------------------------------------------------------------------\nsteets:  Street Networks\n--------------------------------------------------------------------------------\n\n    The graphs Asia, Belgium, Europe, Germany, Great-Britain, Italy,\n    Luxemburg and Netherlands are (roughly speaking) undirected and\n    unweighted versions of the largest strongly connected component\n    of the corresponding Open Street Map road networks. The Open\n    Street Map road networks have been taken from\n    http://download.geofabrik.de and have been converted for DIMACS10\n    by Moritz Kobitzsch (kobitzsch at kit.edu) as follows:\n\n    First, we took the corresponding graph and extracted all routeable\n    streets. Routable streets are objects in this file that are tagged\n    using one of the following tags: motorway, motorway_link, trunk\n    trunk_link, primary, primary_link, secondary, secondary_link,\n    tertiary, tertiary_link, residential, unclassified, road,\n    living_street, and service.  Next, we now compute the largest\n    strongly connected component of this extracted open street map graph.\n    Self-edges and parallel edges are removed afterwards.\n    The DIMACS 10 graph is now the undirected and unweighted version\n    of the constructed graph, i.e.  if there is an edge (u,v) but the\n    reverse edge (v,u) is missing, we insert the reverse edge into the\n    graph.  The XY coordinates of each node in the graph are preserved.\n\n--------------------------------------------------------------------------------\nWalshaw:  Chris Walshaw's graph partitioning archive\n--------------------------------------------------------------------------------\n\n    Chris Walshaw's graph partitioning archive contains 34 graphs that\n    have been very popular as benchmarks for graph partitioning algorithms\n    ( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).\n\n    17 of them are already in the UF Collection.  Only the 17 new graphs\n    not yet in the collection are added here in the DIMACS10 set.\n\n    DIMACS10 graph:                 new?   UF matrix:\n    ---------------                 ----   -------------\n    walshaw/144                      *     DIMACS10/144\n    walshaw/3elt                           AG-Monien/3elt\n    walshaw/4elt                           Pothen/barth5\n    walshaw/598a                     *     DIMACS10/598a\n    walshaw/add20                          Hamm/add20\n    walshaw/add32                          Hamm/add32\n    walshaw/auto                     *     DIMACS10/auto\n    walshaw/bcsstk29                       HB/bcsstk29\n    walshaw/bcsstk30                       HB/bcsstk30\n    walshaw/bcsstk31                       HB/bcsstk31\n    walshaw/bcsstk32                       HB/bcsstk32\n    walshaw/bcsstk33                       HB/bcsstk33\n    walshaw/brack2                         AG-Monien/brack2\n    walshaw/crack                          AG-Monient/crack\n    walshaw/cs4                      *     DIMACS10/cs4\n    walshaw/cti                      *     DIMACS10/cti\n    walshaw/data                     *     DIMACS10/data\n    walshaw/fe_4elt2                 *     DIMACS10/fe_4elt2\n    walshaw/fe_body                  *     DIMACS10/fe_body\n    walshaw/fe_ocean                 *     DIMACS10/fe_ocean\n    walshaw/fe_pwt                         Pothen/pwt\n    walshaw/fe_rotor                 *     DIMACS10/fe_rotor\n    walshaw/fe_sphere                *     DIMACS10/fe_sphere\n    walshaw/fe_tooth                 *     DIMACS10/fe_tooth\n    walshaw/finan512                       Mulvey/finan512\n    walshaw/m14b                     *     DIMACS10/m14b\n    walshaw/memplus                        Hamm/memplus\n    walshaw/t60k                     *     DIMACS10/t60k\n    walshaw/uk                       *     DIMACS10/uk\n    walshaw/vibrobox                       Cote/vibrobox\n    walshaw/wave                           AG-Monien/wave\n    walshaw/whitaker3                      AG-Monien/whitaker3\n    walshaw/wing                     *     DIMACS10/wing\n    walshaw/wing_nodal               *     DIMACS10/wing_nodal\n\n--------------------------------------------------------------------------------\nredistrict:  census networks\n--------------------------------------------------------------------------------\n\n    These graphs represent US states. They are used for solving the\n    redistricting problem. All data have been provided by Will Zhao. As stated\n    on the project website,  The nodes are Census2010 blocks. Two nodes have an\n    edge linking them if they share a line segment on their borders, i.e.\n    rook-style neighboring. The nodes weights are the POP100 variable of\n    Census2010-PL94, and the area of eache district.\n\n--------------------------------------------------------------------------------\nstar-mixtures : artificially generated from sets of real graphs\n--------------------------------------------------------------------------------\n\n    Each graph in this benchmark represents a star-like structure of different\n    graphs S0 , . . . , St. Graphs S1 , . . . , St are weakly connected to the\n    center S0 by random edges. The total number of edges between each Si and S0\n    was less than 3% out of the total number of edges in Si . The graphs are\n    mixtures of the following structures: social networks, finite-element\n    graphs, VLSI chips, peer-to-peer networks, and matrices from optimization\n    solvers.\n\n    More info can be found in the paper I. Safro, P. Sanders, C. Schulz:\n    Advanced Coarsening Schemes for Graph Partitioning, SEA 2012.\n\n    Communicated by Christian Schulz, uploaded on March 30, 2012."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/DRIVCAV 5ebd514a3050495fb0b9e5852dd9697a.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/DRIVCAV 5ebd514a3050495fb0b9e5852dd9697a.html",
    "title": "1 DRIVCAV",
    "section": "",
    "text": "1 DRIVCAV\nKind: Computational Fluid Dynamics Problem Sequence, Subsequent Computational Fluid Dynamics Problem Max Nonzeros: 138040 Number of Graphs: 26 Number of Nodes (Median): 2597 Number of Nodes (Range): 317 - 4562"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Embree 353dc2fc55a6465ea98a128d9b106194.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Embree 353dc2fc55a6465ea98a128d9b106194.html",
    "title": "1 Embree",
    "section": "",
    "text": "1 Embree\nKind: Computational Fluid Dynamics Max Nonzeros: 3599932 Number of Graphs: 1 Number of Nodes (Median): 96307 Number of Nodes (Range): 96307"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/FEMLAB 00dd353d4c3240738d5aafc464a5bcc8.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/FEMLAB 00dd353d4c3240738d5aafc464a5bcc8.html",
    "title": "1 FEMLAB",
    "section": "",
    "text": "1 FEMLAB\nKind: 2D/3D Problem, Computational Fluid Dynamics Problem, Electromagnetics Problem, Structural Problem Max Nonzeros: 3148656 Number of Graphs: 9 Number of Nodes (Median): 20414 Number of Nodes (Range): 367 - 85623"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Fluorem 175c280c3a934b1e9bf0786b1f5563dd.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Fluorem 175c280c3a934b1e9bf0786b1f5563dd.html",
    "title": "1 Fluorem",
    "section": "",
    "text": "1 Fluorem\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 283073458 Number of Graphs: 5 Number of Nodes (Median): 161070 Number of Nodes (Range): 903 - 2017169"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Freescale 05548a6e2a234ff7bf534755f8b39b45.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Freescale 05548a6e2a234ff7bf534755f8b39b45.html",
    "title": "1 Freescale",
    "section": "",
    "text": "1 Freescale\nKind: Circuit Simulation Matrix, Circuit Simulation Problem Max Nonzeros: 59524291 Number of Graphs: 8 Number of Nodes (Median): 2993180.5 Number of Nodes (Range): 178866 - 5558326"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/GAP f3ad487639774c76968748861a702633.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/GAP f3ad487639774c76968748861a702633.html",
    "title": "1 GAP",
    "section": "",
    "text": "1 GAP\nKind: Directed Weighted Graph, Random Undirected Weighted Graph Max Nonzeros: 4294966740 Number of Graphs: 5 Number of Nodes (Median): 61578415 Number of Nodes (Range): 23947347 - 134217728"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/GenBank 7f8da681de154e03aa63487334176359.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/GenBank 7f8da681de154e03aa63487334176359.html",
    "title": "1 GenBank",
    "section": "",
    "text": "1 GenBank\nKind: Undirected Graph Max Nonzeros: 465410904 Number of Graphs: 5 Number of Nodes (Median): 139353211 Number of Nodes (Range): 55042369 - 214005017"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/GHS_psdef 72e8e25ab33746ec80612dd2b9dd44ba.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/GHS_psdef 72e8e25ab33746ec80612dd2b9dd44ba.html",
    "title": "1 GHS_psdef",
    "section": "",
    "text": "1 GHS_psdef\nKind: Computational Fluid Dynamics Problem, Duplicate Computational Fluid Dynamics Problem, Duplicate Optimization Problem, Duplicate Structural Problem, Optimization Problem, Random 2D/3D Problem, Structural Problem Max Nonzeros: 77651847 Number of Graphs: 32 Number of Nodes (Median): 51402 Number of Nodes (Range): 15449 - 952203"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Goodwin deb0f85acfb648729aded6e861812d5f.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Goodwin deb0f85acfb648729aded6e861812d5f.html",
    "title": "1 Goodwin",
    "section": "",
    "text": "1 Goodwin\nKind: Computational Fluid Dynamics, Computational Fluid Dynamics Problem Max Nonzeros: 5778545 Number of Graphs: 12 Number of Nodes (Median): 14032 Number of Nodes (Range): 1182 - 178437"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Grueninger cfa9dbfecff9490fb923b336092e59d3.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Grueninger cfa9dbfecff9490fb923b336092e59d3.html",
    "title": "1 Grueninger",
    "section": "",
    "text": "1 Grueninger\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 803978 Number of Graphs: 2 Number of Nodes (Median): 24536 Number of Nodes (Range): 8256 - 40816"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Gset be4878ce6efa4d62a3860f69ddb882f6.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Gset be4878ce6efa4d62a3860f69ddb882f6.html",
    "title": "1 Gset",
    "section": "",
    "text": "1 Gset\nKind: Duplicate Undirected Random Graph, Undirected Random Graph, Undirected Weighted Random Graph Max Nonzeros: 82918 Number of Graphs: 67 Number of Nodes (Median): 2000 Number of Nodes (Range): 800 - 10000"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Gupta 6ab666bfa5f241af8edd4a731cc67abb.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Gupta 6ab666bfa5f241af8edd4a731cc67abb.html",
    "title": "1 Gupta",
    "section": "",
    "text": "1 Gupta\nKind: Optimization Problem Max Nonzeros: 9323427 Number of Graphs: 3 Number of Nodes (Median): 31802 Number of Nodes (Range): 16783 - 62064"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Hamrle d08730e72ff44b368ddd66e15119107b.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Hamrle d08730e72ff44b368ddd66e15119107b.html",
    "title": "1 Hamrle",
    "section": "",
    "text": "1 Hamrle\nKind: Circuit Simulation Problem Max Nonzeros: 5514242 Number of Graphs: 3 Number of Nodes (Median): 5952 Number of Nodes (Range): 32 - 1447360"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Harvard_Seismology 433842597c074bcbaeb8d25f3cc4d580.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Harvard_Seismology 433842597c074bcbaeb8d25f3cc4d580.html",
    "title": "1 Harvard_Seismology",
    "section": "",
    "text": "1 Harvard_Seismology\nKind: Tomography Problem Max Nonzeros: 13734559 Number of Graphs: 1 Number of Nodes (Median): 87616 Number of Nodes (Range): 87616"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Hohn 0ebaa1c011c9414aa4f22224a2e77bfa.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Hohn 0ebaa1c011c9414aa4f22224a2e77bfa.html",
    "title": "1 Hohn",
    "section": "",
    "text": "1 Hohn\nKind: Materials Problem Max Nonzeros: 948696 Number of Graphs: 6 Number of Nodes (Median): 11532 Number of Nodes (Range): 7500 - 16428"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/HVDC e210024829b543e1ab96225531a7cc6c.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/HVDC e210024829b543e1ab96225531a7cc6c.html",
    "title": "1 HVDC",
    "section": "",
    "text": "1 HVDC\nKind: Power Network Problem Max Nonzeros: 1339638 Number of Graphs: 2 Number of Nodes (Median): 107351 Number of Nodes (Range): 24842 - 189860"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/IBM_EDA 27f53c3fbea2441bb4aa54510433ca1b.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/IBM_EDA 27f53c3fbea2441bb4aa54510433ca1b.html",
    "title": "1 IBM_EDA",
    "section": "",
    "text": "1 IBM_EDA\nKind: Circuit Simulation Problem, Circuit Simulation Problem Sequence, Subsequent Circuit Simulation Problem Max Nonzeros: 766396 Number of Graphs: 7 Number of Nodes (Median): 116835 Number of Nodes (Range): 49702 - 116835"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/IPSO 0f76cf1dbac442459f94b374e4f25886.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/IPSO 0f76cf1dbac442459f94b374e4f25886.html",
    "title": "1 IPSO",
    "section": "",
    "text": "1 IPSO\nKind: Power Network Problem Max Nonzeros: 2012833 Number of Graphs: 7 Number of Nodes (Median): 29902 Number of Nodes (Range): 8140 - 226340"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_BIBD db182eea87424bc9a40d03c788c60d54.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_BIBD db182eea87424bc9a40d03c788c60d54.html",
    "title": "1 JGD_BIBD",
    "section": "",
    "text": "1 JGD_BIBD\nKind: Combinatorial Problem Max Nonzeros: 8953560 Number of Graphs: 21 Number of Nodes (Median): 3240 Number of Nodes (Range): 84 - 319770"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Forest 42beb9460d1342dbab6c2dc2607b8220.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Forest 42beb9460d1342dbab6c2dc2607b8220.html",
    "title": "1 JGD_Forest",
    "section": "",
    "text": "1 JGD_Forest\nKind: Combinatorial Problem Max Nonzeros: 4370721 Number of Graphs: 10 Number of Nodes (Median): 5451 Number of Nodes (Range): 107 - 317955"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_G5 18f2ef7d0b8343a89ed6745b3917378c.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_G5 18f2ef7d0b8343a89ed6745b3917378c.html",
    "title": "1 JGD_G5",
    "section": "",
    "text": "1 JGD_G5\nKind: Combinatorial Problem Max Nonzeros: 1790490 Number of Graphs: 13 Number of Nodes (Median): 2875 Number of Nodes (Range): 77 - 47894"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_GL7d 94b14137239641d4a2930fa66e2d2820.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_GL7d 94b14137239641d4a2930fa66e2d2820.html",
    "title": "1 JGD_GL7d",
    "section": "",
    "text": "1 JGD_GL7d\nKind: Combinatorial Problem Max Nonzeros: 37322725 Number of Graphs: 17 Number of Nodes (Median): 349443 Number of Nodes (Range): 60 - 1955309"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Homology 13bdbbcbacda422791ab03944bd215b4.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Homology 13bdbbcbacda422791ab03944bd215b4.html",
    "title": "1 JGD_Homology",
    "section": "",
    "text": "1 JGD_Homology\nKind: Combinatorial Problem Max Nonzeros: 3386880 Number of Graphs: 128 Number of Nodes (Median): 4095 Number of Nodes (Range): 15 - 564480"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Margulies 6a770ac71330417481c53a9094007ae6.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Margulies 6a770ac71330417481c53a9094007ae6.html",
    "title": "1 JGD_Margulies",
    "section": "",
    "text": "1 JGD_Margulies\nKind: Combinatorial Problem Max Nonzeros: 2170814 Number of Graphs: 23 Number of Nodes (Median): 625 Number of Nodes (Range): 25 - 902103"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_SL6 61b8ff8c9b04427b9631878032c77db8.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_SL6 61b8ff8c9b04427b9631878032c77db8.html",
    "title": "1 JGD_SL6",
    "section": "",
    "text": "1 JGD_SL6\nKind: Combinatorial Problem Max Nonzeros: 14966 Number of Graphs: 7 Number of Nodes (Median): 970 Number of Nodes (Range): 434 - 1271"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Taha 68b6f9d4fe324e549d3805d04dc57d96.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/JGD_Taha 68b6f9d4fe324e549d3805d04dc57d96.html",
    "title": "1 JGD_Taha",
    "section": "",
    "text": "1 JGD_Taha\nKind: Combinatorial Problem Max Nonzeros: 137228 Number of Graphs: 2 Number of Nodes (Median): 26264 Number of Nodes (Range): 14596 - 37932"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Kamvar 96cad0f9784642e5a83b0a5f3b10ea17.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Kamvar 96cad0f9784642e5a83b0a5f3b10ea17.html",
    "title": "1 Kamvar",
    "section": "",
    "text": "1 Kamvar\nKind: Directed Graph Max Nonzeros: 7583376 Number of Graphs: 2 Number of Nodes (Median): 482674.5 Number of Nodes (Range): 281903 - 683446"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Kim 0eb63eb855eb484a9ba0e8e6235205a6.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Kim 0eb63eb855eb484a9ba0e8e6235205a6.html",
    "title": "1 Kim",
    "section": "",
    "text": "1 Kim\nKind: 2D/3D Problem Max Nonzeros: 11330020 Number of Graphs: 2 Number of Nodes (Median): 247695.5 Number of Nodes (Range): 38415 - 456976"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Langemyr 9f44f90daf724e5b90c7ae49d278af75.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Langemyr 9f44f90daf724e5b90c7ae49d278af75.html",
    "title": "1 Langemyr",
    "section": "",
    "text": "1 Langemyr\nKind: Structural Problem Max Nonzeros: 97645 Number of Graphs: 1 Number of Nodes (Median): 1500 Number of Nodes (Range): 1500"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Lee 7f05d1fb4d134bccb307184b36debfe6.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Lee 7f05d1fb4d134bccb307184b36debfe6.html",
    "title": "1 Lee",
    "section": "",
    "text": "1 Lee\nKind: Electromagnetics Problem Max Nonzeros: 20239237 Number of Graphs: 2 Number of Nodes (Median): 282581 Number of Nodes (Range): 74062 - 491100"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Li c8a7f7df572b480dbe5398614dd15b66.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Li c8a7f7df572b480dbe5398614dd15b66.html",
    "title": "1 Li",
    "section": "",
    "text": "1 Li\nKind: Duplicate Electromagnetics Problem, Electromagnetics Problem Max Nonzeros: 1350309 Number of Graphs: 2 Number of Nodes (Median): 22695 Number of Nodes (Range): 22695"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/LiuWenzhuo 92936cf8a8fc4878b753a213c03d90d2.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/LiuWenzhuo 92936cf8a8fc4878b753a213c03d90d2.html",
    "title": "1 LiuWenzhuo",
    "section": "",
    "text": "1 LiuWenzhuo\nKind: Power Network Problem Max Nonzeros: 64424 Number of Graphs: 1 Number of Nodes (Median): 15838 Number of Nodes (Range): 15838"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/LPnetlib dd27871fa12347a3a3f45d41449c09d9.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/LPnetlib dd27871fa12347a3a3f45d41449c09d9.html",
    "title": "1 LPnetlib",
    "section": "",
    "text": "1 LPnetlib\nKind: Linear Programming Problem Max Nonzeros: 1408073 Number of Graphs: 138 Number of Nodes (Median): 1312.5 Number of Nodes (Range): 13 - 243246\nThe files in this directory are a translation of the linear programming\nproblems in Netlib.  You can obtain more information about the Netlib LP\nproblems by sending email to netlib :at the domain:\nornl.gov with the message\n\"send index from lp\"."
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Luong 46aac20124cc46aeb2a23a4a021e1265.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Luong 46aac20124cc46aeb2a23a4a021e1265.html",
    "title": "1 Luong",
    "section": "",
    "text": "1 Luong\nKind: Computer Graphics/Vision Problem Max Nonzeros: 37056 Number of Graphs: 2 Number of Nodes (Median): 2930 Number of Nodes (Range): 1388 - 4472"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Mancktelow 57ce5ac0245f4bf68c1f9dd6eaa230ff.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Mancktelow 57ce5ac0245f4bf68c1f9dd6eaa230ff.html",
    "title": "1 Mancktelow",
    "section": "",
    "text": "1 Mancktelow\nKind: Materials Problem Max Nonzeros: 1133641 Number of Graphs: 1 Number of Nodes (Median): 37762 Number of Nodes (Range): 37762"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Martin 9fbb1311d4c5478583690f7c6e6d759e.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Martin 9fbb1311d4c5478583690f7c6e6d759e.html",
    "title": "1 Martin",
    "section": "",
    "text": "1 Martin\nKind: Chemical Oceanography Problem Max Nonzeros: 6226538 Number of Graphs: 1 Number of Nodes (Median): 400320 Number of Nodes (Range): 400320"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/MAWI 56552293c41047d2a6d84d05033ffb71.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/MAWI 56552293c41047d2a6d84d05033ffb71.html",
    "title": "1 MAWI",
    "section": "",
    "text": "1 MAWI\nKind: Undirected Weighted Graph Max Nonzeros: 480047894 Number of Graphs: 5 Number of Nodes (Median): 68863315 Number of Nodes (Range): 18571154 - 226196185"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Mazaheri 95366cac1bb34badb169502b8f0891ed.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Mazaheri 95366cac1bb34badb169502b8f0891ed.html",
    "title": "1 Mazaheri",
    "section": "",
    "text": "1 Mazaheri\nKind: Computer Vision Problem Max Nonzeros: 20207907 Number of Graphs: 1 Number of Nodes (Median): 513351 Number of Nodes (Range): 513351"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Meng 91de3afaa7e94186b9d60f4dd51a5e74.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Meng 91de3afaa7e94186b9d60f4dd51a5e74.html",
    "title": "1 Meng",
    "section": "",
    "text": "1 Meng\nKind: Computational Chemistry Problem Max Nonzeros: 4137369 Number of Graphs: 1 Number of Nodes (Median): 274087 Number of Nodes (Range): 274087"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Mittelmann 25b82d10b2074066b00eb242372eca90.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Mittelmann 25b82d10b2074066b00eb242372eca90.html",
    "title": "1 Mittelmann",
    "section": "",
    "text": "1 Mittelmann\nKind: Linear Programming Problem Max Nonzeros: 46168124 Number of Graphs: 30 Number of Nodes (Median): 317118 Number of Nodes (Range): 24460 - 1961394"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/ML_Graph ce335b6315fa46f48a726497718c3a96.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/ML_Graph ce335b6315fa46f48a726497718c3a96.html",
    "title": "1 ML_Graph",
    "section": "",
    "text": "1 ML_Graph\nKind: Undirected Weighted Graph Max Nonzeros: 618158 Number of Graphs: 36 Number of Nodes (Median): 1599.5 Number of Nodes (Range): 106 - 38547"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Morandini 8c12029a9a8b46cd9697c1fe510e2298.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Morandini 8c12029a9a8b46cd9697c1fe510e2298.html",
    "title": "1 Morandini",
    "section": "",
    "text": "1 Morandini\nKind: Robotics Problem, Structural Problem Max Nonzeros: 10685 Number of Graphs: 3 Number of Nodes (Median): 120 Number of Nodes (Range): 100 - 791"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Mulvey d25764c991844b79aea96232a5f5915e.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Mulvey d25764c991844b79aea96232a5f5915e.html",
    "title": "1 Mulvey",
    "section": "",
    "text": "1 Mulvey\nKind: Duplicate Economic Problem, Economic Problem Max Nonzeros: 596992 Number of Graphs: 2 Number of Nodes (Median): 74752 Number of Nodes (Range): 74752"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Nasa 29715af8130340e3ba6e8789d7cd4b8e.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Nasa 29715af8130340e3ba6e8789d7cd4b8e.html",
    "title": "1 Nasa",
    "section": "",
    "text": "1 Nasa\nKind: Duplicate Structural Problem, Structural Problem Max Nonzeros: 2677324 Number of Graphs: 11 Number of Nodes (Median): 6691 Number of Nodes (Range): 1824 - 54870"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Negre b0446472b33341a78d79ad2e8cf3434e.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Negre b0446472b33341a78d79ad2e8cf3434e.html",
    "title": "1 Negre",
    "section": "",
    "text": "1 Negre\nKind: Computational Chemistry Problem Max Nonzeros: 63024 Number of Graphs: 1 Number of Nodes (Median): 730 Number of Nodes (Range): 730"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Newman 36154c22301b415c874a4786b8361e20.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Newman 36154c22301b415c874a4786b8361e20.html",
    "title": "1 Newman",
    "section": "",
    "text": "1 Newman\nKind: Directed Multigraph, Directed Weighted Graph, Undirected Graph, Undirected Multigraph, Undirected Weighted Graph Max Nonzeros: 351382 Number of Graphs: 16 Number of Nodes (Median): 1539.5 Number of Nodes (Range): 34 - 40421"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/NYPA 42ea846ac53e4d4d8ede565f935f7bb8.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/NYPA 42ea846ac53e4d4d8ede565f935f7bb8.html",
    "title": "1 NYPA",
    "section": "",
    "text": "1 NYPA\nKind: Least Squares Problem Max Nonzeros: 1308415 Number of Graphs: 8 Number of Nodes (Median): 3309 Number of Nodes (Range): 32 - 75077"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Okunbor caaa53fdb13b4dc68d61feae22bf19cd.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Okunbor caaa53fdb13b4dc68d61feae22bf19cd.html",
    "title": "1 Okunbor",
    "section": "",
    "text": "1 Okunbor\nKind: Acoustics Problem Max Nonzeros: 127762 Number of Graphs: 2 Number of Nodes (Median): 8194.5 Number of Nodes (Range): 8184 - 8205"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/PARSEC 4e97c8e47f404578aad51071226d1fa0.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/PARSEC 4e97c8e47f404578aad51071226d1fa0.html",
    "title": "1 PARSEC",
    "section": "",
    "text": "1 PARSEC\nKind: Theoretical/Quantum Chemistry Problem Max Nonzeros: 18488476 Number of Graphs: 21 Number of Nodes (Median): 67024 Number of Nodes (Range): 769 - 268096"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/POLYFLOW bfe559fa78a84102915bc916eb99f168.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/POLYFLOW bfe559fa78a84102915bc916eb99f168.html",
    "title": "1 POLYFLOW",
    "section": "",
    "text": "1 POLYFLOW\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 1990919 Number of Graphs: 2 Number of Nodes (Median): 30184.5 Number of Nodes (Range): 29957 - 30412"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/PowerSystem 9788a8e7a9904254baa67d062e58a6a5.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/PowerSystem 9788a8e7a9904254baa67d062e58a6a5.html",
    "title": "1 PowerSystem",
    "section": "",
    "text": "1 PowerSystem\nKind: Power Network Problem Max Nonzeros: 805839 Number of Graphs: 1 Number of Nodes (Median): 197156 Number of Nodes (Range): 197156"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Priebel be188dcd5fa346719f8bd8e05c13a073.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Priebel be188dcd5fa346719f8bd8e05c13a073.html",
    "title": "1 Priebel",
    "section": "",
    "text": "1 Priebel\nKind: Combinatorial Problem Max Nonzeros: 299756 Number of Graphs: 6 Number of Nodes (Median): 5523.5 Number of Nodes (Range): 584 - 24430"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Qaplib dedb8df29d754943bda857a55015f5fa.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Qaplib dedb8df29d754943bda857a55015f5fa.html",
    "title": "1 Qaplib",
    "section": "",
    "text": "1 Qaplib\nKind: Linear Programming Problem Max Nonzeros: 1567800 Number of Graphs: 8 Number of Nodes (Median): 5244 Number of Nodes (Range): 225 - 379350"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/QLi 208725e30800475aa4cd305cbd7a08c0.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/QLi 208725e30800475aa4cd305cbd7a08c0.html",
    "title": "1 QLi",
    "section": "",
    "text": "1 QLi\nKind: Optimization Problem Max Nonzeros: 5240084 Number of Graphs: 3 Number of Nodes (Median): 160000 Number of Nodes (Range): 160000 - 440020"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/QY 21dfda31109243189a0f1aeddfb5736f.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/QY 21dfda31109243189a0f1aeddfb5736f.html",
    "title": "1 QY",
    "section": "",
    "text": "1 QY\nKind: Power Network Problem Sequence Max Nonzeros: 1042160 Number of Graphs: 2 Number of Nodes (Median): 27335 Number of Nodes (Range): 14454 - 40216"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Raju cade69418ca5431d81fabc933d4abf25.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Raju cade69418ca5431d81fabc933d4abf25.html",
    "title": "1 Raju",
    "section": "",
    "text": "1 Raju\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 3788857 Number of Graphs: 1 Number of Nodes (Median): 67173 Number of Nodes (Range): 67173"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Ronis f502525859fa45aab9b211e590f1ea03.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Ronis f502525859fa45aab9b211e590f1ea03.html",
    "title": "1 Ronis",
    "section": "",
    "text": "1 Ronis\nKind: Materials Problem Max Nonzeros: 3866688 Number of Graphs: 2 Number of Nodes (Median): 103032 Number of Nodes (Range): 48600 - 157464"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Rothberg 96e296bb15484d8e97c81e6cb2755fd3.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Rothberg 96e296bb15484d8e97c81e6cb2755fd3.html",
    "title": "1 Rothberg",
    "section": "",
    "text": "1 Rothberg\nKind: Computational Fluid Dynamics Problem, Structural Problem Max Nonzeros: 9080404 Number of Graphs: 6 Number of Nodes (Median): 62113 Number of Nodes (Range): 4350 - 153746"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Rudnyi 9b8483dd9b2c433784874e742eaccfdd.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Rudnyi 9b8483dd9b2c433784874e742eaccfdd.html",
    "title": "1 Rudnyi",
    "section": "",
    "text": "1 Rudnyi\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 2035281 Number of Graphs: 1 Number of Nodes (Median): 60740 Number of Nodes (Range): 60740"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Sanghavi 8d85e26e109d44c6a3e2aa9d1358b643.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Sanghavi 8d85e26e109d44c6a3e2aa9d1358b643.html",
    "title": "1 Sanghavi",
    "section": "",
    "text": "1 Sanghavi\nKind: Semiconductor Device Problem Max Nonzeros: 380415 Number of Graphs: 1 Number of Nodes (Median): 51993 Number of Nodes (Range): 51993"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Schenk_AFE 2b9400787067460b9c0f1acf5b5c4c55.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Schenk_AFE 2b9400787067460b9c0f1acf5b5c4c55.html",
    "title": "1 Schenk_AFE",
    "section": "",
    "text": "1 Schenk_AFE\nKind: Structural Problem, Structural Problem Sequence, Subsequent Structural Problem Max Nonzeros: 52259885 Number of Graphs: 16 Number of Nodes (Median): 504855 Number of Nodes (Range): 503625 - 1508065"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Schenk_IBMSDS 9c29bb7be95d433d8c2286a04e128059.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Schenk_IBMSDS 9c29bb7be95d433d8c2286a04e128059.html",
    "title": "1 Schenk_IBMSDS",
    "section": "",
    "text": "1 Schenk_IBMSDS\nKind: Semiconductor Device Problem Max Nonzeros: 1205518 Number of Graphs: 7 Number of Nodes (Median): 51448 Number of Nodes (Range): 27628 - 125329"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Schmid ce8f63737dc54e5e843588425aa7bca8.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Schmid ce8f63737dc54e5e843588425aa7bca8.html",
    "title": "1 Schmid",
    "section": "",
    "text": "1 Schmid\nKind: Thermal Problem Max Nonzeros: 8580313 Number of Graphs: 2 Number of Nodes (Median): 655349.5 Number of Nodes (Range): 82654 - 1228045"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Shen d8ae17d8b18347749cceb8a845efdc94.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Shen d8ae17d8b18347749cceb8a845efdc94.html",
    "title": "1 Shen",
    "section": "",
    "text": "1 Shen\nKind: 2D/3D Problem Max Nonzeros: 553562 Number of Graphs: 4 Number of Nodes (Median): 11708.5 Number of Nodes (Range): 3432 - 18510"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Simon 7b076106a4b24610934449b6ca1f6782.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Simon 7b076106a4b24610934449b6ca1f6782.html",
    "title": "1 Simon",
    "section": "",
    "text": "1 Simon\nKind: Computational Fluid Dynamics Problem, Computational Fluid Dynamics Problem Sequence, Directed Weighted Random Graph, Structural Problem, Subsequent Computational Fluid Dynamics Problem Max Nonzeros: 1853104 Number of Graphs: 12 Number of Nodes (Median): 17962.5 Number of Nodes (Range): 3242 - 62424"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/SNAP a6d764801e9345f491bd4831468d0105.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/SNAP a6d764801e9345f491bd4831468d0105.html",
    "title": "1 SNAP",
    "section": "",
    "text": "1 SNAP\nKind: Directed Graph, Directed Graph With Communities, Directed Temporal Multigraph, Directed Weighted Graph, Directed Weighted Graph Sequence, Directed Weighted Temporal Graph, Directed Weighted Temporal Multigraph, Undirected Graph, Undirected Graph Sequence, Undirected Graph With Communities Max Nonzeros: 3612134270 Number of Graphs: 68 Number of Nodes (Median): 82007.5 Number of Nodes (Range): 1005 - 65608366\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets, Jure Leskovec http://snap.stanford.edu/data/index.html email jure at cs.stanford.edu\nThe following matrices/graphs were added to the collection in June 2010\nby Tim Davis (problem id and name): \n\nxxx\n\nThen the following problems were added in July 2018.  All data and\nmetadata from the SNAP data set was imported into the SuiteSparse\nMatrix Collection.\n\nxxx\n\nThe following 13 graphs/networks were in the SNAP data set in July 2018 but\nhave not yet been imported into the SuiteSparse Matrix Collection.  They may be\nadded in the future:"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Springer 1cca166b94ef42b981237104c4146b7c.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Springer 1cca166b94ef42b981237104c4146b7c.html",
    "title": "1 Springer",
    "section": "",
    "text": "1 Springer\nKind: Least Squares Problem Max Nonzeros: 6019939 Number of Graphs: 1 Number of Nodes (Median): 327062 Number of Nodes (Range): 327062"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Sumner 626bc661691745bcbdd2655c2c9e8943.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Sumner 626bc661691745bcbdd2655c2c9e8943.html",
    "title": "1 Sumner",
    "section": "",
    "text": "1 Sumner\nKind: Computer Graphics/Vision Problem Max Nonzeros: 117954 Number of Graphs: 1 Number of Nodes (Median): 29493 Number of Nodes (Range): 29493"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Szczerba 01d88f5e69c74be3a31d597d88f7393e.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Szczerba 01d88f5e69c74be3a31d597d88f7393e.html",
    "title": "1 Szczerba",
    "section": "",
    "text": "1 Szczerba\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 191368 Number of Graphs: 1 Number of Nodes (Median): 20896 Number of Nodes (Range): 20896"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/TKK 4f82f0c46b554052ac98c99316ff36cc.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/TKK 4f82f0c46b554052ac98c99316ff36cc.html",
    "title": "1 TKK",
    "section": "",
    "text": "1 TKK\nKind: Structural Problem, Structural Problem Sequence Max Nonzeros: 4706073 Number of Graphs: 12 Number of Nodes (Median): 13681 Number of Nodes (Range): 1282 - 143571"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Toledo 5e4819f49ab846c1955ed4f449567005.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Toledo 5e4819f49ab846c1955ed4f449567005.html",
    "title": "1 Toledo",
    "section": "",
    "text": "1 Toledo\nKind: Counter Example Problem Max Nonzeros: 247424 Number of Graphs: 1 Number of Nodes (Median): 68600 Number of Nodes (Range): 68600"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/TSOPF 4205dfa7e01e49a1b02fbdcc16d96f33.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/TSOPF 4205dfa7e01e49a1b02fbdcc16d96f33.html",
    "title": "1 TSOPF",
    "section": "",
    "text": "1 TSOPF\nKind: Power Network Problem Max Nonzeros: 16171169 Number of Graphs: 27 Number of Nodes (Median): 29214 Number of Nodes (Range): 2454 - 120216"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Untitled 66ffc2c4932a4d019a7197ea25afc379.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Untitled 66ffc2c4932a4d019a7197ea25afc379.html",
    "title": "1 Untitled",
    "section": "",
    "text": "1 Untitled"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Untitled 7cd368b9f85846a99aed9aeca45a1329.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Untitled 7cd368b9f85846a99aed9aeca45a1329.html",
    "title": "1 Untitled",
    "section": "",
    "text": "1 Untitled"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/vanHeukelum 482692deb443464eac6fce967c20b863.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/vanHeukelum 482692deb443464eac6fce967c20b863.html",
    "title": "1 vanHeukelum",
    "section": "",
    "text": "1 vanHeukelum\nKind: Directed Weighted Graph Max Nonzeros: 99199551 Number of Graphs: 13 Number of Nodes (Median): 3534 Number of Nodes (Range): 5 - 5154859"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Vavasis b50c41fbae144043aa7cc769ccddb7dd.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Vavasis b50c41fbae144043aa7cc769ccddb7dd.html",
    "title": "1 Vavasis",
    "section": "",
    "text": "1 Vavasis\nKind: 2D/3D Problem Max Nonzeros: 1683902 Number of Graphs: 1 Number of Nodes (Median): 41092 Number of Nodes (Range): 41092"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/VLSI db5b816de22d45c38b81c69f21f25870.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/VLSI db5b816de22d45c38b81c69f21f25870.html",
    "title": "1 VLSI",
    "section": "",
    "text": "1 VLSI\nKind: Semiconductor Device Problem, Semiconductor Process Problem Max Nonzeros: 349321980 Number of Graphs: 14 Number of Nodes (Median): 741786 Number of Nodes (Range): 46994 - 11449533"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Watson e890a08ebd6f4b53be4f5bc24c8fa186.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Watson e890a08ebd6f4b53be4f5bc24c8fa186.html",
    "title": "1 Watson",
    "section": "",
    "text": "1 Watson\nKind: 2D/3D Problem Max Nonzeros: 748331 Number of Graphs: 2 Number of Nodes (Median): 76306 Number of Nodes (Range): 40401 - 112211"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Wissgott 6588ad460ab848dab36d46f6a4385b78.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Wissgott 6588ad460ab848dab36d46f6a4385b78.html",
    "title": "1 Wissgott",
    "section": "",
    "text": "1 Wissgott\nKind: Computational Fluid Dynamics Problem Max Nonzeros: 3674625 Number of Graphs: 1 Number of Nodes (Median): 525825 Number of Nodes (Range): 525825"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Yoshiyasu a90912e21107494c90426bc4bc7a333e.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Yoshiyasu a90912e21107494c90426bc4bc7a333e.html",
    "title": "1 Yoshiyasu",
    "section": "",
    "text": "1 Yoshiyasu\nKind: Computer Graphics/Vision Problem Max Nonzeros: 853829 Number of Graphs: 2 Number of Nodes (Median): 237011.5 Number of Nodes (Range): 234023 - 240000"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Zaoui 54fb322bcade4adba28f189818e60370.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Zaoui 54fb322bcade4adba28f189818e60370.html",
    "title": "1 Zaoui",
    "section": "",
    "text": "1 Zaoui\nKind: Optimization Problem Max Nonzeros: 12771361 Number of Graphs: 1 Number of Nodes (Median): 2063494 Number of Nodes (Range): 2063494"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Zitney 9a340a10f6e744c3ba9342e8b5f85cbf.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/SuiteSparse Matrix Collection b8772d6a2cbb456894b4673e32c6f956/Children of SuiteSparse Matrix collection d16b1e4a85034b53935fd3c1285860cc/Zitney 9a340a10f6e744c3ba9342e8b5f85cbf.html",
    "title": "1 Zitney",
    "section": "",
    "text": "1 Zitney\nKind: Chemical Process Simulation Problem, Chemical Process Simulation Problem Sequence Max Nonzeros: 94408 Number of Graphs: 8 Number of Nodes (Median): 3017.5 Number of Nodes (Range): 1048 - 5308"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Tobler's Flow Mapper 5b849ca858de45f192db4b8bd4f44c65.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Tobler's Flow Mapper 5b849ca858de45f192db4b8bd4f44c65.html",
    "title": "1 Tobler’s Flow Mapper",
    "section": "",
    "text": "1 Tobler’s Flow Mapper\nNote: This dataset contains migration and trade data between various countries and states. We do not currently provide this dataset for download. Origin Notes: Data comes packaged with the http://csiss.ncgia.ucsb.edu/clearinghouse/FlowMapper/, a program designed by Waldo Tobler in 1987. This software was rereleased for Windows in 2003 by the Center for Spatially Integrated Social Science. graph features handled: edge weighted, spatial Graph features in papers: spatial,weighted edges Origin Paper: A geographic flow mapping program (https://www.notion.so/A-geographic-flow-mapping-program-c72fb2ce215848aeb498bf2ddade27f5?pvs=21) Originally found at: http://csiss.ncgia.ucsb.edu/clearinghouse/FlowMapper/ Appeared in years: 2011 Type of Collection: Skip is it stored properly?: No must be analyzed: No In repo?: No Related to Literature - Algorithm (1) (Dataset tag relations): Flow Map Layout via Spiral Trees (https://www.notion.so/Flow-Map-Layout-via-Spiral-Trees-93bf65d7c22f4f2ab5585700ca7d1e5e?pvs=21) cleaned format?: No duplicate?: No link works?: No Added in paper: No Origin paper plaintext: A geographic flow mapping program Page id: 5b849ca858de45f192db4b8bd4f44c65 unavailable/skip: No Cleaned ALL data: No first look: No Related to Literature - Algorithm (Dataset tag relations) 1: Flow Map Layout via Spiral Trees (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Flow%20Map%20Layout%20via%20Spiral%20Trees%2049a6b38039174e2bb6706ddb2252c18e.md)\n\n\n2 Body\n\nDescription from Literature\nFrom “Flow Map Layout via Spiral Trees”:\n\nOur data stems from various sources which we summarize in the following: Tobler [1], Moran (personal communication), Stelder [21], the Indonesian central planning bureau BAPPE-NAS (www.regroningen.nl/irios tables.shtml), Statistics Norway (www.ssb.no), Central Statistical Bureau of Latvia (www.csb.gov.lv), and the Scotch Whisky Association in Edinburgh, statistical report 2009 (www.scotch-whisky.org.uk).\n\n\n\nExample Figures\nFrom “Flow Map Layout via Spiral Trees”:\n\n\n\nScreen Shot 2023-08-17 at 4.53.16 PM.png\n\n\n\n\n\nScreen Shot 2023-08-17 at 4.53.57 PM.png\n\n\n=== STOP RENDERING ===\nhttp://csiss.ncgia.ucsb.edu/clearinghouse/FlowMapper/"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Tree of Life cb0493d6b6da4a73a979f06225983011.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Tree of Life cb0493d6b6da4a73a979f06225983011.html",
    "title": "1 Tree of Life",
    "section": "",
    "text": "1 Tree of Life\nOrigin Notes: Part of the http://tolweb.org/tree/to characterize information about biodiversity and their evolutionary genealogy. graph features handled: categorical nodes, trees Graph features in papers: dynamic,dynamic (discrete) Origin Paper: Interactive Tree Of Life (iTOL) v5: an online tool for phylogenetic tree display and annotation (https://www.notion.so/Interactive-Tree-Of-Life-iTOL-v5-an-online-tool-for-phylogenetic-tree-display-and-annotation-0b90d02cd5504ebfa21db648bc277efc?pvs=21), The Tree of Life Web Project (https://www.notion.so/The-Tree-of-Life-Web-Project-3a0dbc5490f5487e95400630b2a1df58?pvs=21) Originally found at: https://www.kaggle.com/datasets/konivat/tree-of-life?resource=download Size: 35,960 nodes, 35,959 edges Number of Graphs: 1 Appeared in years: 2023 Type of Collection: Single Graph is it stored properly?: No must be analyzed: No In repo?: Yes cleaned format?: Yes duplicate?: No link works?: Yes Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90e404cf7480eec0555fd Origin paper plaintext: Interactive Tree Of Life (iTOL) v5: an online tool for phylogenetic tree display and annotation, The Tree of Life Web Project Page id: cb0493d6b6da4a73a979f06225983011 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d9492294a6be103312e71d OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d96dfb4cf748115a0556b0 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d971350c2b4d0f65386558 first look: Yes sparkline data: {‘min’: 1, ‘max’: 416, ‘step_size’: 15, ‘num_bins’: 28, ‘bins’: [0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345, 360, 375, 390, 405], ‘node_degree’: [35541, 291, 57, 35, 17, 5, 6, 0, 0, 2, 2, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1]} Related to Literature - Algorithm (Dataset tag relations) 1: Visualizing Evolving Trees (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Visualizing%20Evolving%20Trees%203596f84acbbe46799f4f093af2f28aae.md)\n\n\n2 Body\n\nDescriptions from Literature\nFrom “Visualizing Evolving Trees”:\n\nThe Tree of Life: captures the evolutionary progression of life on Earth [37]. The underlying data is a tree structure with a natural time component. As a new species evolves, a new node in the tree is added. The edges give the parent-child relation of the nodes, where the parent is the original species, and the child is the new species. We use a subset of this graph with 500 nodes. The maximum node degree of this tree is 5, and the radius is 24\n\n\n\nExample Figures\nFrom “Visualizing Evolving Trees”:\n\n\n\nUntitled\n\n\nFig. 4. Layouts obtained by the seven methods for the tree of life dataset.\n== STOP RENDERING ==\nFrom:\nhttp://tolweb.org/tree/"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Untitled 87477c5e620b4dd89f8b4bc4dfb9f080.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/Untitled 87477c5e620b4dd89f8b4bc4dfb9f080.html",
    "title": "1 Untitled",
    "section": "",
    "text": "1 Untitled\nis it stored properly?: No must be analyzed: No In repo?: No cleaned format?: No duplicate?: No link works?: No Added in paper: No Page id: 87477c5e620b4dd89f8b4bc4dfb9f080 unavailable/skip: No Cleaned ALL data: No first look: No"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/WebCompute 7a10c41801914e6faa5a6cc1b1ef0b77.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/WebCompute 7a10c41801914e6faa5a6cc1b1ef0b77.html",
    "title": "1 WebCompute",
    "section": "",
    "text": "1 WebCompute\nNote: Their website also features proofs of the crossing numbers of many of the Rome-Lib graphs. Newest version of database specifies non-planar graphs, but older versions do have some planar graphs. Origin Notes: The dataset is comprised of instances of graphs uploaded to Crossing Number WebCompute, attributed to M. Chimani, T. Wiedera. http://crossings.uos.de/cr-proof-system-paper. graph features handled: known crossing number, nonplanar Graph features in papers: generic Origin Paper: An ILP-based Proof System for the Crossing Number Problem (https://www.notion.so/An-ILP-based-Proof-System-for-the-Crossing-Number-Problem-c71817d4f3a44de4943b8ad3980da063?pvs=21) Originally found at: https://tcs.uos.de/doku.php?id=research/cr Size: 3-112 nodes, 3-366 edges Number of Graphs: 507 Appeared in years: 2016 Type of Collection: Uniform Benchmark is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): An ILP-based Proof System for the Crossing Number Problem (https://www.notion.so/An-ILP-based-Proof-System-for-the-Crossing-Number-Problem-b61271c4f96a4633aba0179af767a5e0?pvs=21) cleaned format?: Yes duplicate?: No link works?: No Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90ea01101aa0c9e6a0c74 Origin paper plaintext: An ILP-based Proof System for the Crossing Number Problem Page id: 7a10c41801914e6faa5a6cc1b1ef0b77 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d94828803e0c0bf5558bab OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d94d7d803e0c0c1f558c9c OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d9709994a6be112912e9ec first look: No sparkline data: {‘min’: 3, ‘max’: 112, ‘step_size’: 5, ‘num_bins’: 23, ‘bins’: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110], ‘num_nodes’: [5, 168, 70, 114, 65, 17, 23, 11, 7, 2, 3, 4, 3, 1, 2, 1, 1, 0, 0, 2, 7, 0, 1]} Related to Literature - Algorithm (Dataset tag relations) 1: An ILP-based Proof System for the Crossing Number Problem (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/An%20ILP-based%20Proof%20System%20for%20the%20Crossing%20Number%20%20e172212e85b74e12bcf2d0320d2b1eb6.md)\n\n\n2 Body\n\nStatistics\n\n\n\nfour_in_one.svg\n\n\n\n\nDescriptions from Literature\nFrom “An ILP-based Proof System for the Crossing Number Problem”:\n\nTo determine the applicability of the proof system, we tested the algorithms on three benchmark sets: the 3110 non-trivial Rome graphs [14], the 1277 North graphs [15], and the145 non-planar graphs (http://crossings.uos.de/instances) collected by our crossing number web-service.\n\n=== STOP RENDERING ===\nPaper attached to his dataset provides no visuliaztion of the graph, https://arxiv.org/abs/2108.11443 also uses the dataset and provides no visualizations of the graphs themselves"
  },
  {
    "objectID": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/World Greenhouse Gas Emissions 859aab42a55e43ac9dad1eae1a91a534.html",
    "href": "data/Benchmark datasets 64e0439269f9497799025562a4087ce1/World Greenhouse Gas Emissions 859aab42a55e43ac9dad1eae1a91a534.html",
    "title": "1 World Greenhouse Gas Emissions",
    "section": "",
    "text": "1 World Greenhouse Gas Emissions\nNote: Linked data is from a different year than the data used by https://doi.org/10.1109/PacificVis.2018.00025, for which data could not be found. Origin Notes: Data collected by the https://www.wri.org/. graph features handled: categorical nodes, edge weighted, layered graphs, node weighted Graph features in papers: clusters (pre-existing),layered graphs,n-layers Origin Paper: Navigating the Numbers: Greenhouse Gas Data and International Climate Policy (https://www.notion.so/Navigating-the-Numbers-Greenhouse-Gas-Data-and-International-Climate-Policy-83d48a003c25483ea04e4c49c64553f0?pvs=21) Originally found at: https://www.wri.org/data/world-greenhouse-gas-emissions-2005 https://www.wri.org/search?keys=world%20greenhouse%20gas%20emissions&f%5B0%5D=content_type%3Adata https://github.com/lhc70000/sankey/tree/master Size: 40 nodes, 85 edges Number of Graphs: 1 Appeared in years: 2018 Type of Collection: Single Graph is it stored properly?: No must be analyzed: No In repo?: Yes Related to Literature - Algorithm (1) (Dataset tag relations): Optimal Sankey Diagrams via Integer Programming (https://www.notion.so/Optimal-Sankey-Diagrams-via-Integer-Programming-87de96d0019e4e27ba0e57c27a0d5b15?pvs=21) cleaned format?: Yes duplicate?: No link works?: No Added in paper: No OSF link json: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d90eb2803e0c0b03558c69 Origin paper plaintext: Navigating the Numbers: Greenhouse Gas Data and International Climate Policy Page id: 859aab42a55e43ac9dad1eae1a91a534 unavailable/skip: No Cleaned ALL data: No OSF link gexf: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d9493c803e0c0c0c558ba6 OSF link gml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d94d8b803e0c0c1f558cb4 OSF link graphml: https://files.osf.io/v1/resources/j7ucv/providers/osfstorage/64d971484cf748115a055875 first look: No sparkline data: {‘min’: 2, ‘max’: 20, ‘step_size’: 1, ‘num_bins’: 21, ‘bins’: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], ‘node_degree’: [0, 0, 12, 12, 4, 6, 2, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]} Related to Literature - Algorithm (Dataset tag relations) 1: Optimal Sankey Diagrams via Integer Programming (../Benchmark%20sets%200cc6b5e454304aec98f3b59b1a720476/Literature%20ad87f14e7097454fb2f784e2c8a2797a/Literature%20-%20Algorithm%2012e01bfc60a84007aa7d2d34293e123d/Optimal%20Sankey%20Diagrams%20via%20Integer%20Programming%20fcb5d816998f40d6b57c4d8dd5a8b52f.md)\n\n\n2 Body\n\nStatistics\n\n\n\ndegree_distr.svg\n\n\n\n\nDescriptions from Literature\n\nWe have tested our method on the “World Greenhouse Gas Emissions” data from the World Resources Institute [8]. After transforming the “long” edges of the graph into “short” edges and adding the corresponding dummy nodes, as described in Section 3, this example has 4 layers, 55 nodes and 100 edges. The node ordering in the layout of the Sankey diagram shown in Figure 1 has been computed using Sugiyama’s heuristic method [13].\n\n\n\nExample Figures\nFrom Optimal Sankey Diagrams via Integer Linear Programming:\n\n\n\nScreen Shot 2023-08-09 at 11.13.23 AM.png\n\n\n\n\n\nScreen Shot 2023-01-21 at 2.59.58 PM.png\n\n\n\n\n\nScreen Shot 2023-01-21 at 3.00.19 PM.png"
  },
  {
    "objectID": "env-home/lib/python3.11/site-packages/httpcore-1.0.5.dist-info/licenses/LICENSE.html",
    "href": "env-home/lib/python3.11/site-packages/httpcore-1.0.5.dist-info/licenses/LICENSE.html",
    "title": "GD benchmark sets",
    "section": "",
    "text": "Copyright © 2020, Encode OSS Ltd. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "env-home/lib/python3.11/site-packages/idna-3.7.dist-info/LICENSE.html",
    "href": "env-home/lib/python3.11/site-packages/idna-3.7.dist-info/LICENSE.html",
    "title": "GD benchmark sets",
    "section": "",
    "text": "BSD 3-Clause License\nCopyright (c) 2013-2024, Kim Davies and contributors. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "env-home/lib/python3.11/site-packages/pyzmq-26.0.3.dist-info/licenses/LICENSE.html",
    "href": "env-home/lib/python3.11/site-packages/pyzmq-26.0.3.dist-info/licenses/LICENSE.html",
    "title": "GD benchmark sets",
    "section": "",
    "text": "BSD 3-Clause License\nCopyright (c) 2009-2012, Brian Granger, Min Ragan-Kelley\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "env-home/lib/python3.11/site-packages/soupsieve-2.5.dist-info/licenses/LICENSE.html",
    "href": "env-home/lib/python3.11/site-packages/soupsieve-2.5.dist-info/licenses/LICENSE.html",
    "title": "GD benchmark sets",
    "section": "",
    "text": "MIT License\nCopyright (c) 2018 - 2023 Isaac Muse isaacmuse@gmail.com\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
]